[{"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\index.js":"1","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\lang\\Language.ts":"2","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\AuthLayout\\index.js":"3","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\AdminLayout\\index.js":"4","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\rootReducer.js":"5","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\index.js":"6","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Posts\\index.js":"7","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\GetAllDomainesReducer.js":"8","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CategoryReducer\\GetAllCategoryReducer.js":"9","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostsByCategoryReducer.js":"10","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\config\\ServerConfig.js":"11","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Glossary\\index.js":"12","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\FaqLayout\\index.js":"13","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\TestimonialLayout\\index.js":"14","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\JobOffer\\JobOfferDetail\\index.js":"15","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\PostLayout\\index.js":"16","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\HeaderUser\\index.js":"17","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Testimonial\\index.js":"18","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Glossary\\index.js":"19","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Sidebar\\index.js":"20","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Posts\\PostDetail\\index.js":"21","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\AuthType.js":"22","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\NewBlog\\index.js":"23","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\FaqApi.js":"24","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\TestimonialActions.js":"25","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\DomaineActions.js":"26","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\AuthActions.js":"27","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\FaqActions.js":"28","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\ValidatePublicationAction.js":"29","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\GlossaryApi.js":"30","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\SignInApi.js":"31","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\ImageType.js":"32","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\ArchiveWidget\\index.js":"33","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PostWidget\\index.js":"34","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\GlossaryActions.js":"35","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\ProfileDropdown\\index.js":"36","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\CreateDomaineReducer.js":"37","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\FaqReducer\\GetAllFaqReducer.js":"38","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CategoryReducer\\CreateCategoryReducer.js":"39","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\TestimonialReducer\\GetTestimonialReducer.js":"40","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\CommentApi.js":"41","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\ValidatePublicationReducer\\ValidatePublicationReducer.js":"42","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\JobOfferReducer\\GetJobOfferReducer.js":"43","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PostList\\index.js":"44","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\GlossaryReducer\\PostGlossaryReducer.js":"45","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\BlogList\\index.js":"46","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\JobOfferActions.js":"47","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\BlogReducer\\PostBlogReducer.js":"48","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PostWidgetList\\index.js":"49","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\CommentActions.js":"50","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\JobOfferType.js":"51","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Comment\\index.js":"52","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\RichTextEditor\\index.js":"53","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\utils\\index.js":"54","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\store\\index.js":"55","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\config\\Constant.js":"56","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\MainLayout\\index.js":"57","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\AdminRoute\\index.js":"58","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PrivateRoute\\index.js":"59","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\UserRoute\\index.js":"60","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\UserLayout\\index.js":"61","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Home\\index.js":"62","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\BlogApi.js":"63","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\PostsApi.js":"64","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\NewPost\\NewPost.js":"65","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\test\\test.js":"66","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\CategoryApi.js":"67","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\BlogActions.js":"68","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\index.js":"69","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Header\\index.js":"70","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\BlogLayout\\index.js":"71","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Footer\\index.js":"72","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\JobOfferLayout\\index.js":"73","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Testimonial\\index.js":"74","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\JobOffer\\index.js":"75","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\SignIn\\index.js":"76","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\FAQ\\index.js":"77","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Blog\\BlogDetail\\index.js":"78","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\HeaderAdmin\\index.js":"79","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\GlossaryLayout\\index.js":"80","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\index.js":"81","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Blog\\index.js":"82","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\BlogThematique\\index.js":"83","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\PostThematique\\index.js":"84","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\EditBlog\\index.js":"85","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\PostsActions.js":"86","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\FAQ\\index.js":"87","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\TitleUnderlined\\index.js":"88","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Loader\\index.js":"89","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\CommonScreen\\NotFound\\index.js":"90","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\fakeData\\index.js":"91","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\DomaineApi.js":"92","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\ImageApi.js":"93","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Slider\\index.js":"94","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\PostCategory\\index.js":"95","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\EditPost\\index.js":"96","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\index.js":"97","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\CategoryActions.js":"98","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\Demands\\index.js":"99","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\Demands\\NewDemands\\index.js":"100","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\TestimonialApi.js":"101","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\ValidationApi.js":"102","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\config\\Images.js":"103","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\PostsType.js":"104","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\TextArea\\TextArea.js":"105","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\ImageActions.js":"106","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\CategoryType.js":"107","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Input\\index.js":"108","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\SecondaryNavigation\\index.js":"109","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\AboutOpenRHWidget\\index.js":"110","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\NavigationLight\\index.js":"111","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\DataTable\\index.js":"112","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\TestimonialList\\index.js":"113","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\SocialShare\\index.js":"114","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\CommentField\\index.js":"115","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Comments\\index.js":"116","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\CustomMaterialMenu\\index.js":"117","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\JobOfferApi.js":"118","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\DomaineType.js":"119","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\TestimonialType.js":"120","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\BlogType.js":"121","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\FaqType.js":"122","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\ValidatePublicationType.js":"123","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\NotificationDropdown\\index.js":"124","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\FaqList\\index.js":"125","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\JobOfferList\\index.js":"126","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\GlossaryList\\index.js":"127","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\JobOffer\\AddNewJobOffer\\index.js":"128","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\LanguageSwitcher\\index.jsx":"129","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Button\\index.js":"130","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\CommentType.js":"131","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\GlossaryItem\\index.js":"132","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\GlossaryType.js":"133","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\BlogReducer\\GetAllBlogReducer.js":"134","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetPostByIdReducer.js":"135","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\BlogReducer\\GetBlogReducer.js":"136","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\AddNewPostReducer.js":"137","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostsByDomainReducer.js":"138","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\AuthReducer\\SignInReducer.js":"139","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\ModifyDomaineReducer.js":"140","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\GlossaryReducer\\GetAllGlossaryReducer.js":"141","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\GetDomaineByPostReducer.js":"142","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\DeletePostReducer.js":"143","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostFeaturedReducer.js":"144","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CategoryReducer\\ModifyCategoryReducer.js":"145","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\ModifyPostReducer.js":"146","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\NotificationReducer\\GetUserNotificationReducer.js":"147","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\ValidatePublicationReducer\\GetAdminPublicationToValidateReducer.js":"148","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\JobOfferReducer\\PostJobOfferReducer.js":"149","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\TestimonialReducer\\PostTestimonialReducer.js":"150","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\FaqReducer\\PostFaqReducer.js":"151","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\ImageReducer\\UploadImageReducer.js":"152","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CommentReducer\\PostCommentReducer.js":"153","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostsReducer.js":"154","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\NotificationAPi.js":"155","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\App.js":"156"},{"size":719,"mtime":1616475768000,"results":"157","hashOfConfig":"158"},{"size":54,"mtime":1616475768000,"results":"159","hashOfConfig":"158"},{"size":609,"mtime":1616475768000,"results":"160","hashOfConfig":"158"},{"size":3345,"mtime":1617375555000,"results":"161","hashOfConfig":"158"},{"size":4031,"mtime":1616475768000,"results":"162","hashOfConfig":"158"},{"size":10711,"mtime":1616475768000,"results":"163","hashOfConfig":"158"},{"size":8779,"mtime":1616475768000,"results":"164","hashOfConfig":"158"},{"size":931,"mtime":1616475768000,"results":"165","hashOfConfig":"158"},{"size":976,"mtime":1616475768000,"results":"166","hashOfConfig":"158"},{"size":960,"mtime":1616475768000,"results":"167","hashOfConfig":"158"},{"size":2188,"mtime":1624280148696,"results":"168","hashOfConfig":"158"},{"size":9804,"mtime":1616475768000,"results":"169","hashOfConfig":"158"},{"size":356,"mtime":1616475768000,"results":"170","hashOfConfig":"158"},{"size":404,"mtime":1616475768000,"results":"171","hashOfConfig":"158"},{"size":8432,"mtime":1616475768000,"results":"172","hashOfConfig":"158"},{"size":605,"mtime":1616475768000,"results":"173","hashOfConfig":"158"},{"size":10827,"mtime":1624369017335,"results":"174","hashOfConfig":"158"},{"size":13135,"mtime":1616475768000,"results":"175","hashOfConfig":"158"},{"size":14523,"mtime":1616475768000,"results":"176","hashOfConfig":"158"},{"size":3555,"mtime":1616475768000,"results":"177","hashOfConfig":"158"},{"size":7865,"mtime":1624451478211,"results":"178","hashOfConfig":"158"},{"size":175,"mtime":1616475768000,"results":"179","hashOfConfig":"158"},{"size":15375,"mtime":1616475768000,"results":"180","hashOfConfig":"158"},{"size":2099,"mtime":1616475768000,"results":"181","hashOfConfig":"158"},{"size":1067,"mtime":1616475768000,"results":"182","hashOfConfig":"158"},{"size":1945,"mtime":1616475768000,"results":"183","hashOfConfig":"158"},{"size":453,"mtime":1616475768000,"results":"184","hashOfConfig":"158"},{"size":859,"mtime":1616475768000,"results":"185","hashOfConfig":"158"},{"size":1764,"mtime":1616475768000,"results":"186","hashOfConfig":"158"},{"size":2253,"mtime":1616475768000,"results":"187","hashOfConfig":"158"},{"size":1113,"mtime":1619769980000,"results":"188","hashOfConfig":"158"},{"size":231,"mtime":1616475768000,"results":"189","hashOfConfig":"158"},{"size":784,"mtime":1616475768000,"results":"190","hashOfConfig":"158"},{"size":2435,"mtime":1616475768000,"results":"191","hashOfConfig":"158"},{"size":989,"mtime":1616475768000,"results":"192","hashOfConfig":"158"},{"size":1412,"mtime":1624360191896,"results":"193","hashOfConfig":"158"},{"size":937,"mtime":1616475768000,"results":"194","hashOfConfig":"158"},{"size":886,"mtime":1616475768000,"results":"195","hashOfConfig":"158"},{"size":935,"mtime":1616475768000,"results":"196","hashOfConfig":"158"},{"size":969,"mtime":1616475768000,"results":"197","hashOfConfig":"158"},{"size":1101,"mtime":1616475768000,"results":"198","hashOfConfig":"158"},{"size":1001,"mtime":1616475768000,"results":"199","hashOfConfig":"158"},{"size":927,"mtime":1616475768000,"results":"200","hashOfConfig":"158"},{"size":10099,"mtime":1616475768000,"results":"201","hashOfConfig":"158"},{"size":924,"mtime":1616475768000,"results":"202","hashOfConfig":"158"},{"size":8652,"mtime":1616475768000,"results":"203","hashOfConfig":"158"},{"size":984,"mtime":1616475768000,"results":"204","hashOfConfig":"158"},{"size":887,"mtime":1616475768000,"results":"205","hashOfConfig":"158"},{"size":2986,"mtime":1616475768000,"results":"206","hashOfConfig":"158"},{"size":523,"mtime":1616475768000,"results":"207","hashOfConfig":"158"},{"size":489,"mtime":1616475768000,"results":"208","hashOfConfig":"158"},{"size":1194,"mtime":1616475768000,"results":"209","hashOfConfig":"158"},{"size":8784,"mtime":1624448628699,"results":"210","hashOfConfig":"158"},{"size":3742,"mtime":1620638097000,"results":"211","hashOfConfig":"158"},{"size":390,"mtime":1616475768000,"results":"212","hashOfConfig":"158"},{"size":3817,"mtime":1623332980000,"results":"213","hashOfConfig":"158"},{"size":3452,"mtime":1617375513000,"results":"214","hashOfConfig":"158"},{"size":1382,"mtime":1616475768000,"results":"215","hashOfConfig":"158"},{"size":1060,"mtime":1616475768000,"results":"216","hashOfConfig":"158"},{"size":1381,"mtime":1616475768000,"results":"217","hashOfConfig":"158"},{"size":1498,"mtime":1617194138000,"results":"218","hashOfConfig":"158"},{"size":46808,"mtime":1624465726100,"results":"219","hashOfConfig":"158"},{"size":2774,"mtime":1623601391000,"results":"220","hashOfConfig":"158"},{"size":11965,"mtime":1616475768000,"results":"221","hashOfConfig":"158"},{"size":28312,"mtime":1620638362000,"results":"222","hashOfConfig":"158"},{"size":97,"mtime":1617194020000,"results":"223","hashOfConfig":"158"},{"size":3128,"mtime":1616475768000,"results":"224","hashOfConfig":"158"},{"size":884,"mtime":1616475768000,"results":"225","hashOfConfig":"158"},{"size":13675,"mtime":1618829679000,"results":"226","hashOfConfig":"158"},{"size":19584,"mtime":1624370020173,"results":"227","hashOfConfig":"158"},{"size":482,"mtime":1616475768000,"results":"228","hashOfConfig":"158"},{"size":2274,"mtime":1624454902709,"results":"229","hashOfConfig":"158"},{"size":531,"mtime":1616475768000,"results":"230","hashOfConfig":"158"},{"size":13850,"mtime":1616475768000,"results":"231","hashOfConfig":"158"},{"size":5862,"mtime":1616475768000,"results":"232","hashOfConfig":"158"},{"size":6608,"mtime":1619632249000,"results":"233","hashOfConfig":"158"},{"size":14133,"mtime":1616475768000,"results":"234","hashOfConfig":"158"},{"size":8569,"mtime":1618748678000,"results":"235","hashOfConfig":"158"},{"size":10439,"mtime":1624368627469,"results":"236","hashOfConfig":"158"},{"size":386,"mtime":1616475768000,"results":"237","hashOfConfig":"158"},{"size":13772,"mtime":1616475768000,"results":"238","hashOfConfig":"158"},{"size":8134,"mtime":1616475768000,"results":"239","hashOfConfig":"158"},{"size":19367,"mtime":1622992139000,"results":"240","hashOfConfig":"158"},{"size":20770,"mtime":1620664988000,"results":"241","hashOfConfig":"158"},{"size":14912,"mtime":1623601754000,"results":"242","hashOfConfig":"158"},{"size":3577,"mtime":1616475768000,"results":"243","hashOfConfig":"158"},{"size":21361,"mtime":1616475768000,"results":"244","hashOfConfig":"158"},{"size":510,"mtime":1616475768000,"results":"245","hashOfConfig":"158"},{"size":647,"mtime":1616475768000,"results":"246","hashOfConfig":"158"},{"size":1703,"mtime":1616475768000,"results":"247","hashOfConfig":"158"},{"size":11443,"mtime":1616475768000,"results":"248","hashOfConfig":"158"},{"size":4217,"mtime":1616475768000,"results":"249","hashOfConfig":"158"},{"size":1086,"mtime":1616475768000,"results":"250","hashOfConfig":"158"},{"size":1904,"mtime":1624462535687,"results":"251","hashOfConfig":"158"},{"size":16967,"mtime":1616475768000,"results":"252","hashOfConfig":"158"},{"size":29716,"mtime":1624462238016,"results":"253","hashOfConfig":"158"},{"size":2946,"mtime":1616475768000,"results":"254","hashOfConfig":"158"},{"size":1436,"mtime":1616475768000,"results":"255","hashOfConfig":"158"},{"size":9638,"mtime":1616475768000,"results":"256","hashOfConfig":"158"},{"size":15368,"mtime":1617193054000,"results":"257","hashOfConfig":"158"},{"size":1185,"mtime":1616475768000,"results":"258","hashOfConfig":"158"},{"size":2493,"mtime":1616475768000,"results":"259","hashOfConfig":"158"},{"size":748,"mtime":1624361250896,"results":"260","hashOfConfig":"158"},{"size":2113,"mtime":1616475768000,"results":"261","hashOfConfig":"158"},{"size":1939,"mtime":1616475768000,"results":"262","hashOfConfig":"158"},{"size":511,"mtime":1616475768000,"results":"263","hashOfConfig":"158"},{"size":746,"mtime":1616475768000,"results":"264","hashOfConfig":"158"},{"size":2007,"mtime":1616475768000,"results":"265","hashOfConfig":"158"},{"size":2433,"mtime":1616475768000,"results":"266","hashOfConfig":"158"},{"size":390,"mtime":1616475768000,"results":"267","hashOfConfig":"158"},{"size":3736,"mtime":1616475768000,"results":"268","hashOfConfig":"158"},{"size":1493,"mtime":1616475768000,"results":"269","hashOfConfig":"158"},{"size":6467,"mtime":1616475768000,"results":"270","hashOfConfig":"158"},{"size":936,"mtime":1616475768000,"results":"271","hashOfConfig":"158"},{"size":3524,"mtime":1616475768000,"results":"272","hashOfConfig":"158"},{"size":951,"mtime":1616475768000,"results":"273","hashOfConfig":"158"},{"size":4319,"mtime":1616475768000,"results":"274","hashOfConfig":"158"},{"size":2071,"mtime":1616475768000,"results":"275","hashOfConfig":"158"},{"size":1092,"mtime":1616475768000,"results":"276","hashOfConfig":"158"},{"size":553,"mtime":1616475768000,"results":"277","hashOfConfig":"158"},{"size":642,"mtime":1616475768000,"results":"278","hashOfConfig":"158"},{"size":425,"mtime":1616475768000,"results":"279","hashOfConfig":"158"},{"size":1003,"mtime":1616475768000,"results":"280","hashOfConfig":"158"},{"size":8657,"mtime":1616475768000,"results":"281","hashOfConfig":"158"},{"size":4879,"mtime":1616475768000,"results":"282","hashOfConfig":"158"},{"size":7213,"mtime":1616475768000,"results":"283","hashOfConfig":"158"},{"size":3337,"mtime":1616475768000,"results":"284","hashOfConfig":"158"},{"size":32259,"mtime":1616475768000,"results":"285","hashOfConfig":"158"},{"size":2063,"mtime":1616475768000,"results":"286","hashOfConfig":"158"},{"size":2538,"mtime":1616475768000,"results":"287","hashOfConfig":"158"},{"size":231,"mtime":1616475768000,"results":"288","hashOfConfig":"158"},{"size":3710,"mtime":1616475768000,"results":"289","hashOfConfig":"158"},{"size":505,"mtime":1616475768000,"results":"290","hashOfConfig":"158"},{"size":899,"mtime":1616475768000,"results":"291","hashOfConfig":"158"},{"size":910,"mtime":1616475768000,"results":"292","hashOfConfig":"158"},{"size":883,"mtime":1616475768000,"results":"293","hashOfConfig":"158"},{"size":902,"mtime":1616475768000,"results":"294","hashOfConfig":"158"},{"size":952,"mtime":1616475768000,"results":"295","hashOfConfig":"158"},{"size":868,"mtime":1616475768000,"results":"296","hashOfConfig":"158"},{"size":937,"mtime":1616475768000,"results":"297","hashOfConfig":"158"},{"size":936,"mtime":1616475768000,"results":"298","hashOfConfig":"158"},{"size":947,"mtime":1616475768000,"results":"299","hashOfConfig":"158"},{"size":898,"mtime":1616475768000,"results":"300","hashOfConfig":"158"},{"size":948,"mtime":1616475768000,"results":"301","hashOfConfig":"158"},{"size":935,"mtime":1616475768000,"results":"302","hashOfConfig":"158"},{"size":898,"mtime":1616475768000,"results":"303","hashOfConfig":"158"},{"size":1005,"mtime":1616475768000,"results":"304","hashOfConfig":"158"},{"size":1053,"mtime":1616475768000,"results":"305","hashOfConfig":"158"},{"size":931,"mtime":1616475768000,"results":"306","hashOfConfig":"158"},{"size":957,"mtime":1616475768000,"results":"307","hashOfConfig":"158"},{"size":874,"mtime":1616475768000,"results":"308","hashOfConfig":"158"},{"size":902,"mtime":1616475768000,"results":"309","hashOfConfig":"158"},{"size":917,"mtime":1616475768000,"results":"310","hashOfConfig":"158"},{"size":912,"mtime":1616475768000,"results":"311","hashOfConfig":"158"},{"size":1330,"mtime":1616475768000,"results":"312","hashOfConfig":"158"},{"size":3132,"mtime":1624459899718,"results":"313","hashOfConfig":"158"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},"p8ld2l",{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"319"},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"316"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"328","messages":"329","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"322"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333","usedDeprecatedRules":"322"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"322"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"322"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342","usedDeprecatedRules":"316"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"322"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"322"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"322"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"316"},{"filePath":"361","messages":"362","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"322"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"322"},{"filePath":"367","messages":"368","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"322"},{"filePath":"370","messages":"371","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"372","usedDeprecatedRules":"316"},{"filePath":"373","messages":"374","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"375","messages":"376","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"316"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"380","messages":"381","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"382","messages":"383","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"384","messages":"385","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"386","messages":"387","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"388","messages":"389","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"390","messages":"391","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"322"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"322"},{"filePath":"402","messages":"403","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406","usedDeprecatedRules":"322"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"409","usedDeprecatedRules":"322"},{"filePath":"410","messages":"411","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412","usedDeprecatedRules":"316"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415","usedDeprecatedRules":"316"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"316"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"316"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"322"},{"filePath":"427","messages":"428","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"322"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"322"},{"filePath":"433","messages":"434","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"322"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440","usedDeprecatedRules":"316"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443","usedDeprecatedRules":"322"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"316"},{"filePath":"451","messages":"452","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"453","messages":"454","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"316"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"316"},{"filePath":"461","messages":"462","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"322"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"322"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"469","usedDeprecatedRules":"316"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472","usedDeprecatedRules":"316"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"322"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"322"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"322"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"490","messages":"491","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"492","messages":"493","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"494","usedDeprecatedRules":"316"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"322"},{"filePath":"498","messages":"499","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500","usedDeprecatedRules":"322"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"322"},{"filePath":"508","messages":"509","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"316"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"322"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"316"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"322"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"522","usedDeprecatedRules":"322"},{"filePath":"523","messages":"524","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"525","messages":"526","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"322"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"322"},{"filePath":"531","messages":"532","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"322"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"322"},{"filePath":"537","messages":"538","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"322"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"316"},{"filePath":"545","messages":"546","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"316"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"316"},{"filePath":"553","messages":"554","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"555","messages":"556","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"559","messages":"560","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"561","messages":"562","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"322"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"316"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569","usedDeprecatedRules":"322"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574","usedDeprecatedRules":"322"},{"filePath":"575","messages":"576","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577","usedDeprecatedRules":"316"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"316"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"591","messages":"592","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"593","messages":"594","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"322"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"322"},{"filePath":"599","messages":"600","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"601","messages":"602","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"603","usedDeprecatedRules":"322"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"606","usedDeprecatedRules":"322"},{"filePath":"607","messages":"608","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"322"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"322"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"615","usedDeprecatedRules":"316"},{"filePath":"616","messages":"617","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"316"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"322"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"630","messages":"631","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"634","messages":"635","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636","usedDeprecatedRules":"322"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"322"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"322"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"316"},{"filePath":"646","messages":"647","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648","usedDeprecatedRules":"649"},{"filePath":"650","messages":"651","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"316"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"657","messages":"658","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659","usedDeprecatedRules":"649"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"322"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"322"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"322"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"670","usedDeprecatedRules":"316"},{"filePath":"671","messages":"672","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673","usedDeprecatedRules":"322"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"676","usedDeprecatedRules":"322"},{"filePath":"677","messages":"678","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"679","usedDeprecatedRules":"322"},{"filePath":"680","messages":"681","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"682","usedDeprecatedRules":"322"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"322"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"688","usedDeprecatedRules":"322"},{"filePath":"689","messages":"690","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"322"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"322"},{"filePath":"695","messages":"696","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"316"},{"filePath":"698","messages":"699","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"322"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"322"},{"filePath":"704","messages":"705","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"706","usedDeprecatedRules":"316"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"316"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"712","usedDeprecatedRules":"322"},{"filePath":"713","messages":"714","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715","usedDeprecatedRules":"322"},{"filePath":"716","messages":"717","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"322"},{"filePath":"719","messages":"720","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"322"},{"filePath":"722","messages":"723","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"724","usedDeprecatedRules":"316"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"316"},{"filePath":"727","messages":"728","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\index.js",[],["729","730"],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\lang\\Language.ts",[],["731","732"],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\AuthLayout\\index.js",[],["733","734"],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\AdminLayout\\index.js",["735"],"import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport NewBlog from \"../../screens/Admin/Blog/NewBlog\";\nimport Admin from \"../../screens/Admin\";\nimport HeaderAdmin from \"../../components/HeaderAdmin\";\nimport Footer from \"../../components/Footer\";\nimport NewPost from \"../../screens/Admin/Posts/NewPost/NewPost\";\nimport EditPost from \"../../screens/Admin/Posts/EditPost\";\nimport PostCategory from \"../../screens/Admin/Posts/PostCategory\";\nimport PostThematique from \"../../screens/Admin/Posts/PostThematique\";\nimport BlogThematique from \"../../screens/Admin/Blog/BlogThematique\";\nimport EditBlog from \"../../screens/Admin/Blog/EditBlog\";\nimport Sidebar from \"../../components/Sidebar\";\nimport AdminPost from \"../../screens/Admin/Posts\";\nimport AdminBlog from \"../../screens/Admin/Blog\";\nimport AdminGlossary from \"../../screens/Admin/Glossary\";\nimport AdminFAQ from \"../../screens/Admin/FAQ\";\nimport AdminTestimonial from \"../../screens/Admin/Testimonial\";\n\nlet route = require('../../utils/route');\n\n\nexport default function AdminLayout(props) {\n\n    console.warn(\"Appel de AminLayout\");\n    return (\n        <>\n            <HeaderAdmin/>\n            <main role=\"main\" id=\"content\" style={{minHeight: \"100vh\"}}>\n                <div className=\"row\">\n                    {/*<Sidebar/>*/}\n                    <div className=\"col-12\" style={{paddingTop: '220px'}}>\n                        <Switch>\n                            <Route path={route.admin_url[1].link} component={Admin} exact={true} strict={true}/>\n                            <Route path={route.post.admin_post} component={AdminPost} exact={true} strict={true}/>\n                            <Route path={route.blog.admin_blog} component={AdminBlog} exact={true} strict={true}/>\n                            <Route path={route.blog.admin_blog_thematique} component={BlogThematique} exact={true}\n                                   strict={true}/>\n                            <Route path={route.post.add_new} component={NewPost} exact={true} strict={true}/>\n                            <Route path={route.post.edit_post_domain} component={EditPost} exact={true} strict={true}/>\n                            <Route path={route.post.admin_post_category} component={PostCategory} exact={true}\n                                   strict={true}/>\n                            <Route path={route.post.admin_post_thematique} component={PostThematique} exact={true}\n                                   strict={true}/>\n                            <Route path={route.blog.edit_blog_domain} component={EditBlog} exact={true} strict={true}/>\n                            <Route path={route.blog.add_new} component={NewBlog} exact={true} strict={true}/>\n                            <Route path={route.glossary.admin_glossary} component={AdminGlossary} exact={true}\n                                   strict={true}/>\n                            <Route path={route.faq.admin_faq} component={AdminFAQ} exact={true}\n                                   strict={true}/>\n                            <Route path={route.testimonial.admin_testimonial} component={AdminTestimonial} exact={true}\n                                   strict={true}/>\n                        </Switch>\n                    </div>\n                </div>\n            </main>\n            <Footer/>\n        </>\n    )\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\rootReducer.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\index.js",["736"],"import React from 'react';\nimport './style.css';\nimport {Images} from \"../../config/Images\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nlet route = require(\"../../utils/route\");\n\nexport default function Admin(props) {\n    console.log(\"Admin page\");\n    const {t} = useTranslation();\n    let history = useHistory();\n\n    return (\n        <>\n            <div className=\"container-fluid dashboard-admin\">\n                <div className=\"row\">\n                    <div className=\"col-xl-3 col-md-6 mb-4\">\n                        <div className=\"card border-left-blue shadow h-100 py-2  rounded-sm\"\n                             style={{border: \"1px solid var(--gray)\"}}\n                             onClick={() => history.push(route.post.admin_post)}>\n                            <div className=\"card-body\">\n                                <div className=\"row no-gutters align-items-center\">\n                                    <div className=\"col mr-2\">\n                                        <div className=\"text-xs font-weight-bold color-blue text-uppercase mb-1\">\n                                            {t(\"posts.title\")}\n                                        </div>\n                                        <div className=\"h5 mb-0 font-weight-bold text-gray-800\">10</div>\n                                    </div>\n                                    <div className=\"col-auto\">\n                                        <i className=\"fas fa-calendar fa-2x text-gray-300\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-xl-3 col-md-6 mb-4\">\n                        <div className=\"card border-left-green shadow h-100 py-2 rounded-sm\"\n                             style={{border: \"1px solid var(--gray)\"}} onClick={() => history.push(route.blog.admin_blog)}>\n                            <div className=\"card-body\">\n                                <div className=\"row no-gutters align-items-center\">\n                                    <div className=\"col mr-2\">\n                                        <div className=\"text-xs font-weight-bold color-green text-uppercase mb-1\">\n                                            {t('blog.title')}\n                                        </div>\n                                        <div className=\"h5 mb-0 font-weight-bold text-gray-800\">12</div>\n                                    </div>\n                                    <div className=\"col-auto\">\n                                        <i className=\"fas fa-dollar-sign fa-2x text-gray-300\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-xl-3 col-md-6 mb-4\">\n                        <div className=\"card border-left-orange shadow h-100 py-2 rounded-sm\"\n                             style={{border: \"1px solid var(--gray)\"}} onClick={() => history.push(route.testimonial.admin_testimonial)}>\n                            <div className=\"card-body\">\n                                <div className=\"row no-gutters align-items-center\">\n                                    <div className=\"col mr-2\">\n                                        <div className=\"text-xs font-weight-bold color-orange text-uppercase mb-1\">{t('testimonial.title')}\n                                        </div>\n                                        <div className=\"h5 mb-0 font-weight-bold text-gray-800\">15</div>\n                                    </div>\n                                    <div className=\"col-auto\">\n                                        <i className=\"fas fa-clipboard-list fa-2x text-gray-300\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-xl-3 col-md-6 mb-4\">\n                        <div className=\"card border-left-yellow  shadow h-100 py-2 rounded-sm\"\n                             style={{border: \"1px solid var(--gray)\"}} onClick={() => history.push(route.faq.admin_faq)}>\n                            <div className=\"card-body\">\n                                <div className=\"row no-gutters align-items-center\">\n                                    <div className=\"col mr-2\">\n                                        <div className=\"text-xs font-weight-bold color-yellow text-uppercase mb-1\">\n                                            {t('admin.faq')}\n                                        </div>\n                                        <div className=\"h5 mb-0 font-weight-bold text-gray-800\">18</div>\n                                    </div>\n                                    <div className=\"col-auto\">\n                                        <i className=\"fas fa-comments fa-2x text-gray-300\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <div className=\"bg-danger rounded-sm w-100 d-flex py-3 px-3 br-4\">\n                            <img alt=\"orange et moi\"\n                                 src={Images.document} width={108} height={100}/>\n                            <div className=\"ml-2 d-flex flex-column\">\n                                <h1 className=\"font-size-18 font-size-lg-24 align-self-center\">{t('admin.publication_management')}</h1>\n                                <NavLink\n                                    style={{width: \"max-content\"}}\n                                    to={{\n                                        pathname: route.post.admin_post\n                                    }}\n                                    className=\"btn btn-secondary mt-auto\"\n                                    exact>\n                                    {t('common.consulter')}\n                                </NavLink>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-4\">\n                        <div className=\"bg-purple rounded-sm w-100 d-flex py-3 px-3 br-4\">\n                            <img alt=\"orange et moi\"\n                                 src={Images.announcement} width={108} height={100}/>\n                            <div className=\"ml-2 d-flex flex-column\">\n                                <h1 className=\"font-size-18 font-size-lg-24 align-self-center\">{t('admin.blog_management')}</h1>\n                                <NavLink\n                                    style={{width: \"max-content\"}}\n                                    to={{\n                                        pathname: route.blog.admin_blog\n                                    }}\n                                    className=\"btn btn-secondary mt-auto\"\n                                    exact>\n                                    {t('common.consulter')}\n                                </NavLink>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-md-4\">\n                        <div className=\"bg-success rounded-sm w-100 d-flex py-3 px-3 br-4\">\n                            <img alt=\"orange et moi\"\n                                 src={Images.envelope} width={108} height={100}/>\n                            <div className=\"ml-2 d-flex flex-column\">\n                                <h1 className=\"font-size-18 font-size-lg-24 align-self-center\">{t('admin.demands_management')}</h1>\n                                <NavLink\n                                    style={{width: \"max-content\"}}\n                                    to={{\n                                        pathname: route.blog.admin_blog\n                                    }}\n                                    className=\"btn btn-secondary mt-auto\"\n                                    exact>\n                                    {t('common.consulter')}\n                                </NavLink>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div className=\"row mt-4\">\n                    <div className=\"col-6\">\n                        <div className=\"card border-secondary shadow mb-4\">\n                            <div className=\"card-header py-3\">\n                                <h6 className=\"m-0 font-weight-bold text-primary\">Development Approach</h6>\n                            </div>\n                            <div className=\"card-body text-secondary\">\n                                <p>SB Admin 2 makes extensive use of Bootstrap 4 utility classes in order to reduce\n                                    CSS bloat and poor page performance. Custom CSS classes are used to create\n                                    custom components and custom utility classes.</p>\n                                <p className=\"mb-0\">Before working with this theme, you should become familiar with the\n                                    Bootstrap framework, especially the utility classes.</p>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div className=\"col-6\">\n                        <div className=\"card border-secondary shadow mb-4\">\n                            <div className=\"card-header py-3\">\n                                <h6 className=\"m-0 font-weight-bold text-primary\">Development Approach</h6>\n                            </div>\n                            <div className=\"card-body text-secondary\">\n                                <p>SB Admin 2 makes extensive use of Bootstrap 4 utility classes in order to reduce\n                                    CSS bloat and poor page performance. Custom CSS classes are used to create\n                                    custom components and custom utility classes.</p>\n                                <p className=\"mb-0\">Before working with this theme, you should become familiar with the\n                                    Bootstrap framework, especially the utility classes.</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n        </>\n    );\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Posts\\index.js",["737","738","739","740","741","742","743","744"],"import React, {useEffect, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport NavigationLight from \"../../components/NavigationLight\";\nimport {FakeData} from \"../../fakeData\";\nimport PostList from \"../../components/PostList\";\nimport PostWidget from \"../../components/PostWidget\";\nimport {\n    getAllPostsByDomaineReset,\n    getAllPostsByDomaineAction,\n    getAllPostsByCategoryAction,\n    getAllPostsReset\n} from \"../../redux/api/PostsApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport Loader from \"../../components/Loader\";\nimport AboutOpenRHWidget from \"../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../components/ArchiveWidget\";\nimport {Constant} from \"../../config/Constant\";\nimport {toast} from \"react-toastify\";\nimport {Helmet} from \"react-helmet\";\nimport SecondaryNavigation from \"../../components/SecondaryNavigation\";\nimport $ from \"jquery\";\nimport * as Utils from \"../../utils\";\nimport {getAllCategoryAction, getAllCategoryReset} from \"../../redux/api/CategoryApi\";\n\nlet route = require('../../utils/route');\n\nfunction Posts(props) {\n    const {t} = useTranslation();\n    let history = useHistory();\n    const [search, setSearch] = useState('');\n    const [postsFilter, setPostsFilter] = useState(null);\n    let {id, page, category, domaine} = useParams();\n    let pathParam = useParams();\n\n\n    useEffect(() => {\n        if (domaine === undefined && props.resultGetPostByCategory === null && props.resultGetPostByCategory === null) {\n            //props.getAllPostsByDomaineReset();\n            props.getAllPostsByCategoryAction(category);\n        }\n\n        if (props.resultGetCategory === null)\n            props.getAllCategoryAction();\n\n    }, [props]);\n\n    useEffect(() => {\n        console.log(\"PATH PARAMS\", pathParam);\n        props.getAllPostsByDomaineReset();\n        props.getAllPostsByCategoryAction(category);\n        if (domaine !== undefined)\n            props.getAllPostsByDomaineAction(category, domaine);\n    }, [props.location.pathname]);\n\n    useEffect(() => {\n        $(\"body\").addClass(\"bg-gray\");\n    });\n\n    const handleSearch = () => {\n        console.log(search);\n        if (props.result !== null) {\n            if (domaine === undefined)\n                setPostsFilter(props.resultGetPostByCategory.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase())))\n            else\n                setPostsFilter(props.result.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase())))\n\n        }\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t('posts.title')}`}</title>\n            </Helmet>\n            <div className=\"post-header pt-5 bg-white\">\n                <div className=\"container\">\n                    <h1>{props.resultGetCategory !== null &&\n                    props.resultGetCategory.filter((cat) => cat.rhContentCategoryId === parseInt(category))[0] !== undefined &&\n                    props.resultGetCategory.filter((cat) => cat.rhContentCategoryId === parseInt(category))[0].rhContentCategoryName}</h1>\n                </div>\n                <NavigationLight menuLink={`${route.post.root}/${category}`} additionnalClasses\n                                 categoryId={category}/>\n\n                <SecondaryNavigation\n                    data={props.resultGetPostByCategory !== null ? props.resultGetPostByCategory : null}\n                    menuLink={route.post.root}/>\n            </div>\n\n            <section className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-lg-9\">\n                        <div className=\"row mb-3\">\n                            {/*                                <div className=\"col-auto mr-auto\">\n                                    <NavLink to={route.post.add_new} className=\"btn btn-primary\" exact>\n                                        <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                        {t('posts.new_post')}\n                                    </NavLink>\n                                </div>*/}\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('posts.find_post')}\n                                           aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            {\n                                props.loading || props.loadingGetDomaine || props.loadingGetPostByCategory ?\n                                    <Loader/> :\n                                    (domaine === undefined ?\n                                        (props.resultGetDomaine !== null && props.resultGetPostByCategory !== null) ?\n                                            <PostList\n                                                posts={search !== '' ? postsFilter : props.resultGetPostByCategory}/> :\n                                            (props.errorGetDomaine !== null && props.error !== null) &&\n                                            <div className=\"alert alert-danger\" role=\"alert\">\n                                                <span className=\"alert-icon\"><span\n                                                    className=\"sr-only\">Info</span></span>\n                                                <p>{t(Utils.displayErrorRequest(props.error))}</p>\n                                            </div> :\n                                        (props.resultGetDomaine !== null && props.result !== null) ?\n                                            <PostList\n                                                posts={search !== '' ? postsFilter : props.result}/> :\n                                            (props.errorGetDomaine !== null && props.error !== null) &&\n                                            <div className=\"alert alert-danger\" role=\"alert\">\n                                                <span className=\"alert-icon\"><span\n                                                    className=\"sr-only\">Info</span></span>\n                                                <p>{t(Utils.displayErrorRequest(props.error))}</p>\n                                            </div>)\n\n                            }\n                        </div>\n\n                    </div>\n                    <aside className=\"col-12 col-lg-3\">\n                        <PostWidget categories={FakeData.post_widget_data}/>\n                        <AboutOpenRHWidget/>\n                        <ArchiveWidget/>\n                    </aside>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsByDomainReducer.loading,\n    result: state.getAllPostsByDomainReducer.result,\n    error: state.getAllPostsByDomainReducer.error,\n\n    loadingGetPostByCategory: state.getAllPostsByCategoryReducer.loading,\n    resultGetPostByCategory: state.getAllPostsByCategoryReducer.result,\n    errorGetPostByCategory: state.getAllPostsByCategoryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n\n    loadingGetCategory: state.getAllCategoryReducer.loading,\n    resultGetCategory: state.getAllCategoryReducer.result,\n    errorGetCategory: state.getAllCategoryReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n\n    getAllPostsByCategoryAction,\n    getAllPostsReset,\n\n    getAllCategoryAction,\n    getAllCategoryReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Posts));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\GetAllDomainesReducer.js",["745"],"import * as DomainesType from '../../types/DomaineType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case DomainesType.GET_ALL_DOMAINE_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case DomainesType.GET_ALL_DOMAINE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case DomainesType.GET_ALL_DOMAINE_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case DomainesType.GET_ALL_DOMAINE_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CategoryReducer\\GetAllCategoryReducer.js",["746"],"import * as CategoryType from '../../types/CategoryType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case CategoryType.GET_CATEGORY_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case CategoryType.GET_CATEGORY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data.filter(category => category.rhContentCategoryId > 4),\n                error: null\n            };\n        case CategoryType.GET_CATEGORY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case CategoryType.GET_CATEGORY_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostsByCategoryReducer.js",["747"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.GET_ALL_POST_BY_CATEGORY_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.GET_ALL_POST_BY_CATEGORY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data.reverse(),\n                error: null\n            }\n        case PostsType.GET_ALL_POST_BY_CATEGORY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.GET_ALL_POST_BY_CATEGORY_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\config\\ServerConfig.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Glossary\\index.js",["748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769"],"import React, {useEffect, useState} from 'react';\nimport {useHistory, useParams, withRouter} from \"react-router-dom\";\nimport {useTranslation} from \"react-i18next\";\nimport PostWidget from \"../../components/PostWidget\";\nimport {FakeData} from \"../../fakeData\";\nimport AboutOpenRHWidget from \"../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../components/ArchiveWidget\";\nimport {bindActionCreators} from 'redux';\nimport {\n    getAllPostsAction,\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n    getAllPostsReset\n} from \"../../redux/api/PostsApi\";\nimport {connect} from \"react-redux\";\nimport {useForm} from \"react-hook-form\";\nimport {Helmet} from \"react-helmet\";\nimport {\n    getAllGlossaryAction,\n    getAllGlossaryReset,\n    postGlossaryAction,\n    postGlossaryReset\n} from \"../../redux/api/GlossaryApi\";\nimport {Constant} from \"../../config/Constant\";\nimport _ from \"lodash\";\nimport GlossaryList from \"../../components/GlossaryList\";\nimport $ from \"jquery\";\nimport * as Utils from \"../../utils\";\nimport Loader from \"../../components/Loader\";\n\nlet route = require('../../utils/route');\n\nfunction Glossary(props) {\n    const {t} = useTranslation();\n    let {id, page, domaine} = useParams();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n\n    const [currentPath, setCurrentPath] = useState(props.location.pathname);\n    const [thematique, setThematique] = useState(1);\n    const [title, setTitle] = useState('');\n    const [keyword, setKeyword] = useState('');\n    const [glossary, setGlossary] = useState(null);\n    const [glossaryFilter, setGlossaryFilter] = useState(null);\n    const [search, setSearch] = useState('');\n    const [keywordDescription, setKeywordDescription] = useState('');\n    const [description, setDescription] = useState('');\n\n    useEffect(() => {\n        console.log(\"domaine\", domaine);\n        props.getAllGlossaryReset();\n        props.getAllGlossaryAction();\n    }, []);\n\n    useEffect(() => {\n        if ($(\"body\").hasClass('bg-gray'))\n            $(\"body\").removeClass(\"bg-gray\");\n    });\n\n    useEffect(() => {\n\n        if (props.result !== null) {\n            setGlossary(sortedGlossaryArray(props.result));\n        }\n    }, [props]);\n\n    const sortedGlossaryArray = (glossaryArray) => {\n        let sortedArray = _.sortBy(glossaryArray, [function (o) {\n            return o.rhContentTitle;\n        }]);\n        let alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n        let arraySorted = [];\n\n        alphabet.split('').map((letter) => {\n            let currentLetterGlossary = [];\n            sortedArray.map((element) => {\n                if (element.rhContentTitle.charAt(0).toLocaleUpperCase() === letter) {\n                    currentLetterGlossary.push({\n                        title: element.rhContentTitle,\n                        description: element.rhContentDescription\n                    });\n                }\n            });\n            if (currentLetterGlossary.length !== 0) {\n                arraySorted.push({\n                    category: letter,\n                    items: currentLetterGlossary\n                });\n            }\n        });\n\n        return arraySorted;\n    }\n\n    const handleSearch = () => {\n        if (props.result !== null)\n            setGlossaryFilter(sortedGlossaryArray(props.result.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase()))));\n    };\n\n    /*    useEffect(() => {\n            const {pathname} = props.location;\n            props.getAllPostsByDomaineAction(Constant.glossaireID, domaine);\n        }, [props.location.pathname]);\n\n        const onSubmitGlossaire = () => {\n            props.postGlossaryAction({\n                rhContentTitle: keyword,\n                rhContentDescription: keywordDescription,\n                rhContentCategoryId: Constant.glossaireID,\n                rhContentDomaineId: parseInt(thematique),\n                rhContentDatePublish: moment(new Date()).format(\"YYYY-MM-DD\"),\n                userId: Utils.getUserConnected().userId\n            });\n        };\n\n        useEffect(() => {\n            if (props.resultPostGlossary !== null) {\n                toast.dark(t('glossary.success'), {\n                    position: \"top-right\",\n                    autoClose: Constant.toastDelay,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: false,\n                    progress: undefined,\n                });\n                history.go(0);\n                props.postGlossaryReset();\n            }\n            if (props.errorPostGlossary !== null) {\n                toast.error(props.errorPostGlossary, {\n                    position: \"top-right\",\n                    autoClose: Constant.toastDelay,\n                    hideProgressBar: true,\n                    closeOnClick: true,\n                    pauseOnHover: true,\n                    draggable: false,\n                    progress: undefined,\n                });\n                props.postGlossaryReset();\n            }\n        }, [props]);*/\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t('glossary.title')}`}</title>\n            </Helmet>\n            <div className=\"my-5\">\n                <div className=\"container\">\n                    <h1>{t(\"navigation.glossaire\")}</h1>\n                </div>\n                {/*\n                <NavigationLight menus={FakeData.posts_menu} menuLink={route.glossary.root}/>\n*/}\n\n                <section className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-lg-9\">\n                            <div className=\"row mb-3\">\n                                {/*                                <div className=\"col-auto mr-auto\">\n                                    <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                            data-target=\"#addGlossaryModal\">\n                                        <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                        {t('glossary.add_new')}\n                                    </button>\n                                </div>*/}\n                                <div className=\"col-auto\">\n                                    <div className=\"input-group\">\n                                        <input type=\"text\" className=\"form-control\"\n                                               placeholder={t('glossary.find_glossary')}\n                                               aria-label={t('glossary.find_glossary')} aria-describedby=\"button-addon2\"\n                                               value={search} onChange={(e) => {\n                                            setSearch(e.target.value);\n                                            handleSearch();\n                                        }}/>\n                                        <div className=\"input-group-append\">\n                                            <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                                <span className=\"sr-only\">Icon</span>\n                                                <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"mt-4\">\n                                {\n                                    props.loading ?\n                                        <Loader/> :\n                                        glossary !== null ?\n                                            <GlossaryList glossarys={search !== '' ? glossaryFilter : glossary}/> :\n\n                                            (props.error !== null) &&\n                                            <div className=\"alert alert-danger\" role=\"alert\">\n                                            <span className=\"alert-icon\">\n                                                <span className=\"sr-only\">Info</span>\n                                            </span>\n                                                <p>{t(Utils.displayErrorRequest(props.error))}</p>\n                                            </div>\n                                }\n                            </div>\n                        </div>\n                        <aside className=\"col-12 col-lg-3\">\n                            <PostWidget categories={FakeData.post_widget_data}/>\n                            <AboutOpenRHWidget/>\n                            <ArchiveWidget/>\n                        </aside>\n                    </div>\n                </section>\n            </div>\n        </>\n    )\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getAllGlossaryReducer.loading,\n    result: state.getAllGlossaryReducer.result,\n    error: state.getAllGlossaryReducer.error,\n\n    loadingPostGlossary: state.postGlossaryReducer.loading,\n    resultPostGlossary: state.postGlossaryReducer.result,\n    errorPostGlossary: state.postGlossaryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    getAllGlossaryAction,\n    getAllGlossaryReset,\n\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n\n    postGlossaryAction,\n    postGlossaryReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Glossary));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\FaqLayout\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\TestimonialLayout\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\JobOffer\\JobOfferDetail\\index.js",["770","771","772","773","774","775","776"],"import React, {useEffect, useState, useCallback} from 'react';\nimport {withRouter, useParams} from 'react-router-dom';\nimport NavigationLight from \"../../../components/NavigationLight\";\nimport {FakeData} from \"../../../fakeData\";\nimport {useTranslation} from \"react-i18next\";\nimport PostWidget from \"../../../components/PostWidget\";\nimport Comments from \"../../../components/Comments\";\nimport CommentField from \"../../../components/CommentField\";\nimport AboutOpenRHWidget from \"../../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../../components/ArchiveWidget\";\nimport {getPostByIdAction, getPostByIdReset} from \"../../../redux/api/PostsApi\";\nimport {bindActionCreators} from 'redux';\nimport {connect} from \"react-redux\";\nimport _ from 'lodash';\nimport Interweave from \"interweave\";\nimport \"./style.css\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport Loader from \"../../../components/Loader\";\nimport {Helmet} from \"react-helmet\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faEye} from '@fortawesome/free-solid-svg-icons';\nimport {faGraduationCap} from '@fortawesome/free-solid-svg-icons';\nimport {faFileContract} from '@fortawesome/free-solid-svg-icons';\nimport {faUsers} from '@fortawesome/free-solid-svg-icons';\nimport {faSitemap} from '@fortawesome/free-solid-svg-icons';\nimport {faCalendarTimes} from '@fortawesome/free-solid-svg-icons';\nimport {Config} from \"../../../config/ServerConfig\";\n\nlet route = require('../../../utils/route');\n\nfunction JobOfferDetail(props) {\n    moment.locale(\"fr\");\n    const {t} = useTranslation();\n    let {id, page, domaine} = useParams();\n    const [post, setPost] = useState({});\n    const [, updateState] = useState();\n    const forceUpdate = useCallback(() => updateState({}), []);\n    const renderPost = (post) => (\n        <>\n            <h2 id=\"newsLeaderTitle\">{post.rhContentTitle}</h2>\n            <img className=\"img-fluid\"\n                 src={!_.isNil(post.rhContentPrincipalLink) ? (Config.imageFolder + post.rhContentPrincipalLink) : \"https://picsum.photos/800/400\"}/>\n\n            <div className=\"mt-3\">\n                <div className=\"d-flex flex-row\">\n                    <div className=\"mb-1 text-muted mr-2\">\n                        <span className=\"icon icon-calendar-day mr-1\" aria-hidden=\"true\"></span>\n                        {moment(post.rhContentDateCeated).format(\"lll\")}\n                    </div>\n\n                    <div className=\"mb-1 text-muted mr-2\">\n                        <FontAwesomeIcon icon={faEye} className=\"mr-1\"/>\n                        2 vues\n                    </div>\n                </div>\n                <hr/>\n\n                <div className=\"d-flex flex-row justify-content-between\">\n\n                    <div className=\"d-flex col-4 flex-column elt-border-left\">\n\n                        <div className=\"d-flex flex-column w-100\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faGraduationCap} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_post')}</span>\n                            </div>\n                            <span className=\"text-muted\">{post.rhContentJobPost}</span>\n                        </div>\n\n                        <div className=\"d-flex flex-column w-100 mt-3\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faFileContract} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_contract_type')}</span>\n                            </div>\n                            <span className=\"text-muted\">{post.rhContentJobContractType}</span>\n                        </div>\n\n                    </div>\n\n                    <div className=\"d-flex col-4 flex-column elt-border-left\">\n\n                        <div className=\"d-flex flex-column w-100\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faUsers} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_count')}</span>\n                            </div>\n                            <span className=\"text-muted\">{post.rhContentJobPostNumber}</span>\n                        </div>\n\n                        <div className=\"d-flex flex-column w-100 mt-3\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faSitemap} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_direction')}</span>\n                            </div>\n                            <span className=\"text-muted\">{post.rhContentJobDirection}</span>\n                        </div>\n\n                    </div>\n\n                    <div className=\"d-flex col-4 flex-column elt-border-left\">\n\n                        <div className=\"d-flex flex-column w-100\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faCalendarTimes} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_date_echeance')}</span>\n                            </div>\n                            <span className=\"text-muted\">\n                                {moment(post.rhContentJobDeadLineReceiveCandidate).format(\"lll\")}\n                            </span>\n                        </div>\n\n                    </div>\n\n                </div>\n\n                <div className=\"mt-4\">\n                    <Interweave content={post.rhContentDescription}/>\n                </div>\n            </div>\n\n        </>\n    );\n    useEffect(() => {\n        props.getPostByIdAction(id);\n\n        /*        if (props.location.post === undefined)\n                    props.getPostByIdAction(id);\n                else\n                    setPost(props.location.post);*/\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            setPost(props.result);\n        }\n    }, [props]);\n\n    console.log(\"post\", post);\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${post.rhContentTitle}`}</title>\n            </Helmet>\n            <div className=\"my-5\">\n                <NavigationLight menus={FakeData.posts_menu} menuLink={route.post.root}/>\n\n                <section className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-lg-8\" id=\"post\">\n                            {\n                                props.location.post === undefined ?\n                                    props.loading ?\n                                        <Loader/>\n                                        : props.result !== null ?\n                                        renderPost(post) :\n                                        null :\n                                    renderPost(post)\n                            }\n\n                            {/*                            <div id=\"comments\">\n                                <h3 className=\"h2 mt-5\">{t('comment.commentaires')}</h3>\n                                {\n                                    !_.isNil(post) &&\n                                    (post.comments !== null && post.comments !== undefined) ?\n                                        <Comments comments={post.comments}/> :\n                                        <p className=\"lead\">{t('comment.no_comment')}</p>\n                                }\n                                <CommentField postID={props.match.params.id}/>\n                            </div>*/}\n\n                        </div>\n\n                        <aside className=\"col-12 col-lg-3\">\n                            <PostWidget categories={FakeData.post_widget_data}/>\n                            <AboutOpenRHWidget/>\n                            <ArchiveWidget/>\n                        </aside>\n                    </div>\n                </section>\n            </div>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.getPostByIdReducer.loading,\n    result: state.getPostByIdReducer.result,\n    error: state.getPostByIdReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getPostByIdAction,\n    getPostByIdReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(JobOfferDetail));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\PostLayout\\index.js",["777","778"],"import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport NewPost from \"../../screens/Admin/Posts/NewPost/NewPost\";\nimport PostDetail from \"../../screens/Posts/PostDetail\";\nimport Posts from \"../../screens/Posts/index\";\n\nlet route = require('../../utils/route');\n\n\nexport default function PostLayout(props) {\n\n    console.log(\"PostLayout call\");\n    return (\n        <>\n            <Switch>\n                <Route path={route.post.post_domain} component={Posts}/>\n                <Route path={route.post.post_category} component={Posts}/>\n            </Switch>\n        </>\n    )\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\HeaderUser\\index.js",["779","780","781","782","783","784","785","786","787"],"import React, {useEffect} from 'react';\nimport {Images} from \"../../config/Images\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, withRouter} from \"react-router-dom\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport LanguageSwitcher from \"../LanguageSwitcher\";\nimport ProfileDropdown from \"../ProfileDropdown\";\nimport NotificationDropdown from \"../NotificationDropdown\";\nimport * as Utils from \"../../utils\";\nimport './style.css'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faComment,\n    faFileAlt,\n    faFileSignature,\n    faNewspaper,\n    faQuestionCircle, faSpellCheck,\n    faTachometerAlt,\n    faThLarge\n} from \"@fortawesome/free-solid-svg-icons\";\nimport $ from \"jquery\";\n\nlet route = require('../../utils/route');\n\nfunction HeaderUser(props) {\n    console.log(\"URL\", props.location);\n    const {result} = props;\n    const {t} = useTranslation();\n    const {pathname} = props.location;\n    const matchWorkaround = (pathname) => (isMatch, location) => isMatch || location.pathname.includes(pathname);\n    const matchWorkForHome = (match, location) => {\n        return route.menu_header_admin.map((menu, index) => {\n            if (location.pathname.includes(menu.link))\n                return true;\n            else\n                return false;\n        });\n    };\n\n    useEffect(() => {\n        /*        window.$(\".dropdown-toggle\").initDropdownToggleHover();\n                window.$(\".dropdown-toggle\").initDropdownToggleHover();*/\n    });\n\n    const matchWorkForDashboard = (match, location) => {\n        return location.pathname.includes(route.admin_space[0].link);\n    };\n\n    const renderIcon = (icon) => {\n        switch (icon) {\n            case 'tachometer-alt':\n                return faTachometerAlt;\n            case 'file-signature':\n                return faFileSignature;\n            case 'file-alt':\n                return faFileAlt;\n            case 'newspaper':\n                return faNewspaper;\n            case 'comment':\n                return faComment;\n            case 'question-circle':\n                return faQuestionCircle;\n            case 'spell-check':\n                return faSpellCheck;\n            case 'th-large':\n                return faThLarge;\n            default:\n                return faTachometerAlt;\n        }\n    }\n\n    const NavAdmin = () => (\n        <>\n            <nav className=\"navbar navbar-dark navbar-expand-md\" role=\"navigation\">\n                <div className=\"container-fluid flex-sm-wrap justify-content-start\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <img src={Images.logo} className=\"d-inline-block align-bottom mr-3\"\n                             loading=\"lazy\"\n                             alt=\"Back to homepage\" title=\"Back to homepage\" width=\"50\" height=\"50\" loading=\"lazy\"/>\n                        {/* <span className=\"h1 mb-0\">{Images.openRH1}</span> */}\n                        <img src={Images.openRH1} className=\"w-100px d-inline-block align-bottom mr-1\"\n                            loading=\"lazy\"\n                            alt={t(\"app.name\")} title={t(\"app.name\")} loading=\"lazy\"/>\n                        \n                    </a>\n                    <button className=\"navbar-toggler d-sm-block d-md-none mb-md-0 mt-md-auto ml-auto ml-md-3 collapsed\"\n                            type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsing-navbar11\"\n                            aria-controls=\"collapsing-navbar11\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span aria-hidden=\"true\" className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <ul className=\"navbar-nav d-none d-md-flex ml-auto\">\n                        <li className=\"nav-item\">\n                            <a href=\"#\" className=\"nav-link nav-icon svg-search\">\n                                <span className=\"sr-only\">Search bar</span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n            <div className=\"navbar navbar-dark navbar-expand-md bg-dark flex-sm-wrap p-0\">\n                <hr className=\"w-100 m-0 d-none d-md-block border-700\"/>\n                <div className=\"container-fluid border-bottom\">\n                    <div className=\"navbar-collapse collapse\" id=\"collapsing-navbar11\">\n                        <ul className=\"navbar-nav\">\n                            {\n                                Utils.isConnected() ?\n                                    route.user_space.map((menu, index) => (\n                                        menu.hasOwnProperty('sub_menu') ?\n                                            <li className=\"nav-item dropdown\" key={`menu-${index}`}>\n                                                <a href=\"#\"\n                                                   className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\"\n                                                   role=\"button\" id=\"dropdownMenu\">\n                                                    <FontAwesomeIcon icon={renderIcon(menu.icon)}\n                                                                     className=\"feather mr-1\"/>\n                                                    {t(menu.title)}\n                                                </a>\n                                                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu\">\n                                                    {\n                                                        menu.sub_menu.map((menuItem) => (\n                                                            <NavLink to={menuItem.link} className=\"dropdown-item\"\n                                                                     aria-expanded\n                                                                     isActive={matchWorkaround(menuItem.link)}\n                                                                     activeClassName=\"\"\n                                                                     activeStyle={{\n                                                                         color: 'var(--orange)'\n                                                                     }}\n                                                                     exact>\n                                                                {t(menuItem.title)}\n                                                            </NavLink>\n                                                        ))\n                                                    }\n                                                </div>\n                                            </li>\n                                            :\n                                            <li className=\"nav-item\" key={index}>\n                                                <NavLink\n                                                    to={{\n                                                        pathname: menu.link\n                                                    }}\n                                                    className=\"nav-link\"\n                                                    /*isActive={matchWorkaround(menu.link)}*/\n                                                    activeClassName=\"\"\n                                                    activeStyle={{\n                                                        color: 'var(--orange)'\n                                                    }}\n                                                    exact>\n                                                    <FontAwesomeIcon icon={renderIcon(menu.icon)}\n                                                                     className=\"feather mr-1\"/>\n                                                    {t(menu.title)}\n                                                </NavLink>\n                                            </li>\n                                    ))\n                                    : null\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n\n    return (\n        <header role=\"banner fixed-top\" id=\"admin-navbar\">\n            <nav role=\"navigation\" className=\"navbar navbar-light bg-white navbar-expand-md supra\"\n                 aria-label=\"Complementary navigation\">\n                <div className=\"container-fluid\">\n                    <ul className=\"navbar-nav\">\n                        {\n                            (result !== null || Utils.isConnected()) &&\n                            Utils.isAdmin() ?\n                                route.admin_url.map((menu, index) => (\n                                    <li className=\"nav-item\" key={index}>\n                                        <NavLink to={menu.link} className=\"nav-link\"\n                                                 isActive={index === 0 ? false : matchWorkForDashboard}\n                                                 activeStyle={{\n                                                    color: 'var(--orange)'\n                                                }}\n                                                 exact>\n                                            {t(menu.title)}\n                                        </NavLink>\n                                    </li>\n                                )) :\n                                route.user_admin_url.map((menu, index) => (\n                                    <li className=\"nav-item\" key={index}>\n                                        <NavLink to={menu.link} className=\"nav-link\"\n                                                 isActive={index === 0 ? false : matchWorkForDashboard}\n                                                 activeStyle={{\n                                                    color: 'var(--orange)'\n                                                }}\n                                                 exact>\n                                            {t(menu.title)}\n                                        </NavLink>\n                                    </li>\n                                ))\n                        }\n                    </ul>\n                    <ul className=\"navbar-nav ml-auto\">\n                        <NotificationDropdown/>\n                        <ProfileDropdown/>\n                        <LanguageSwitcher/>\n                    </ul>\n                </div>\n            </nav>\n            <NavAdmin/>\n\n        </header>\n    )\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result,\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nexport default withRouter(connect(mapstateToProps, mapDispatchToProps)(HeaderUser));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Testimonial\\index.js",["788","789","790","791","792","793","794","795","796","797","798"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport {Input} from \"../../../components/Input\";\nimport {TextArea} from \"../../../components/TextArea/TextArea\";\nimport {useForm} from \"react-hook-form\";\nimport {bindActionCreators} from 'redux';\nimport {Constant} from \"../../../config/Constant\";\nimport * as moment from \"moment\";\nimport {\n    getAllPostsAction,\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n    getAllPostsReset\n} from \"../../../redux/api/PostsApi\";\nimport {connect} from \"react-redux\";\nimport {postFaqAction, postFaqReset} from \"../../../redux/api/FaqApi\";\nimport {postTestimonialAction, postTestimonialReset} from \"../../../redux/api/TestimonialApi\";\nimport * as Utils from \"../../../utils\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\n\nlet route = require('../../../utils/route');\n\nfunction AdminTestimonial(props) {\n    const {t} = useTranslation();\n    let {id, page, domaine} = useParams();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n\n    const [currentPath, setCurrentPath] = useState(props.location.pathname);\n    const [thematique, setThematique] = useState(1);\n    const [answer, setAnswer] = useState('');\n    const [question, setQuestion] = useState('');\n    const [search, setSearch] = useState('');\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllPostsReset();\n        props.getAllPostsAction(Constant.testimonialID);\n    }, []);\n\n    const onSubmitFaq = () => {\n        props.postFaqAction({\n            rhContentTitle: question,\n            rhContentDescription: \"\",\n            rhContentCategoryId: Constant.faqID,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentDatePublish: moment(new Date()).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId\n        });\n    };\n\n    const handleSearch = () => {\n        console.log(search);\n    };\n\n    const renderTestimonialTable = (data) => (\n        <table className=\"table table-striped table-responsive-lg table-hover has-icon col-12\">\n\n            <thead>\n            <tr>\n                <th className=\"text-center\">{t('common.status')}</th>\n                <th className=\"text-center\">{t('add_post.publication_date')}</th>\n                <th className=\"text-center\">{t('common.author')}</th>\n                <th className=\"text-center\">{t('common.domain')}</th>\n                <th className=\"text-center\">{t('testimonial.title')}</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                data.map((post, index) => (\n                    <tr key={index} className=\"faq-item\" onClick={() => {\n                    }}>\n                        <td className=\"text-center\">\n                            {\n                                post.rhContentIsOK ?\n                                    <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                                    <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n                            }\n                        </td>\n                        <th className=\"text-center\">{moment(post.rhContentDateCeated).format(\"lll\")}</th>\n                        <th className=\"text-center\">{post.user.userName}</th>\n                        <th className=\"text-center\">{post.rhContentDomaine.rhContentDomaineName}</th>\n                        <th className=\"text-center\">{Utils.cutString(post.rhContentDescription, 100)}</th>\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    );\n\n    const renderModalAddFaq = () => (\n        <div className=\"modal fade\" id=\"addFaqModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addFaqModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addFaqModalLabel\">{t('faq.new_faq')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitFaq)}>\n\n                                    <div className=\"col-12\">\n                                        <label htmlFor=\"postThematique\"\n                                               className=\"is-required\">{t('common.thematique')}</label>\n                                        {\n                                            props.loadingGetDomaine ?\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\" disabled>\n                                                </select> :\n                                                props.resultGetDomaine !== null &&\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\"\n                                                        onChange={event => setThematique(event.target.value)}>\n                                                    {\n                                                        props.resultGetDomaine.map((domaine, index) => (\n                                                            <option value={domaine.rhContentDomaineId}\n                                                                    key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                        ))\n                                                    }\n                                                </select>\n                                        }\n\n                                    </div>\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"question\"\n                                               required\n                                               ref={register({required: true, maxLength: 255})}\n                                               id=\"question\"\n                                               value={question}\n                                               onChange={(e) => setQuestion(e.target.value)}\n                                               error={errors.hasOwnProperty(\"question\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('faq.question')}\n                                               maxLength=\"255\"\n                                        />\n\n                                    </div>\n\n                                    <div className=\"col-12\">\n                                        <TextArea wrapperClass=\"form-group\"\n                                                  inputClass=\"form-control\"\n                                                  name=\"answer\"\n                                                  required\n                                                  style={{height: \"106px\"}}\n                                                  ref={register({required: true})}\n                                                  id=\"answer\"\n                                                  value={answer}\n                                                  onChange={(e) => setAnswer(e.target.value)}\n                                                  error={errors.hasOwnProperty(\"answer\")}\n                                                  errorText={t('error.required_field')}\n                                                  labelText={t('faq.answer')}\n                                        />\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingPostFaq ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                        <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                              aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitFaq)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('testimonial.title')}`}</title>\n                </Helmet>\n                <h1>{t(\"testimonial.title\")}</h1>\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n                        {renderModalAddFaq()}\n                        <div className=\"row mb-3\">\n\n{/*                            <div className=\"col-auto mr-auto\">\n                                <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                        data-target=\"#addFaqModal\">\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('faq.new_faq')}\n                                </button>\n                            </div>*/}\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\"\n                                           placeholder={t('testimonial.find_testimonial')}\n                                           aria-label={t('testimonial.find_testimonial')}\n                                           aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <div className=\"media-body\">\n                                {props.result !== null && renderTestimonialTable(props.result)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsReducer.loading,\n    result: state.getAllPostsReducer.result,\n    error: state.getAllPostsReducer.error,\n\n    loadingPostGlossary: state.postGlossaryReducer.loading,\n    resultPostGlossary: state.postGlossaryReducer.result,\n    errorPostGlossary: state.postGlossaryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n\n    getAllDomaineAction,\n    postTestimonialAction,\n    postTestimonialReset,\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminTestimonial));\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Glossary\\index.js",["799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport {Input} from \"../../../components/Input\";\nimport {TextArea} from \"../../../components/TextArea/TextArea\";\nimport {useForm} from \"react-hook-form\";\nimport {bindActionCreators} from 'redux';\nimport {Constant} from \"../../../config/Constant\";\nimport * as moment from \"moment\";\nimport {\n    getAllPostsAction,\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n    getAllPostsReset\n} from \"../../../redux/api/PostsApi\";\nimport {postGlossaryAction, postGlossaryReset} from \"../../../redux/api/GlossaryApi\";\nimport {connect} from \"react-redux\";\nimport * as Utils from \"../../../utils\";\nimport {toast} from \"react-toastify\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport {Config} from \"../../../config/ServerConfig\";\nimport Interweave from \"interweave\";\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\n\nlet route = require('../../../utils/route');\n\nfunction AdminGlossary(props) {\n    const {t} = useTranslation();\n    let {id, page, domaine} = useParams();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n\n    const [currentPath, setCurrentPath] = useState(props.location.pathname);\n    const [thematique, setThematique] = useState(1);\n    const [title, setTitle] = useState('');\n    const [keyword, setKeyword] = useState('');\n    const [glossary, setGlossary] = useState(null);\n    const [keywordDescription, setKeywordDescription] = useState('');\n    const [description, setDescription] = useState('');\n    const [search, setSearch] = useState('');\n\n    const onSubmitGlossaire = () => {\n        props.postGlossaryAction({\n            rhContentTitle: keyword,\n            rhContentDescription: keywordDescription,\n            rhContentCategoryId: Constant.glossaireID,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentDatePublish: moment(new Date()).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId\n        });\n    };\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllPostsReset();\n        props.getAllPostsAction(Constant.glossaireID);\n    }, []);\n\n    useEffect(() => {\n        if (props.resultPostGlossary !== null) {\n            toast.dark(t('glossary.success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.go(0);\n            props.postGlossaryReset();\n        }\n        if (props.errorPostGlossary !== null) {\n            toast.error(props.errorPostGlossary, {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.postGlossaryReset();\n        }\n    }, [props]);\n\n    const handleSearch = () => {\n        console.log(search);\n    };\n\n    const renderModalAddGlossary = () => (\n        <div className=\"modal fade\" id=\"addGlossaryModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addGlossaryModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addGlossaryModalLabel\">{t('glossary.add_new')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitGlossaire)}>\n\n                                    <div className=\"col-12\">\n                                        <label htmlFor=\"postThematique\"\n                                               className=\"is-required\">{t('common.thematique')}</label>\n                                        {\n                                            props.loadingGetDomaine ?\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\" disabled>\n                                                </select> :\n                                                props.resultGetDomaine !== null &&\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\"\n                                                        onChange={event => setThematique(event.target.value)}>\n                                                    {\n                                                        props.resultGetDomaine.map((domaine, index) => (\n                                                            <option value={domaine.rhContentDomaineId}\n                                                                    key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                        ))\n                                                    }\n                                                </select>\n                                        }\n\n                                    </div>\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"keyword\"\n                                               required\n                                               ref={register({required: true, maxLength: 255})}\n                                               id=\"keyword\"\n                                               value={keyword}\n                                               onChange={(e) => setKeyword(e.target.value)}\n                                               error={errors.hasOwnProperty(\"keyword\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('glossary.keyword')}\n                                               maxLength=\"255\"\n                                        />\n\n                                    </div>\n\n                                    <div className=\"col-12\">\n\n                                        <TextArea wrapperClass=\"form-group\"\n                                                  inputClass=\"form-control\"\n                                                  name=\"keyword_description\"\n                                                  required\n                                                  style={{height: \"106px\"}}\n                                                  ref={register({required: true, maxLength: 255})}\n                                                  id=\"keyword_description\"\n                                                  value={keywordDescription}\n                                                  onChange={(e) => setKeywordDescription(e.target.value)}\n                                                  error={errors.hasOwnProperty(\"keyword_description\")}\n                                                  errorText={t('error.required_field')}\n                                                  labelText={t('glossary.keyword_description')}\n                                        />\n\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingPostGlossary ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitGlossaire)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    const renderGlossaryTable = (data) => (\n        <table className=\"table table-striped table-responsive-lg table-hover has-icon col-12\">\n\n            <thead>\n            <tr>\n                <th className=\"text-center\">{t('common.status')}</th>\n                <th className=\"text-center\">{t('add_post.publication_date')}</th>\n                <th className=\"text-center\">{t('common.author')}</th>\n                <th className=\"text-center\">{t('common.domain')}</th>\n                <th className=\"text-center\">{t('glossary.keyword')}</th>\n                <th className=\"text-center\">{t('glossary.keyword_description')}</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                data.map((post, index) => (\n                    <tr key={index} className=\"faq-item\" onClick={() => {\n                    }}>\n                        <td className=\"text-center\">\n                            {\n                                post.rhContentIsOK ?\n                                    <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                                    <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n                            }\n                        </td>\n                        <th className=\"text-center\">{moment(post.rhContentDateCeated).format(\"lll\")}</th>\n                        <th className=\"text-center\">{post.user.userName}</th>\n                        <th className=\"text-center\">{post.rhContentDomaine.rhContentDomaineName}</th>\n                        <th className=\"text-center\">{post.rhContentTitle}</th>\n                        <th className=\"text-center\">{post.rhContentDescription}</th>\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('glossary.title')}`}</title>\n                </Helmet>\n                <h1>{t(\"navigation.glossaire\")}</h1>\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n                        {renderModalAddGlossary()}\n                        <div className=\"row mb-3\">\n                            <div className=\"col-auto mr-auto\">\n                                <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                        data-target=\"#addGlossaryModal\">\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('glossary.add_new')}\n                                </button>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('posts.find_post')}\n                                           aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <div className=\"media-body\">\n                                {props.result !== null && renderGlossaryTable(props.result)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsReducer.loading,\n    result: state.getAllPostsReducer.result,\n    error: state.getAllPostsReducer.error,\n\n    loadingPostGlossary: state.postGlossaryReducer.loading,\n    resultPostGlossary: state.postGlossaryReducer.result,\n    errorPostGlossary: state.postGlossaryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    getAllDomaineAction,\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n\n    postGlossaryAction,\n    postGlossaryReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminGlossary));\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Sidebar\\index.js",["816","817","818","819","820"],"import React from 'react';\nimport './style.scss';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {NavLink} from \"react-router-dom\";\nimport {useTranslation} from \"react-i18next\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faComment,\n    faFileSignature,\n    faNewspaper,\n    faQuestionCircle,\n    faSpellCheck,\n    faTachometerAlt,\n    faFileAlt\n} from \"@fortawesome/free-solid-svg-icons\";\nimport _ from 'lodash';\nimport {Constant} from \"../../config/Constant\";\nimport * as Utils from \"../../utils\"\n\nlet route = require('../../utils/route');\n\nfunction Sidebar(props) {\n\n    const {result} = props;\n    const {t} = useTranslation();\n    const matchWorkaround = (pathname) => (isMatch, location) => {\n        let currentPathName = _.split(location.pathname, \"/\", 3)[2];\n        let currentPathNameInArray = _.split(pathname, \"/\", 3)[2];\n        return isMatch || location.pathname.includes(pathname)\n    };\n\n    const renderIcon = (icon) => {\n        switch (icon) {\n            case 'tachometer-alt':\n                return faTachometerAlt;\n            case 'file-signature':\n                return faFileSignature;\n            case 'file-alt':\n                return faFileAlt;\n            case 'newspaper':\n                return faNewspaper;\n            case 'comment':\n                return faComment;\n            case 'question-circle':\n                return faQuestionCircle;\n            case 'spell-check':\n                return faSpellCheck;\n            default:\n                return faTachometerAlt;\n        }\n    }\n    return (\n        <>\n            <nav id=\"sidebarMenu\" role=\"navigation\" className=\"col-2 d-md-block bg-light sidebar collapse\">\n                <div className=\"sidebar-sticky pt-3\">\n                    <ul className=\"nav flex-column\">\n                        {\n                            Utils.isConnected() ?\n                                route.admin_space.map((menu, index) => (\n                                    <li className=\"nav-item\" key={index}>\n                                        <hr className=\"sidebar-divider my-0\"/>\n                                        <NavLink\n                                            to={{\n                                                pathname: menu.link\n                                            }}\n                                            className=\"nav-link\"\n                                            /*isActive={matchWorkaround(menu.link)}*/\n                                            activeClassName=\"\"\n                                            activeStyle={{\n                                                color: 'var(--orange)'\n                                            }}\n                                            exact>\n                                            <FontAwesomeIcon icon={renderIcon(menu.icon)} className=\"feather\"/>\n                                            {t(menu.title)}\n                                        </NavLink>\n                                        <hr className=\"sidebar-divider my-0\"/>\n                                    </li>\n                                ))\n                                : null\n                        }\n                    </ul>\n                </div>\n            </nav>\n        </>\n    )\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nexport default connect(mapstateToProps, mapDispatchToProps)(Sidebar);\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Posts\\PostDetail\\index.js",["821","822","823","824","825","826","827"],"import React, {useEffect, useState, useCallback} from 'react';\nimport {withRouter, useParams} from 'react-router-dom';\nimport NavigationLight from \"../../../components/NavigationLight\";\nimport {FakeData} from \"../../../fakeData\";\nimport {useTranslation} from \"react-i18next\";\nimport PostWidget from \"../../../components/PostWidget\";\nimport Comments from \"../../../components/Comments\";\nimport CommentField from \"../../../components/CommentField\";\nimport AboutOpenRHWidget from \"../../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../../components/ArchiveWidget\";\nimport {getAllPostsByDomaineAction, getPostByIdAction, getPostByIdReset} from \"../../../redux/api/PostsApi\";\nimport {bindActionCreators} from 'redux';\nimport {connect} from \"react-redux\";\nimport _ from 'lodash';\nimport Interweave from \"interweave\";\nimport \"./style.css\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport {FileIcon, defaultStyles} from 'react-file-icon';\nimport Loader from \"../../../components/Loader\";\nimport {Helmet} from \"react-helmet\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faEye} from '@fortawesome/free-solid-svg-icons';\nimport {Config} from \"../../../config/ServerConfig\";\nimport * as Utils from \"../../../utils\";\nimport ReactPlayer from \"react-player\";\nimport SecondaryNavigation from \"../../../components/SecondaryNavigation\";\nimport SocialShare from \"../../../components/SocialShare\";\nimport {Constant} from \"../../../config/Constant\";\n\nlet route = require('../../../utils/route');\n\nfunction PostDetail(props) {\n    moment.locale(\"fr\");\n    const {t} = useTranslation();\n    let {id, page, category, domaine} = useParams();\n    const [post, setPost] = useState({});\n    const [, updateState] = useState();\n    const forceUpdate = useCallback(() => updateState({}), []);\n    useEffect(() => {\n        window.$(\".img-post\").initImageNotLoadPlaceHolder();\n    });\n    const renderPost = (post) => (\n        <>\n            <h2 id=\"newsLeaderTitle\">{post.rhContentTitle}</h2>\n            {\n                !_.isNil(post.rhContentPrincipalLink) ?\n                    Utils.isImageFileUrl(Config.imageFolder + post.rhContentPrincipalLink) ?\n                        <img className=\"img-fluid img-responsive img-post\"\n                             loading=\"lazy\"\n                             src={Config.imageFolder + post.rhContentPrincipalLink}/>\n                        :\n                        <ReactPlayer\n                            controls={true}\n                            width={800}\n                            height={400}\n                            url={Config.imageFolder + post.rhContentPrincipalLink}\n                        />\n                    :\n                    <img className=\"img-fluid img-reponsive img-post\" src=\"https://picsum.photos/800/400\" loading=\"lazy\"\n                    />\n            }\n            <div className=\"mt-3\">\n                <div className=\"d-flex justify-content-between\">\n                    <div className=\"mb-1 text-muted mr-2 pt-2\">\n                        <span className=\"icon icon-calendar-day mr-1\" aria-hidden=\"true\"></span>\n                        {moment(post.rhContentDateCreated).format(\"lll\")}\n                    </div>\n\n                    <div className=\"mb-1 text-muted mr-2 pt-2\">\n                        <FontAwesomeIcon icon={faEye} className=\"mr-1\"/>\n                        2 vues\n                    </div>\n\n                    <div>\n                        <SocialShare/>\n                    </div>\n                </div>\n                <hr/>\n                <div className=\"mt-4\">\n                    <Interweave content={post.rhContentDescription}/>\n                </div>\n\n                <div className=\"mt-3\">\n                    <h3>{t('common.piece_jointe')}</h3>\n                    <hr/>\n                    <div className=\"row\" id=\"piece-jointe\">\n\n                        {\n                            [{file: \"file1.pdf\"}, {file: \"file2.xls\"}, {file: \"file3.docx\"}].map((item, index) => (\n                                <div className=\"col-1 d-flex justify-content-center\">\n                                    <div className=\"d-flex flex-column\">\n                                        <FileIcon\n                                            extension={Utils.getFileExtension(item.file)} {...defaultStyles[Utils.getFileExtension(item.file)]}\n                                            style={{width: \"80px\"}}/>\n                                        <p style={{textAlign: \"center\"}} className=\"mt-1\"><u>{item.file}</u></p>\n                                    </div>\n                                </div>\n                            ))\n                        }\n                    </div>\n                </div>\n\n            </div>\n\n        </>\n    );\n\n\n    useEffect(() => {\n        props.getPostByIdAction(id);\n        props.getAllPostsByDomaineAction(Constant.publicationID, domaine);\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            setPost(props.result);\n            console.log(props.result);\n        }\n    }, [props]);\n\n    console.log(\"post\", post);\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${post.rhContentTitle}`}</title>\n            </Helmet>\n            <div className=\"post-header pt-5 bg-white\">\n                <div className=\"container\">\n                    <h1>{t(\"posts.title\")}</h1>\n                </div>\n                <NavigationLight menuLink={`${route.post.root}/${category}`} additionnalClasses\n                                 categoryId={category}/>\n                <SecondaryNavigation data={props.resultPosts} menuLink={route.post.root}/>\n            </div>\n            <section className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-lg-8\" id=\"post\">\n                        {\n                            props.location.post === undefined ?\n                                props.loading ?\n                                    <Loader/>\n                                    : props.result !== null ?\n                                    renderPost(post) :\n                                    null :\n                                renderPost(post)\n                        }\n\n                        {/*                            <div id=\"comments\">\n                                <h3 className=\"h2 mt-5\">{t('comment.commentaires')}</h3>\n                                {\n                                    !_.isNil(post) &&\n                                    (post.comments !== null && post.comments !== undefined) ?\n                                        <Comments comments={post.comments}/> :\n                                        <p className=\"lead\">{t('comment.no_comment')}</p>\n                                }\n                                <CommentField postID={props.match.params.id}/>\n                            </div>*/}\n\n                    </div>\n\n                    <aside className=\"col-12 col-lg-3\">\n                        <PostWidget categories={FakeData.post_widget_data}/>\n                        <AboutOpenRHWidget/>\n                        <ArchiveWidget/>\n                    </aside>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loadingPosts: state.getAllDomainesReducer.loading,\n    resultPosts: state.getAllDomainesReducer.result,\n    errorPosts: state.getAllDomainesReducer.error,\n\n    loading: state.getPostByIdReducer.loading,\n    result: state.getPostByIdReducer.result,\n    error: state.getPostByIdReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getPostByIdAction,\n    getPostByIdReset,\n\n    getAllPostsByDomaineAction\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PostDetail));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\AuthType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\NewBlog\\index.js",["828","829","830","831","832","833","834","835"],"import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {useForm} from \"react-hook-form\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {useHistory} from \"react-router-dom\";\nimport {Input} from \"../../../../components/Input\";\nimport {getAllDomaineAction} from \"../../../../redux/api/DomaineApi\";\nimport {useDropzone} from 'react-dropzone';\nimport * as Utils from '../../../../utils';\nimport {Constant} from \"../../../../config/Constant\";\nimport {toast} from 'react-toastify';\nimport * as moment from 'moment';\nimport {Helmet} from \"react-helmet\";\nimport {postBlogAction, postBlogReset} from \"../../../../redux/api/BlogApi\";\nimport {uploadImageAction} from \"../../../../redux/api/ImageApi\";\nimport RichTextEditor from \"../../../../components/RichTextEditor\";\n\nlet route = require('../../../../utils/route');\n\nfunction NewBlog(props) {\n    const {t} = useTranslation();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n    const editor = useRef(null);\n    const [title, setTitle] = useState('');\n    const [date, setDate] = useState(null);\n    const [dateFin, setDateFin] = useState(null);\n    const [thematique, setThematique] = useState(1);\n    const [image, setImage] = useState(new FormData());\n    const [contenu, setContenu] = useState('');\n    const [featured, setFeatured] = useState(0);\n    const [isDataSubmit, setIsDataSubmit] = useState(false);\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const [files, setFiles] = useState([]);\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n        accept: \".jpeg,.png,.gif,.jpg,.svg\",\n        maxFiles: 1,\n        multiple: false,\n        onDrop: acceptedFiles => {\n            console.log(acceptedFiles);\n            acceptedFiles.map(file => {\n                let imageToSend = new FormData();\n                imageToSend.append(\"file\", file);\n                props.uploadImageAction(imageToSend);\n            });\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            })));\n        }\n    });\n\n    const style = useMemo(() => ({\n        ...Utils.baseStyle,\n        ...(isDragActive ? Utils.activeStyle : {}),\n        ...(isDragAccept ? Utils.acceptStyle : {}),\n        ...(isDragReject ? Utils.rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject,\n        isDragAccept\n    ]);\n\n    const Thumbs = files.map(file => (\n        <div style={Utils.thumbStyle} key={file.name}>\n            <div style={Utils.thumbInnerStyle}>\n                {\n                    props.loadingUpdloadPhoto &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                <img\n                    src={file.preview}\n                    loading=\"lazy\"\n                    style={Utils.imgStyle}\n                />\n            </div>\n        </div>\n    ));\n\n    useEffect(() => () => {\n        // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    const onSubmitPost = () => {\n        setIsDataSubmit(true);\n        props.postBlogAction({\n            rhContentTitle: title,\n            rhContentDescription: contenu,\n            rhContentPriorityLevel: featured,\n            rhContentCategoryId: Constant.blogID,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentPrincipalLink: props.resultUploadImage !== null ? props.resultUploadImage.imageName : \"\",\n            rhContentDatePublish: date !== null ? moment(date).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\"),\n            rhContentDateOnPublish: dateFin === null ? moment(moment().add(1, 'y')).format(\"YYYY-MM-DD\") : moment(dateFin).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId\n        });\n    }\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n    }, []);\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.result !== null) {\n            toast.dark(t('add_new_blog.success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.push(route.blog.root);\n            props.postBlogReset();\n        }\n        if (props.error !== null) {\n            toast.error(t(Utils.displayErrorRequest(props.error)), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.postBlogReset();\n        }\n\n        if (props.resultDomaine !== null) {\n            console.log(\"Domaine has lodaded\",props.resultDomaine.filter(domaine => domaine.rhContentCategoryId === Constant.blogID)[0].rhContentDomaineId);\n            setThematique(props.resultDomaine.filter(domaine => domaine.rhContentCategoryId === Constant.blogID)[0].rhContentDomaineId);\n        }\n    }, [props]);\n\n    console.log(\"Thematique\", parseInt(thematique));\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t(\"add_new_blog.title\")}`}</title>\n            </Helmet>\n            <div className=\"container-fluid\">\n                <h1>{t(\"add_new_blog.title\")}</h1>\n            </div>\n\n            <section className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitPost)}>\n                            <div className=\"col-12 col-lg-4\">\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"text\"\n                                       name=\"title\"\n                                       required\n                                       ref={register({required: true, maxLength: 255})}\n                                       id=\"title\"\n                                       value={title}\n                                       onChange={(e) => setTitle(e.target.value)}\n                                       error={errors.hasOwnProperty(\"title\")}\n                                       errorText={t('error.required_field')}\n                                       labelText={t('add_new_blog.blog_title')}\n                                       maxLength=\"255\"\n                                />\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"date\"\n                                       name=\"date\"\n                                       id=\"date\"\n                                       value={date}\n                                       onChange={(e) => {\n                                           setDate(e.target.value);\n                                           console.log(e.target.value);\n                                       }}\n                                       errorText={t('error.date_incorrect')}\n                                       labelText={t('add_post.publication_date')}\n                                       title={t('add_post.expected_format')}\n                                >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                </Input>\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"date\"\n                                       name=\"dateFin\"\n                                       id=\"dateFin\"\n                                       value={dateFin}\n                                       onChange={(e) => {\n                                           setDateFin(e.target.value);\n                                           console.log(e.target.value);\n                                       }}\n                                       error={isDataSubmit ? dateFin !== null : false}\n                                       errorText={t('error.date_incorrect')}\n                                       labelText={t('add_post.publication_end_date')}\n                                       title={t('add_post.expected_format')}\n                                >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                </Input>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"postThematique\"\n                                           className=\"is-required\">{t('common.thematique')}</label>\n                                    {\n                                        props.loadingDomaine ?\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\" disabled>\n                                            </select> :\n                                            props.resultDomaine !== null &&\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\"\n                                                    onChange={event => setThematique(event.target.value)}>\n                                                {\n                                                    props.resultDomaine.filter(domaine => domaine.rhContentCategoryId === Constant.blogID)\n                                                        .map((domaine, index) => (\n                                                            <option value={domaine.rhContentDomaineId}\n                                                                    key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                        ))\n                                                }\n                                            </select>\n                                    }\n\n                                </div>\n\n                                <div className=\"form-group mb-3\">\n                                    <label htmlFor=\"postThematique\"\n                                           className={`is-required ${(files.length === 0) && \"is-invalid\"}`}>{t('add_post.image')}</label>\n                                    <div {...getRootProps({style})}>\n                                        <input {...getInputProps()} />\n                                        {files.length === 0 && <p>{t('add_post.drad_drop_or_select')}</p>}\n                                        {Thumbs}\n                                    </div>\n\n                                    {files.length === 0 ?\n                                        isDataSubmit ?\n                                            <div className=\"invalid-feedback\">\n                                                {t('error.image_required')}\n                                            </div> : null : null}\n\n                                </div>\n\n                                <fieldset className=\"form-group\">\n                                    <div id=\"radio-action\" className=\"form-inline\">\n\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\"\n                                                   onChange={(e) => setFeatured(e.target.checked ? 1 : 0)}\n                                                   className=\"custom-control-input\" id=\"customSwitch1\"/>\n                                            <label className=\"custom-control-label\"\n                                                   htmlFor=\"customSwitch1\">{t('add_post.featured')}</label>\n                                        </div>\n                                    </div>\n                                </fieldset>\n\n                                <div className=\"submit mt-3\">\n\n                                    {\n                                        props.loading ?\n                                            <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                                <span className=\"sr-only\">{t('common.loading')}</span>\n                                            </button> :\n                                            <button className=\"btn btn-primary\"\n                                                    onSubmit={handleSubmit(onSubmitPost)}>{t('common.post')}</button>\n                                    }\n                                </div>\n                            </div>\n                            <div className=\"col-12 col-lg-8\">\n                                <div className=\"form-group required\">\n                                    <label htmlFor=\"PostContent\"\n                                           className=\"is-required\">{t('add_post.contenu')}</label>\n                                    <RichTextEditor ref={editor}\n                                                    value={contenu}\n                                                    onBlur={event => setContenu(event.target.innerHTML)} // preferred to use only this option to update the content for performance reasons\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.postBlogReducer.loading,\n    result: state.postBlogReducer.result,\n    error: state.postBlogReducer.error,\n\n    loadingDomaine: state.getAllDomainesReducer.loading,\n    resultDomaine: state.getAllDomainesReducer.result,\n    errorDomaine: state.getAllDomainesReducer.error,\n\n    loadingUploadImage: state.uploadImageReducer.loading,\n    resultUploadImage: state.uploadImageReducer.result,\n    errorUploadImage: state.uploadImageReducer.error,\n\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllDomaineAction,\n    uploadImageAction,\n\n    postBlogAction,\n    postBlogReset\n\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewBlog);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\FaqApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\TestimonialActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\DomaineActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\AuthActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\FaqActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\ValidatePublicationAction.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\GlossaryApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\SignInApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\ImageType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\ArchiveWidget\\index.js",["836","837","838","839","840","841","842","843"],"import React from 'react';\nimport {useTranslation} from \"react-i18next\";\n\nexport default function ArchiveWidget(props) {\n    const {t} = useTranslation();\n\n    return (\n        <div className=\"p-4\">\n            <h4 className=\"font-italic\">{t('archive_widget.title')}</h4>\n            <ol className=\"list-unstyled mb-0\">\n                <li><a href=\"#\">Novembre 2020</a></li>\n                <li><a href=\"#\">Octobre 2020</a></li>\n                <li><a href=\"#\">Septembre 2020</a></li>\n                <li><a href=\"#\">Août 2020</a></li>\n                <li><a href=\"#\">Juillet 2020</a></li>\n                <li><a href=\"#\">Juin 2020</a></li>\n                <li><a href=\"#\">Mai 2020</a></li>\n                <li><a href=\"#\">Avril 2020</a></li>\n            </ol>\n        </div>\n    )\n}","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PostWidget\\index.js",["844"],"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useTranslation} from \"react-i18next\";\n\nexport default function PostWidget(props) {\n\n    const {\n        style,\n        onClick,\n        children,\n        categories,\n        ...rest\n    } = props;\n\n    const {t} = useTranslation();\n\n    return (\n        <div {...rest}>\n            <ul className=\"nav nav-tabs\" role=\"tablist\">\n                {\n                    categories.map((categorie, index) => (\n                        <li className=\"nav-item\" key={`categories-${index}`}>\n                            <a className={`nav-link ${index === 0 && \"active\"}`}\n                               href={`#tab${index}`}\n                               data-toggle=\"tab\">{categorie.title}</a>\n                        </li>\n                    ))\n                }\n            </ul>\n            <div className=\"tab-content\">\n                {\n                    categories.map((categorie, i) => (\n                        <>\n                            {\n                                categorie.post.length === 0 ?\n                                    t('common.no_post') :\n                                    <div className={`tab-pane  ${i === 0 && \"active\"}`}\n                                         id={`#tab${i}`} key={`tab${i}`}>\n                                        <ol>\n                                            {\n                                                categorie.post.map((post, j) => (\n                                                    <li key={`post-${j}`}><a href={post.link}>{post.title}</a></li>\n                                                ))\n                                            }\n                                        </ol>\n                                        {\n                                            categories.length > 5 &&\n                                            <a className=\"o-link-arrow ml-4\" href=\"#\">{t('common.see_all')}</a>\n                                        }\n                                    </div>\n                            }\n                        </>\n                    ))\n                }\n            </div>\n        </div>\n    )\n}\n\nPostWidget.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n\n    onClick: PropTypes.func,\n    categories: PropTypes.array\n};\n\nPostWidget.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    categories: []\n};","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\GlossaryActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\ProfileDropdown\\index.js",["845","846","847","848","849","850","851","852"],"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useTranslation} from \"react-i18next\";\nimport moment from 'moment';\nimport 'moment/locale/en-gb';\nimport {useHistory} from \"react-router-dom\";\nimport 'moment/locale/fr';\nimport './style.css';\nimport {useDispatch} from \"react-redux\";\nimport {fetchLoginReset} from \"../../redux/actions/AuthActions\";\n\nlet route = require('../../utils/route');\n\nexport default function ProfileDropdown(props) {\n    const {\n        ...rest\n    } = props;\n\n    const {i18n, t} = useTranslation();\n    const dispatch = useDispatch();\n    let history = useHistory();\n\n    const disconnect = () => {\n        localStorage.clear();\n        dispatch(fetchLoginReset());\n        history.go(route.auth.sign_in);\n    };\n\n    return (\n        <li className=\"nav-item dropdown profile-dropdown ml-auto\">\n            <a href=\"#\" className=\"nav-link nav-icon icon-avatar\" data-toggle=\"dropdown\" role=\"button\"\n               aria-haspopup=\"true\" aria-expanded=\"false\" style={{transform: \"scale(1.5)\" }}/>\n            <ul className=\"dropdown-menu dropdown-menu-right\">\n                <li><a className=\"dropdown-item\" href=\"#\" onClick={disconnect}>{t('common.logout')}</a></li>\n                <li><a className=\"dropdown-item\" href=\"#\">{t('common.settings')}</a></li>\n            </ul>\n        </li>\n    );\n};\n\nProfileDropdown.propTypes = {};\n\nProfileDropdown.defaultProps = {};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\CreateDomaineReducer.js",["853"],"import * as DomaineType from '../../types/DomaineType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case DomaineType.CREATE_THEMATIQUE_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case DomaineType.CREATE_THEMATIQUE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case DomaineType.CREATE_THEMATIQUE_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case DomaineType.CREATE_THEMATIQUE_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\FaqReducer\\GetAllFaqReducer.js",["854"],"import * as FaqType from '../../types/FaqType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FaqType.GET_ALL_FAQ_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case FaqType.GET_ALL_FAQ_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case FaqType.GET_ALL_FAQ_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case FaqType.GET_ALL_FAQ_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CategoryReducer\\CreateCategoryReducer.js",["855"],"import * as CategoryType from '../../types/CategoryType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case CategoryType.CREATE_CATEGORY_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case CategoryType.CREATE_CATEGORY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case CategoryType.CREATE_CATEGORY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case CategoryType.CREATE_CATEGORY_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\TestimonialReducer\\GetTestimonialReducer.js",["856"],"import * as TestimonialType from '../../types/TestimonialType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case TestimonialType.GET_ALL_TESTIMONIAL_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case TestimonialType.GET_ALL_TESTIMONIAL_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case TestimonialType.GET_ALL_TESTIMONIAL_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case TestimonialType.GET_ALL_TESTIMONIAL_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\CommentApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\ValidatePublicationReducer\\ValidatePublicationReducer.js",["857"],"import * as ValidatePublication from '../../types/ValidatePublicationType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case ValidatePublication.VALIDATE_PUBLICATION_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case ValidatePublication.VALIDATE_PUBLICATION_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case ValidatePublication.VALIDATE_PUBLICATION_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case ValidatePublication.VALIDATE_PUBLICATION_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\JobOfferReducer\\GetJobOfferReducer.js",["858"],"import * as JobOfferType from '../../types/JobOfferType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case JobOfferType.GET_JOB_OFFER_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case JobOfferType.GET_JOB_OFFER_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case JobOfferType.GET_JOB_OFFER_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case JobOfferType.GET_JOB_OFFER_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PostList\\index.js",["859","860","861","862"],"import React, {useState, useEffect} from \"react\";\nimport PropTypes from 'prop-types';\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink} from \"react-router-dom\";\nimport Interweave from 'interweave';\nimport * as Utils from '../../utils';\nimport * as moment from 'moment';\nimport 'moment/locale/fr';\nimport ReactPaginate from 'react-paginate';\nimport './style.scss';\nimport {Constant} from \"../../config/Constant\";\nimport {Config} from \"../../config/ServerConfig\";\nimport _ from \"lodash\";\nimport ReactPlayer from 'react-player';\n\nlet route = require(\"../../utils/route\");\n\n\nexport default function PostList(props) {\n    moment.locale(\"fr\");\n    const {\n        style,\n        onClick,\n        children,\n        posts,\n        ...rest\n    } = props;\n    const totalPosts = posts.length;\n    const totalPage = Math.ceil(totalPosts / Constant.postPageLimit);\n\n    const [currentPosts, setCurrentPosts] = useState(posts.slice(0, Constant.postPageLimit));\n    const {t} = useTranslation();\n\n    useEffect(() => {\n        setCurrentPosts(posts.slice(0, Constant.postPageLimit));\n    }, [props.posts]);\n\n    useEffect(() => {\n        window.$(\".video-preview video\").initVideoLoader();\n        window.$(\".img-post\").initImageNotLoadPlaceHolder();\n    });\n    const handlePageChange = data => {\n        const offset = (data.selected) * Constant.postPageLimit;\n        setCurrentPosts(posts.slice(offset, offset + Constant.postPageLimit));\n    };\n\n    return (\n        <>\n            {\n                posts.length === 0 ?\n\n                    <div className=\"alert alert-info\" role=\"alert\">\n                        <span className=\"alert-icon\"><span className=\"sr-only\">Info</span></span>\n                        <p>{t('posts.no_post')}</p>\n                    </div> :\n\n                    <>\n                        {\n                            currentPosts.map((post, index) => (\n                                <div className=\"row\" key={index}>\n                                    <div className=\"col\" key={`post-${index}`}>\n                                        <div\n                                            className=\"row no-gutters shadow-lg rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative bg-white\">\n                                            {/*                                            <div className=\"col-6 p-4 d-flex flex-column position-static\">\n                                                <strong\n                                                    className=\"d-inline-block mb-2 text-primary\">{post.rhContentCategory}</strong>\n                                                <h3 className=\"mb-0\">{post.rhContentTitle}</h3>\n                                                <div\n                                                    className=\"mb-1 text-muted\">{moment(post.rhContentDateCeated).format(\"lll\")}</div>\n                                                <Interweave\n                                                    content={Utils.removeTag(Utils.cutString(post.rhContentDescription, 200))}/>\n\n                                                <NavLink\n                                                    to={{\n                                                        pathname: `${route.post.root}/${post.rhContentDomaineId}/${post.rhContentId}`,\n                                                        post\n                                                    }}\n                                                    className=\"stretched-link\">\n                                                    {t('common.read_more')}\n                                                </NavLink>\n                                            </div>\n                                            <div className=\"col-auto d-none d-lg-block\">\n                                                <img src=\"https://picsum.photos/800/450\" alt={post.rhContentTitle}\n                                                     className=\"img-fluid bd-placeholder-img\"/>\n                                            </div>*/}\n                                            <div className=\"d-flex flex-row\"></div>\n                                            <div className=\"row news-card bg-white\">\n                                                <div className=\"col-md-4\">\n                                                    {\n                                                        !_.isNil(post.rhContentPrincipalLink) ?\n                                                            Utils.isImageFileUrl(post.rhContentPrincipalLink) ?\n                                                                <div className=\"feed-image\">\n                                                                    <img className=\"img-fluid img-responsive img-post\"\n                                                                         loading=\"lazy\"\n                                                                         src={Config.imageFolder + post.rhContentPrincipalLink}/>\n                                                                </div>\n                                                                :\n                                                                <ReactPlayer\n                                                                    className=\"img-fluid img-reponsive video-preview\"\n                                                                    width=\"400px\"\n                                                                    height=\"200px\"\n                                                                    url={Config.imageFolder + post.rhContentPrincipalLink}\n                                                                />\n                                                            : <img className=\"img-fluid img-reponsive img-post\"\n                                                                   loading=\"lazy\"\n                                                                   src=\"https://picsum.photos/800/650\"/>\n                                                    }\n\n                                                </div>\n                                                <div className=\"col-md-8 p-3 pr-3\">\n                                                    <div className=\"news-feed-text\">\n                                                        <h5>{post.rhContentTitle}</h5>\n                                                        <span className=\"date\">\n                                                            <div className=\"mb-1 text-muted\">\n                                                                {moment(post.rhContentDateCeated).format(\"lll\")}\n                                                            </div>\n                                                        </span>\n                                                        <span>\n                                                                <Interweave\n                                                                    content={Utils.removeTag(Utils.cutString(post.rhContentDescription, 200))}/>\n                                                        </span>\n                                                        <div\n                                                            className=\"d-flex flex-row justify-content-between align-items-center mt-2\">\n                                                            <NavLink\n                                                                to={{\n                                                                    pathname: `${route.post.root}/${post.rhContentDomaine.rhContentCategoryId}/${post.rhContentDomaineId}/${post.rhContentId}`,\n                                                                    post\n                                                                }}\n                                                                className=\"stretched-link\">\n                                                                {t('common.read_more')}\n                                                            </NavLink>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))\n                        }\n                        <nav role=\"navigation\" aria-label=\"Pagination example with active span item\">\n                            <ReactPaginate\n                                previousLabel={<span className=\"sr-only\"> {t('common.previous')}</span>}\n                                nextLabel={<span className=\"sr-only\"> {t('common.next')}</span>}\n                                breakLabel={'...'}\n                                breakClassName={'page-item'}\n                                breakLinkClassName={'page-link'}\n                                pageCount={totalPage}\n                                pageClassName={'page-item'}\n                                pageLinkClassName={'page-link'}\n                                marginPagesDisplayed={2}\n                                onPageChange={handlePageChange}\n                                previousClassName={'page-item'}\n                                previousLinkClassName={'page-link'}\n                                nextLinkClassName={'page-link'}\n                                nextClassName={'page-item'}\n                                pageRangeDisplayed={Constant.postPageLimit}\n                                containerClassName={'pagination justify-content-center'}\n                                activeClassName={'active'}\n                            />\n                        </nav>\n                    </>\n            }\n        </>\n    );\n}\n\n\nPostList.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClick: PropTypes.func,\n    posts: PropTypes.array\n};\n\nPostList.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    posts: []\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\GlossaryReducer\\PostGlossaryReducer.js",["863"],"import * as GlossaryType from '../../types/GlossaryType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GlossaryType.POST_GLOSSARY_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case GlossaryType.POST_GLOSSARY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case GlossaryType.POST_GLOSSARY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case GlossaryType.POST_GLOSSARY_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\BlogList\\index.js",["864","865","866"],"import React, {useEffect, useState} from \"react\";\nimport PropTypes from 'prop-types';\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink} from \"react-router-dom\";\nimport chunk from 'lodash/chunk';\nimport Slider from \"../Slider\";\nimport {FakeData} from \"../../fakeData\";\nimport \"./style.css\";\nimport {Constant} from \"../../config/Constant\";\nimport ReactPaginate from \"react-paginate\";\nimport * as moment from 'moment';\nimport 'moment/locale/fr';\nimport Interweave from \"interweave\";\nimport * as Utils from \"../../utils\";\nimport {Config} from \"../../config/ServerConfig\";\nimport _ from \"lodash\";\n\nlet route = require(\"../../utils/route\");\nexport default function BlogList(props) {\n    moment.locale(\"fr\");\n    const {t} = useTranslation();\n    const {\n        style,\n        onClick,\n        blogs,\n        children,\n        ...rest\n    } = props;\n\n    const totalPosts = blogs.filter((blog) => blog.rhContentPriorityLevel !== 1).length;\n    const totalPage = Math.ceil(totalPosts / Constant.blogPageLimit);\n\n    const [currentBlogs, setCurrentBlogs] = useState(blogs.filter((blog) => blog.rhContentPriorityLevel !== 1).slice(0, Constant.blogPageLimit));\n\n    useEffect(() => {\n        setCurrentBlogs(blogs.filter((blog) => blog.rhContentPriorityLevel !== 1).slice(0, Constant.blogPageLimit));\n    }, [props.blogs]);\n\n    useEffect(() => {\n        window.$(\".img-post\").initImageNotLoadPlaceHolder();\n    });\n\n    const handlePageChange = data => {\n        const offset = (data.selected) * Constant.blogPageLimit;\n        setCurrentBlogs(blogs.filter((blog) => blog.rhContentPriorityLevel !== 1).slice(offset, offset + Constant.blogPageLimit));\n    };\n\n    console.log(\"Blogs\", blogs);\n\n    return (\n\n        <>\n            {\n                blogs.length === 0 ?\n\n                    <div className=\"alert alert-info\" role=\"alert\">\n                        <span className=\"alert-icon\"><span className=\"sr-only\">Info</span></span>\n                        <p>{t('blog.no_blog')}</p>\n                    </div> :\n\n                    <>\n                        <Slider pagination\n                                slides={blogs.filter((blog) => blog.rhContentPriorityLevel === 1)}\n                                renderItem={(slide) => (\n                                    <div className=\"jumbotron slider-blog p-4 p-md-5 text-white rounded\"\n                                         style={{backgroundImage: `url(${!_.isNil(slide.rhContentPrincipalLink) ? (Config.imageFolder + slide.rhContentPrincipalLink) : \"https://picsum.photos/840/400\"})`}}>\n                                        <div className=\"col-md-6 px-0\">\n                                            <h1 className=\"display-4 font-italic\">{slide.rhContentTitle}</h1>\n                                            <p className=\"lead my-3\">\n                                                <Interweave\n                                                    content={Utils.cutString(Utils.removeTag(slide.rhContentDescription), 100)}/>\n                                            </p>\n                                            <p className=\"lead mb-0\">\n                                                <NavLink\n                                                    to={{\n                                                        pathname: `${route.blog.root}/${slide.rhContentDomaineId}/${slide.rhContentId}`,\n                                                        slide\n                                                    }}\n                                                    role=\"button\"\n                                                    className=\"text-white font-weight-bold\">\n                                                    {t('common.read_more')}\n                                                </NavLink>\n                                            </p>\n                                        </div>\n                                    </div>\n                                )}\n                        />\n                        {\n                            chunk(currentBlogs, 2).map((row, index) => (\n                                <div className=\"row mb-3\" key={`row-${index}`}>\n                                    {\n                                        row.map((blog, i) => (\n                                            <div className=\"col-12 col-md-6 col-lg-6\" key={`blog-${i}`}>\n                                                <div className=\"card\">\n                                                    <img\n                                                        src={!_.isNil(blog.rhContentPrincipalLink) ? (Config.imageFolder + blog.rhContentPrincipalLink) : \"https://picsum.photos/400/200\"}\n                                                        width=\"400\" height=\"200\"\n                                                        className=\"card-img-top img-post\"\n                                                        loading=\"lazy\"\n                                                        alt={blog.rhContentTitle}/>\n                                                    <div className=\"card-body\">\n                                                        <h5 className=\"card-title\">{blog.rhContentTitle}</h5>\n                                                        <p className=\"card-text\">\n                                                            <Interweave\n                                                                content={Utils.removeTag(Utils.cutString(blog.rhContentDescription, 200))}/>\n                                                        </p>\n                                                        <p className=\"card-text\">\n                                                            <small\n                                                                className=\"text-muted\">{moment(blog.rhContentDateCeated).format(\"lll\")}</small>\n                                                        </p>\n                                                        <NavLink\n                                                            to={{\n                                                                pathname: `${route.blog.root}/${blog.rhContentDomaineId}/${blog.rhContentId}`,\n                                                                blog\n                                                            }}\n                                                            role=\"button\"\n                                                            className=\"btn btn-primary btn-secondary btn-sm\">\n                                                            {t('common.read_more')}\n                                                        </NavLink>\n                                                    </div>\n\n                                                </div>\n                                            </div>\n                                        ))\n                                    }\n                                </div>\n                            ))\n                        }\n                        <nav role=\"navigation\" aria-label=\"Pagination example with active span item\">\n                            <ReactPaginate\n                                previousLabel={<span className=\"sr-only\"> {t('common.previous')}</span>}\n                                nextLabel={<span className=\"sr-only\"> {t('common.next')}</span>}\n                                breakLabel={'...'}\n                                breakClassName={'page-item'}\n                                breakLinkClassName={'page-link'}\n                                pageCount={totalPage}\n                                pageClassName={'page-item'}\n                                pageLinkClassName={'page-link'}\n                                marginPagesDisplayed={2}\n                                onPageChange={handlePageChange}\n                                previousClassName={'page-item'}\n                                previousLinkClassName={'page-link'}\n                                nextLinkClassName={'page-link'}\n                                nextClassName={'page-item'}\n                                pageRangeDisplayed={Constant.blogPageLimit}\n                                containerClassName={'pagination justify-content-center'}\n                                activeClassName={'active'}\n                            />\n                        </nav>\n                    </>\n            }\n        </>\n    )\n};\n\nBlogList.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClick: PropTypes.func,\n    blogs: PropTypes.array\n};\n\nBlogList.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    blogs: []\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\JobOfferActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\BlogReducer\\PostBlogReducer.js",["867"],"import * as BlogType from '../../types/BlogType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case BlogType.POST_BLOG_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case BlogType.POST_BLOG_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case BlogType.POST_BLOG_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case BlogType.POST_BLOG_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PostWidgetList\\index.js",["868","869"],"import React from \"react\";\nimport PropTypes from 'prop-types';\nimport {useTranslation} from \"react-i18next\";\nimport ContentLoader from \"react-content-loader\";\nimport * as moment from \"moment\";\nimport \"./styles.css\";\n\nexport default function PostWidgetList(props) {\n\n    const {t} = useTranslation();\n    const {\n        style,\n        onClick,\n        children,\n        posts,\n        theme,\n        ...rest\n    } = props;\n    moment.locale(\"fr\");\n    const LoaderItem = () => (\n\n        <ContentLoader\n            speed={2}\n            width=\"auto\"\n            height={50}\n            viewBox=\"0 0 250 50\"\n            backgroundColor=\"#292929\"\n            foregroundColor=\"#8f8f8f\"\n            {...props}\n        >\n            <rect x=\"58\" y=\"18\" rx=\"2\" ry=\"2\" width=\"250\" height=\"10\"/>\n            <rect x=\"58\" y=\"34\" rx=\"2\" ry=\"2\" width=\"250\" height=\"10\"/>\n            <rect x=\"10\" y=\"18\" rx=\"2\" ry=\"2\" width=\"40\" height=\"10\"/>\n        </ContentLoader>\n    );\n\n    const Loader = () => (\n        <>\n            <LoaderItem/>\n            <LoaderItem/>\n            <LoaderItem/>\n        </>\n    )\n    return (\n\n        <div className=\"col-12 post-widget-list\" {...rest}>\n            <ul className=\"o__fil-info w-100 pl-0 mb-0\">\n                {\n                    posts !== null ?\n                        posts.map((post, index) => (\n                            <li key={index}\n                                className=\"list-group-item bg-gray px-2 d-flex justify-content-center flex-column composite-link border-0\">\n                                <div className=\"d-flex lines-2\">\n                                    <div className={`${theme === 'white' && \"text-white\"}  d-flex align-items-center`}>\n                                        {moment(post.rhContentDateCeated).format(\"ll\")}\n                                    </div>\n                                    <div className=\"pl-2\">\n                            <span className={`${theme === 'white' && \"text-white\"} font-weight-bold`}>\n                                {post.rhContentDomaine.rhContentDomaineName} -\n                            </span>\n                                        <a className=\"m_link lines-2 d-inline\">\n                                <span className={`${theme === 'white' && \"text-white\"}`}>\n                                    {post.rhContentTitle}\n                                </span>\n                                        </a>\n                                    </div>\n                                </div>\n                            </li>\n                        )) :\n                        <Loader/>\n                }\n            </ul>\n        </div>\n    )\n}\n\nPostWidgetList.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClick: PropTypes.func,\n    posts: PropTypes.array,\n    theme: PropTypes.oneOf([\"white\", \"black\"])\n};\n\nPostWidgetList.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    theme: \"black\",\n    posts: null\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\CommentActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\JobOfferType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Comment\\index.js",["870"],"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useTranslation} from \"react-i18next\";\nimport moment from 'moment';\nimport 'moment/locale/en-gb';\nimport 'moment/locale/fr';\n\nexport default function Comment(props) {\n    const {\n        title,\n        description,\n        date,\n        author,\n        ...rest\n    } = props;\n\n    const {i18n, t} = useTranslation();\n\n    return (\n        <li className=\"card mb-3\" {...rest}>\n            <div className=\"card-body\">\n                <h4 className=\"card-title\">{title}</h4>\n                <p className=\"card-text\">\n                    {description}\n                </p>\n                {/*<a href=\"#\" className=\"card-link\">0 comment</a>*/}\n            </div>\n            <p className=\"card-footer text-muted mb-0\">{t('comment.author')} <span\n                className=\"text-primary\">{author}</span> —\n                {moment(date).format('LL')}</p>\n        </li>\n    );\n};\n\nComment.propTypes = {\n    title: PropTypes.string,\n    description: PropTypes.string,\n    date: PropTypes.string,\n    author: PropTypes.string,\n};\n\nComment.defaultProps = {\n    title: \"\",\n    description: \"\",\n    date: new Date(),\n    author: \"\",\n};","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\RichTextEditor\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\utils\\index.js",["871"],"import {Constant} from \"../config/Constant\";\nimport _ from 'lodash';\n\nexport const toCamelCase = (word) => {\n    let regex = /[A-Z\\xC0-\\xD6\\xD8-\\xDE]?[a-z\\xDF-\\xF6\\xF8-\\xFF]+|[A-Z\\xC0-\\xD6\\xD8-\\xDE]+(?![a-z\\xDF-\\xF6\\xF8-\\xFF])|\\d+/g;\n    return word.match(regex);\n};\n\nexport const baseStyle = {\n    flex: 1,\n    flexDirection: 'column',\n    alignItems: 'center',\n    padding: '10px',\n    borderWidth: 2,\n    borderRadius: 2,\n    borderColor: '#eeeeee',\n    borderStyle: 'dashed',\n    backgroundColor: '#fafafa',\n    color: '#bdbdbd',\n    outline: 'none',\n    transition: 'border .24s ease-in-out'\n};\n\nexport const activeStyle = {\n    borderColor: '#2196f3'\n};\n\nexport const acceptStyle = {\n    borderColor: '#00e676'\n};\n\nexport const rejectStyle = {\n    borderColor: '#ff1744'\n};\n\nexport const thumbsContainerStyle = {\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginTop: 16\n};\n\nexport const thumbStyle = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: 100,\n    height: 100,\n    padding: 4,\n    boxSizing: 'border-box'\n};\n\nexport const thumbStyleVideo = {\n    display: 'inline-flex',\n    borderRadius: 2,\n    border: '1px solid #eaeaea',\n    marginBottom: 8,\n    marginRight: 8,\n    width: \"auto\",\n    height: \"auto\",\n    padding: 4,\n    boxSizing: 'border-box'\n};\n\nexport const thumbInnerStyle = {\n    display: 'flex',\n    minWidth: 0,\n    overflow: 'hidden'\n};\n\nexport const thumbInnerStyleVideo = {\n    display: 'flex',\n    minWidth: 0,\n};\n\nexport const imgStyle = {\n    display: 'block',\n    width: 'auto',\n    height: '100%'\n};\n\nexport const removeImgTag = (str) => {\n    if ((str === null) || (str === '') || (str === undefined))\n        return false;\n    else\n        str = str.toString();\n    return str.replace(/<img[^>]*>/g, '');\n};\n\nexport const removeTag = (str) => {\n    if ((str === null) || (str === '') || (str === undefined))\n        return \"\";\n    else\n        str = str.toString();\n    return str.replace(/<[^>]*>/g, '');\n};\n\nexport const cutString = (word, max) => {\n    return word === null ? '' : `${word.slice(0, max)}...`;\n};\n\nexport const isAdmin = () => {\n    if (!_.isNil(localStorage.getItem('USER')) && JSON.parse(localStorage.getItem('USER')).userRole)\n    {\n        console.log(\"verification\",localStorage.getItem('USER'));\n        return JSON.parse(localStorage.getItem('USER')).userRole.userRoleName === Constant.adminRole;\n\n    }\n    else\n        return false;\n};\n\nexport const isConnected = () => {\n    return !_.isNil(localStorage.getItem('USER'));\n};\n\nexport const getUserConnected = () => {\n    if (isConnected())\n        return JSON.parse(localStorage.getItem('USER'));\n    else\n        return null;\n};\n\nexport const isImageFileUrl = (url) => {\n    if(url===null)\n    return false;\n    \n    return url.match(/\\.(jpeg|jpg|gif|png)$/) != null;\n};\n\nexport const displayErrorRequest = (error) => {\n    switch (true) {\n        case (error.status >= 500 && error.status <= 511) :\n            return 'error.internal_server_error';\n\n        case error.status === 400 :\n            return error.data;\n\n        case error.status === 401 :\n            return 'error.unauthorized';\n\n        case error.status === 403 :\n            return 'error.forbidden';\n\n        case error.status === 404 :\n            return 'error.not_found';\n\n        case error.status === 408 :\n            return 'error.time_out';\n\n        default:\n            return 'error.error_occured'\n    }\n};\n\nexport const getFileExtension = (filePath) => {\n    return filePath.split('.').pop();\n};\n\nexport const getErrorMessage = (error) => {\n    switch (error.status) {\n        case 400:\n            return \"error.bad\"\n    }\n};\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\store\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\config\\Constant.js",["872","873"],"import React from 'react';\nimport {defaultThemes} from 'react-data-table-component';\n\nexport const Constant = {\n    blogID: 1,\n    testimonialID: 2,\n    faqID: 3,\n    glossaireID: 4,\n    publicationID: 5,\n    jobOfferID: 9999,\n    othersDomaineID: 1,\n    toastDelay: 2000,\n    postPageLimit: 5,\n    glossaryPageLimit: 15,\n    blogPageLimit: 10,\n    contratType: [\n        \"contrat_type.cdi\",\n        \"contrat_type.cdd\",\n        \"contrat_type.interim\",\n    ],\n    userRole: \"Simple User\",\n    adminRole: \"User RH\",\n    SuperadminRole: \"Super Admin\",\n    notificationLimit: 4,\n    orangeColor: {\n        greyscale: [\n            '#cd3c14',\n            '#ff7900',\n            '#f16e00',\n            '#527edb',\n            '#a885d8',\n            '#ffb4e6',\n            '#ffd200',\n            '#32c832',\n            '#50be87',\n            '#4bb4e6',\n        ],\n        palette: [\n            '#fff',\n            '#fafafa',\n            '#f6f6f6',\n            '#eee',\n            '#ddd',\n            '#ccc',\n            '#999',\n            '#666',\n            '#595959',\n            '#333'\n        ],\n        full: [\n            '#E6B8AF',\n            '#F4CCCC',\n            '#FCE5CD',\n            '#FFF2CC',\n            '#D9EAD3',\n            '#D0E0E3',\n            '#C9DAF8',\n            '#CFE2F3',\n            '#D9D2E9',\n            '#EAD1DC',\n            '#DD7E6B',\n            '#EA9999',\n            '#F9CB9C',\n            '#FFE599',\n            '#B6D7A8',\n            '#A2C4C9',\n            '#A4C2F4',\n            '#9FC5E8',\n            '#B4A7D6',\n            '#D5A6BD',\n            '#CC4125',\n            '#E06666',\n            '#F6B26B',\n            '#FFD966',\n            '#93C47D',\n            '#76A5AF',\n            '#6D9EEB',\n            '#6FA8DC',\n            '#8E7CC3',\n            '#C27BA0',\n            '#A61C00',\n            '#CC0000',\n            '#E69138',\n            '#F1C232',\n            '#6AA84F',\n            '#45818E',\n            '#3C78D8',\n            '#3D85C6',\n            '#674EA7',\n            '#A64D79',\n            '#85200C',\n            '#990000',\n            '#B45F06',\n            '#BF9000',\n            '#38761D',\n            '#134F5C',\n            '#1155CC',\n            '#0B5394',\n            '#351C75',\n            '#733554',\n            '#5B0F00',\n            '#660000',\n            '#783F04',\n            '#7F6000',\n            '#274E13',\n            '#0C343D',\n            '#1C4587',\n            '#073763',\n            '#20124D',\n            '#4C1130'\n        ]\n    },\n    tableCustomStyles: {\n        header: {\n            style: {\n                minHeight: '56px',\n            },\n        },\n        headCells: {\n            style: {\n                minHeight: '56px',\n                fontSize: '1rem',\n                fontWeight: \"bold\",\n                padding: '.875rem .625rem calc(.875rem + 1px)',\n                lineHeight: \"1.25\",\n                verticalAlign: \"top\",\n                paddingLeft: '8px',\n                paddingRight: '8px',\n            },\n        },\n        rows: {\n            style: {\n                minHeight: '72px', // override the row height\n                fontSize: \".9rem\"\n            }\n        },\n        cells: {\n            style: {\n                paddingLeft: '8px', // override the cell padding for data cells\n                paddingRight: '8px',\n            },\n        },\n    },\n    applicationRh:{\n        myInfos:{\n            title:\"My infos\",\n            url:\"https://sirh-prod-app.adcm.orangecm:4443/\",\n        },\n         taleo:{\n            title:\"Taleo\",\n            url:\"https://aa135.taleo.net/\",\n        },\n\n       e_learning: {\n            title:\"E-learning \",\n            url:\"http://learning.orange.com/\",\n        },\n\n        livretAcueil:{\n            title:\"Livret d’accueil\",\n            url:\"\",\n        }\n\n}\n    \n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\MainLayout\\index.js",["874","875","876","877","878","879","880"],"import React from 'react';\nimport Header from \"../../components/Header\";\nimport Footer from \"../../components/Footer\";\nimport {Route, Switch} from \"react-router-dom\";\nimport Home from \"../../screens/Home\";\nimport PostLayout from \"../PostLayout\";\nimport Posts from \"../../screens/Posts/index\";\nimport Glossary from \"../../screens/Glossary\";\nimport Blog from \"../../screens/Blog\";\nimport Faq from \"../../screens/FAQ\";\nimport JobOffer from \"../../screens/JobOffer\";\nimport BlogLayout from \"../BlogLayout\";\nimport PrivateRoute from \"../../components/PrivateRoute\";\nimport PostDetail from \"../../screens/Posts/PostDetail\";\nimport GlossaryLayout from \"../GlossaryLayout\";\nimport FaqLayout from \"../FaqLayout\";\nimport TestimonialLayout from \"../TestimonialLayout\";\nimport BlogDetail from \"../../screens/Blog/BlogDetail\";\nimport Testimonial from \"../../screens/Testimonial\";\nimport JobOfferLayout from \"../JobOfferLayout\";\nimport JobOfferDetail from \"../../screens/JobOffer/JobOfferDetail\";\nimport HeaderAdmin from \"../../components/HeaderAdmin\";\nimport AdminLayout from \"../AdminLayout\";\nimport AdminRoute from \"../../components/AdminRoute\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport NotFound from \"../../screens/CommonScreen/NotFound\";\n\n\nlet route = require('../../utils/route');\n\nfunction MainLayout(props) {\n    return (\n        <>\n            <Header/>\n            <main role=\"main\" id=\"content\" style={{minHeight: \"100vh\"}}>\n                <Switch>\n                    <Route exact path=\"/\" component={Home}/>\n                    <Route exact path={route.home.root} component={Home}/>\n                    <Route exact path={route.post.root} component={NotFound}/>\n                    <Route exact path={route.blog.root} component={Blog}/>\n                    <Route exact path={route.faq.root} component={Faq}/>\n                    <Route exact path={route.testimonial.root} component={Testimonial}/>\n                    <Route exact path={route.glossary.root} component={Glossary}/>\n                    <Route exact path={route.jobOffer.root} component={JobOffer}/>\n                    <Route exact path=\"/glossary/:page\" component={GlossaryLayout}/>\n                    <Route exact path=\"/faq/:page\" component={FaqLayout}/>\n                    <Route exact path=\"/testimonial/:page\" component={TestimonialLayout}/>\n\n                    <Route exact path=\"/blog/:page\" component={BlogLayout}/>\n                    <Route exact path=\"/blog/:domaine/:id\" component={BlogDetail}/>\n\n                    {/*<Route exact path=\"/posts/:page\" component={PostLayout}/>*/}\n                    <Route path={route.post.post_domain} exact component={Posts}/>\n                    <Route path={route.post.post_category} exact component={Posts}/>\n                    <Route exact path=\"/posts/:category/:domaine/:id\" component={PostDetail}/>\n                    <Route path=\"*\" component={NotFound}/>\n\n                    {/*                    <Route exact path=\"/job-offer/:page\" component={JobOfferLayout}/>\n                    <Route exact path=\"/job-offer/:domaine/:id\" component={JobOfferDetail}/>*/}\n                </Switch>\n            </main>\n            <Footer/>\n        </>\n    );\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nexport default connect(mapstateToProps, mapDispatchToProps)(MainLayout);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\AdminRoute\\index.js",["881","882"],"import React, {Component} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport _ from \"lodash\";\nimport {Constant} from \"../../config/Constant\";\nimport * as Utils from \"../../utils\";\n\nlet route = require('../../utils/route');\n\nclass AdminRoute extends Component {\n    render() {\n        let {children, result, ...rest} = this.props;\n\n        return (\n            <Route\n                {...rest}\n                render={(props) =>\n                    (result !== null || Utils.isConnected()) ?\n                        Utils.isAdmin() ?\n                            (React.cloneElement(children, {props})) : (\n                                <Redirect\n                                    exact\n                                    to={route.home.root}\n                                />\n                            ) : (\n                            <Redirect\n                                exact\n                                to={route.auth.sign_in}\n                            />\n                        )\n                }\n            />\n        )\n    }\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nexport default connect(mapstateToProps, mapDispatchToProps\n)(AdminRoute);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\PrivateRoute\\index.js",["883"],"import React, {Component} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport _ from 'lodash';\n\nlet route = require('../../utils/route');\n\nclass PrivateRoute extends Component {\n    render() {\n        let {children, result, path, ...rest} = this.props;\n        return (\n            <Route\n                {...rest}\n                render={(props) =>\n                    (result !== null || localStorage.getItem('USER')) ? (\n                        React.cloneElement(children, {props})\n                    ) : (\n                        <Redirect\n                            exact\n                            to={route.auth.sign_in}\n                        />\n                    )\n                }\n            />\n        )\n    }\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nexport default connect(mapstateToProps, mapDispatchToProps\n)(PrivateRoute);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\UserRoute\\index.js",["884","885"],"import React, {Component} from 'react';\nimport {Route, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport _ from \"lodash\";\nimport {Constant} from \"../../config/Constant\";\nimport * as Utils from \"../../utils\";\n\nlet route = require('../../utils/route');\n\nclass UserRoute extends Component {\n    render() {\n        let {children, result, ...rest} = this.props;\n\n        return (\n            <Route\n                {...rest}\n                render={(props) =>\n                    (result !== null || Utils.isConnected()) ?\n                        !Utils.isAdmin() ?\n                            (React.cloneElement(children, {props})) : (\n                                <Redirect\n                                    exact\n                                    to={route.home.root}\n                                />\n                            ) : (\n                            <Redirect\n                                exact\n                                to={route.auth.sign_in}\n                            />\n                        )\n                }\n            />\n        )\n    }\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nexport default connect(mapstateToProps, mapDispatchToProps\n)(UserRoute);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\UserLayout\\index.js",["886","887"],"import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport Footer from \"../../components/Footer\";\nimport User from \"../../screens/User\";\nimport HeaderUser from \"../../components/HeaderUser\";\nimport AdminPost from \"../../screens/Admin/Posts\";\nimport NewPost from \"../../screens/Admin/Posts/NewPost/NewPost\";\nimport UserDemands from \"../../screens/User/Demands\";\nimport NewDemand from \"../../screens/User/Demands/NewDemands\";\nimport Test from '../../screens/User/test/test';\n\nlet route = require('../../utils/route');\n\n\nexport default function UserLayout(props) {\n\n    return (\n        <>\n            <HeaderUser/>\n            <main role=\"main\" id=\"content\" style={{minHeight: \"100vh\"}}>\n                <div className=\"row\">\n                    {/*<Sidebar/>*/}\n                    <div className=\"col-12\" style={{paddingTop: '220px'}}>\n                        <Switch>\n                            <Route path={route.user_admin_url[1].link} component={User} exact={true} strict={true}/>\n                            <Route path={route.user.user_demands} component={UserDemands} exact={true} strict={true}/>\n                            <Route path={route.user.add_new_demand} component={NewDemand} exact={true} strict={true}/>\n                            <Route path={route.user.test} component={Test} exact={true} strict={true}/>\n\n                        </Switch>\n                    </div>\n                </div>\n            </main>\n            <Footer/>\n        </>\n    )\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Home\\index.js",["888","889","890","891","892","893","894","895"],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\BlogApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\PostsApi.js",["896","897","898"],"import {fetchLoginError, fetchLoginPending, fetchLoginSuccess} from \"../actions/AuthActions\";\nimport axios from \"axios\";\nimport {Config} from \"../../config/ServerConfig\";\nimport {\n    fetchAddNewPostError,\n    fetchAddNewPostPending,\n    fetchAddNewPostReset,\n    fetchAddNewPostSuccess,\n    fetchDeletePostError,\n    fetchDeletePostPending,\n    fetchDeletePostReset,\n    fetchDeletePostSuccess,\n    fetchEditPostError,\n    fetchEditPostPending,\n    fetchEditPostReset,\n    fetchEditPostSuccess,\n    fetchGetAllPostByCategoryError,\n    fetchGetAllPostByCategoryPending,\n    fetchGetAllPostByCategorySuccess,\n    fetchGetAllPostByDomainError,\n    fetchGetAllPostByDomainPending,\n    fetchGetAllPostByDomainReset,\n    fetchGetAllPostByDomainSuccess,\n    fetchGetAllPostError,\n    fetchGetAllPostFeaturedError,\n    fetchGetAllPostFeaturedPending,\n    fetchGetAllPostFeaturedReset,\n    fetchGetAllPostFeaturedSuccess,\n    fetchGetAllPostPending,\n    fetchGetAllPostReset,\n    fetchGetAllPostSuccess,\n    fetchGetPostByIdError,\n    fetchGetPostByIdPending,\n    fetchGetPostByIdReset,\n    fetchGetPostByIdSuccess\n} from \"../actions/PostsActions\";\nimport {Constant} from \"../../config/Constant\";\nimport {\n    fetchGetAllTestimonialError,\n    fetchGetAllTestimonialPending, fetchGetAllTestimonialReset,\n    fetchGetAllTestimonialSuccess\n} from \"../actions/TestimonialActions\";\n\nexport const getAllPostsByDomaineAction = (categoryID, domaineID) => {\n\n    return dispatch => {\n        dispatch(fetchGetAllPostByDomainPending());\n\n        axios({\n            url: `${Config.getPublicationUrl}/${categoryID}/${domaineID}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllPostByDomainSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllPostByDomainError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllPostByDomainError(error.request));\n                else\n                    dispatch(fetchGetAllPostByDomainError(error.message));\n            });\n    }\n};\nexport const getAllPostsByDomaineReset = () => {\n    return dispatch => {\n        dispatch(fetchGetAllPostByDomainReset());\n    }\n};\n\nexport const getAllPostsFrontEndAction = () => {\n    return dispatch => {\n        dispatch(fetchGetAllPostPending());\n\n        axios({\n            url: `${Config.getRhContentPostBlogUrl}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllPostSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllPostError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllPostError(error.request));\n                else\n                    dispatch(fetchGetAllPostError(error.message));\n            });\n    }\n}\nexport const getAllPostsAction = (categoryID) => {\n\n    return dispatch => {\n        dispatch(fetchGetAllPostPending());\n\n        axios({\n            url: `${Config.getAdminPublicationUrl}/${categoryID}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllPostSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllPostError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllPostError(error.request));\n                else\n                    dispatch(fetchGetAllPostError(error.message));\n            });\n    }\n};\n\nexport const getAllPostsByCategoryAction = (categoryID) => {\n\n    return dispatch => {\n        dispatch(fetchGetAllPostByCategoryPending());\n\n        axios({\n            url: `${Config.getAdminPublicationUrl}/${categoryID}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllPostByCategorySuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllPostByCategoryError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllPostByCategoryError(error.request));\n                else\n                    dispatch(fetchGetAllPostByCategoryError(error.message));\n            });\n    }\n};\n\nexport const getAllPostBackendAction = () => {\n\n    return dispatch => {\n        dispatch(fetchGetAllPostPending());\n\n        axios({\n            url: `${Config.getRhContentAllPostAdminUrl}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllPostSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllPostError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllPostError(error.request));\n                else\n                    dispatch(fetchGetAllPostError(error.message));\n            });\n    }\n};\nexport const getAllPostsReset = () => {\n    return dispatch => {\n        dispatch(fetchGetAllPostReset());\n    }\n};\n\nexport const getPostFeaturedAction = () => {\n\n    return dispatch => {\n        dispatch(fetchGetAllPostFeaturedPending());\n\n        axios({\n            url: `${Config.getPostFeaturedUrl}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllPostFeaturedSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllPostFeaturedError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllPostFeaturedError(error.request));\n                else\n                    dispatch(fetchGetAllPostFeaturedError(error.message));\n            });\n    }\n};\nexport const getPostFeaturedReset = () => {\n    return dispatch => {\n        dispatch(fetchGetAllPostFeaturedReset());\n    }\n};\n\n\nexport const addNewPostAction = (post) => {\n\n    return dispatch => {\n        dispatch(fetchAddNewPostPending());\n\n        axios({\n            url: `${Config.addPostUrl}`,\n            method: 'post',\n            data: post\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchAddNewPostSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchAddNewPostError(error.response));\n                else if (error.request)\n                    dispatch(fetchAddNewPostError(error.request));\n                else\n                    dispatch(fetchAddNewPostError(error.message));\n            });\n    }\n};\nexport const addNewPostReset = () => {\n    return dispatch => {\n        dispatch(fetchAddNewPostReset());\n    }\n};\n\nexport const editPostAction = (post, id) => {\n\n    return dispatch => {\n        dispatch(fetchEditPostPending());\n\n        axios({\n            url: `${Config.updatePostUrl}/${id}`,\n            method: 'PUT',\n            data: post\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchEditPostSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchEditPostError(error.response));\n                else if (error.request)\n                    dispatch(fetchEditPostError(error.request));\n                else\n                    dispatch(fetchEditPostError(error.message));\n            });\n    }\n};\nexport const editPostReset = () => {\n    return dispatch => {\n        dispatch(fetchEditPostReset());\n    }\n};\n\nexport const getPostByIdAction = (id) => {\n\n    return dispatch => {\n        dispatch(fetchGetPostByIdPending());\n\n        axios({\n            url: `${Config.getPostByIdUrl}/${id}`,\n            method: 'GET'\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetPostByIdSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetPostByIdError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetPostByIdError(error.request));\n                else\n                    dispatch(fetchGetPostByIdError(error.message));\n            });\n    }\n};\nexport const getPostByIdReset = () => {\n    return dispatch => {\n        dispatch(fetchGetPostByIdReset());\n    }\n};\n\n\nexport const deletePostByIdAction = (id) => {\n\n    return dispatch => {\n        dispatch(fetchDeletePostPending());\n\n        axios({\n            url: `${Config.getPostByIdUrl}/${id}`,\n            method: 'DELETE'\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchDeletePostSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchDeletePostError(error.response));\n                else if (error.request)\n                    dispatch(fetchDeletePostError(error.request));\n                else\n                    dispatch(fetchDeletePostError(error.message));\n            });\n    }\n};\nexport const deletePostByIdReset = () => {\n    return dispatch => {\n        dispatch(fetchDeletePostReset());\n    }\n};\n\n\nexport const getAllPostsFeaturedAction = () => {\n\n    return dispatch => {\n        dispatch(fetchGetAllPostFeaturedPending());\n\n        axios({\n            url: `${Config.getPostFeaturedUrl}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllPostFeaturedSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllPostFeaturedError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllPostFeaturedError(error.request));\n                else\n                    dispatch(fetchGetAllPostFeaturedError(error.message));\n            });\n    }\n};\nexport const getAllPostsFeaturedReset = () => {\n    return dispatch => {\n        dispatch(fetchGetAllPostFeaturedReset());\n    }\n};\n\nexport const getAllTestTimonialAction = () => {\n\n    return dispatch => {\n        dispatch(fetchGetAllTestimonialPending());\n\n        axios({\n            url: `${Config.getAdminPublicationUrl}/${Constant.testimonialID}`,\n            method: 'GET',\n        })\n            .then(response => {\n                console.log(response);\n                dispatch(fetchGetAllTestimonialSuccess(response));\n            })\n            .catch(error => {\n                console.warn(error);\n                if (error.response)\n                    dispatch(fetchGetAllTestimonialError(error.response));\n                else if (error.request)\n                    dispatch(fetchGetAllTestimonialError(error.request));\n                else\n                    dispatch(fetchGetAllTestimonialError(error.message));\n            });\n    }\n};\nexport const getAllTestTimonialReset = () => {\n    return dispatch => {\n        dispatch(fetchGetAllTestimonialReset());\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\NewPost\\NewPost.js",["899","900","901","902","903","904"],"import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {useForm} from \"react-hook-form\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {useHistory} from \"react-router-dom\";\nimport {Input} from \"../../../../components/Input\";\nimport {getAllDomaineAction} from \"../../../../redux/api/DomaineApi\";\nimport {addNewPostAction, addNewPostReset} from \"../../../../redux/api/PostsApi\";\nimport {useDropzone} from 'react-dropzone';\nimport * as Utils from '../../../../utils';\nimport {Constant} from \"../../../../config/Constant\";\nimport './style.css';\nimport {toast} from 'react-toastify';\nimport * as moment from 'moment';\nimport {Helmet} from \"react-helmet\";\nimport {uploadImageAction} from \"../../../../redux/api/ImageApi\";\nimport Dropzone from 'react-dropzone-uploader'\nimport RichTextEditor from \"../../../../components/RichTextEditor\";\nimport {Config} from \"../../../../config/ServerConfig\";\nimport {getAllCategoryAction, getAllCategoryReset} from \"../../../../redux/api/CategoryApi\";\n\nlet route = require('../../../../utils/route');\n\nfunction NewPost(props) {\n    const {t} = useTranslation();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n    const editor = useRef(null);\n    const [title, setTitle] = useState('');\n    const [date, setDate] = useState(null);\n    const [dateFin, setDateFin] = useState(null);\n    const [thematique, setThematique] = useState(1);\n    const [thematique2, setThematique2] = useState(1);\n\n    const [video, setVideo] = useState(null);\n    const [contenu, setContenu] = useState('');\n    const [featured, setFeatured] = useState(0);\n    const [hasPieceJointe, setHasPieceJointe] = useState(false);\n    const [piecesJointes, setPieceJointe] = useState([]);\n    const [isDataSubmit, setIsDataSubmit] = useState(false);\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const [files, setFiles] = useState([]);\n    const [isImageSelected, setIsImageSelected] = useState(true);\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n        accept: \".jpeg,.png,.gif,.jpg,.svg\",\n        maxFiles: 1,\n        multiple: false,\n        onDrop: acceptedFiles => {\n            console.log(acceptedFiles);\n            acceptedFiles.map(file => {\n                let imageToSend = new FormData();\n                imageToSend.append(\"file\", file);\n                props.uploadImageAction(imageToSend);\n            });\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            })));\n        }\n    });\n\n    const style = useMemo(() => ({\n        ...Utils.baseStyle,\n        ...(isDragActive ? Utils.activeStyle : {}),\n        ...(isDragAccept ? Utils.acceptStyle : {}),\n        ...(isDragReject ? Utils.rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject,\n        isDragAccept\n    ]);\n\n    const Thumbs = files.map(file => (\n        <div style={Utils.thumbStyle} key={file.name}>\n            <div style={Utils.thumbInnerStyle}>\n                {\n                    props.loadingUpdloadPhoto &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                <img\n                    src={file.preview}\n                    style={Utils.imgStyle}\n                />\n            </div>\n        </div>\n    ));\n\n    const getVideoUploadParams = ({meta}) => {\n        return {url: Config.uploadImageUrl}\n    };\n\n    const handleFileUploadChangeStatus = ({meta, file, xhr}, status) => {\n        console.log(status, meta, file);\n        if (status === \"done\") {\n            let response = JSON.parse(xhr.response);\n            setVideo(response.imageName);\n        }\n    };\n\n    const handlePiecesJointeChangeStatus = ({meta, file, xhr}, status) => {\n        let piecesJointesUpload = piecesJointes;\n        console.log(status, meta, file);\n        if (status === \"done\") {\n            let response = JSON.parse(xhr.response);\n            piecesJointesUpload.push({imageLink: response.imageName});\n            setPieceJointe(piecesJointesUpload);\n        }\n    };\n\n    const handleFileSubmit = (files, allFiles) => {\n        console.log(files.map(f => f.meta));\n        allFiles.forEach(f => f.remove());\n    };\n\n    useEffect(() => () => {\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n\n\n    const onSubmitPost = () => {\n        setIsDataSubmit(true);\n        props.addNewPostAction({\n            rhContentTitle: title,\n            rhContentDescription: contenu,\n            rhContentPriorityLevel: featured,\n            rhContentDomaineId: parseInt(thematique2),\n            rhContentPrincipalLink: isImageSelected ? props.resultUploadImage !== null ? props.resultUploadImage.imageName : \"\" : video,\n            rhContentDatePublish: date !== null ? moment(date).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\"),\n            rhContentDateOnPublish: dateFin === null ? moment(moment().add(1, 'y')).format(\"YYYY-MM-DD\") : moment(dateFin).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId,\n            images: piecesJointes\n        });\n    };\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllCategoryAction();\n    }, []);\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.result !== null) {\n            toast.dark(t('posts.add_new_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.push(route.post.admin_post);\n            props.addNewPostReset();\n        }\n        console.log(props.error);\n        if (props.error !== null) {\n            toast.error(t(Utils.displayErrorRequest(props.error)), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.addNewPostReset();\n        }\n        if (props.resultDomaine !== null) {\n            console.log(\"domaine\",props.resultDomaine);\n            console.log(\"Domaine has lodaded\", props.resultDomaine.filter(domaine => domaine.rhContentCategoryId === Constant.blogID)[0].rhContentDomaineId);\n            setThematique(props.resultDomaine.filter(domaine => domaine.rhContentCategoryId === Constant.blogID)[0].rhContentDomaineId);\n        }\n    }, [props]);\n\n    console.log(\"Thematique\", parseInt(thematique));\n\n    useEffect(()=> {\n        console.log(\"Thematique\", thematique);\n    }, [thematique]);\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t(\"posts.new_post\")}`}</title>\n            </Helmet>\n            <div className=\"container-fluid\">\n                <h1>{t(\"posts.new_post\")}</h1>\n            </div>\n\n            <section className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitPost)}>\n                            <div className=\"col-12 col-lg-3\">\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"text\"\n                                       name=\"title\"\n                                       required\n                                       ref={register({required: true, maxLength: 255})}\n                                       id=\"title\"\n                                       value={title}\n                                       onChange={(e) => setTitle(e.target.value)}\n                                       error={errors.hasOwnProperty(\"title\")}\n                                       errorText={t('error.required_field')}\n                                       labelText={t('add_post.title')}\n                                       maxLength=\"255\"\n                                />\n                                      {                   console.log(\"domaine\", props.resultDomaine)}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"postThematique\"\n                                           className=\"is-required\">{t('common.thematique')}</label>\n                                    {\n                                        props.loadingDomaine ?\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\" disabled>\n                                            </select> :\n                                            props.resultDomaine !== null &&\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\"\n                                                    onChange={event => {\n                                                        setThematique(event.target.value);\n                                                        setThematique2(event.target.value);\n\n                                                        console.log(\"Evant data\",event.target.value)\n                                                        //thematique=event.target.value;\n                                                        console.log(\"Thématique data to correct\",thematique)\n                                                        console.log(\"Thématique data\",thematique2)\n\n                                                    }}>\n                                                {\n                                                    \n                                                    props.resultCategory !== null &&\n                                                    props.resultCategory.map((menu) => (\n                                                        <optgroup label={t(menu.rhContentCategoryName)}>\n                                                            {\n                                                                props.resultDomaine.filter((domaine) => domaine.rhContentCategoryId === menu.rhContentCategoryId)\n                                                                    .map((domaine, index) => (\n                                                                        <option value={domaine.rhContentDomaineId}\n                                                                                key={`domaine${index}`}>{domaine.rhContentDomaineName}\n                                                                        </option>\n                                                                    ))\n                                                            }\n                                                        </optgroup>\n                                                    ))\n                                                }\n                                            </select>\n                                    }\n\n                                </div>\n\n                                <div className=\"row\">\n                                    <div className=\"col-6\">\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"date\"\n                                               name=\"date\"\n                                               id=\"date\"\n                                               value={date}\n                                               onChange={(e) => {\n                                                   setDate(e.target.value);\n                                                   console.log(e.target.value);\n                                               }}\n                                               errorText={t('error.date_incorrect')}\n                                               labelText={t('add_post.publication_date')}\n                                               title={t('add_post.expected_format')}\n                                        >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                        </Input>\n                                    </div>\n\n                                    <div className=\"col-6\">\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"date\"\n                                               name=\"dateFin\"\n                                               id=\"dateFin\"\n                                               value={dateFin}\n                                               onChange={(e) => {\n                                                   setDateFin(e.target.value);\n                                                   console.log(e.target.value);\n                                               }}\n                                               error={isDataSubmit ? dateFin !== null : false}\n                                               errorText={t('error.date_incorrect')}\n                                               labelText={t('add_post.publication_end_date')}\n                                               title={t('add_post.expected_format')}\n                                        >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                        </Input>\n                                    </div>\n                                </div>\n\n                                <div className=\"form-group mb-3\">\n\n                                    <ul class=\"nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\n                                        <li className=\"nav-item\" role=\"presentation\"\n                                            onClick={() => setIsImageSelected(true)}>\n                                            <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#image\"\n                                               role=\"tab\" aria-controls=\"home\"\n                                               aria-selected=\"true\">{t('common.image')}</a>\n                                        </li>\n                                        <li className=\"nav-item\" role=\"presentation\"\n                                            onClick={() => setIsImageSelected(false)}>\n                                            <a className=\"nav-link\" id=\"profile-tab\" data-toggle=\"tab\" href=\"#video\"\n                                               role=\"tab\" aria-controls=\"profile\"\n                                               aria-selected=\"false\">{t('common.video')}</a>\n                                        </li>\n                                    </ul>\n                                    <div className=\"tab-content\" style={{padding: 0, border: 0}}>\n                                        <div className=\"tab-pane fade show active\" id=\"image\" role=\"tabpanel\"\n                                             aria-labelledby=\"image-tab\">\n                                            <label htmlFor=\"postThematique\"\n                                                   className={`is-required ${(files.length === 0) && \"is-invalid\"}`}>{t('add_post.image')}</label>\n                                            <div {...getRootProps({style})}>\n                                                <input {...getInputProps()} />\n                                                {files.length === 0 && <p>{t('add_post.drad_drop_or_select')}</p>}\n                                                {Thumbs}\n                                            </div>\n\n                                            {files.length === 0 ?\n                                                isDataSubmit ?\n                                                    <div className=\"invalid-feedback\">\n                                                        {t('error.image_required')}\n                                                    </div> : null : null}\n                                        </div>\n                                        <div className=\"tab-pane fade\" id=\"video\" role=\"tabpanel\"\n                                             aria-labelledby=\"video-tab\">\n                                            <label htmlFor=\"postThematique\"\n                                                   className={`is-required ${(files.length === 0) && \"is-invalid\"}`}>{t('add_post.video')}</label>\n                                            <Dropzone\n                                                getUploadParams={getVideoUploadParams}\n                                                onChangeStatus={handleFileUploadChangeStatus}\n                                                onSubmit={handleFileSubmit}\n                                                inputContent={(files, extra) => (extra.reject ? t('common.video_only') : t('add_post.drad_drop_or_select'))}\n                                                styles={{\n                                                    dropzone: {\n                                                        flex: \"1 1 0%\",\n                                                        flexDirection: \"column\",\n                                                        alignItems: \"center\",\n                                                        padding: \"10px\",\n                                                        borderWidth: \"2px\",\n                                                        borderRadius: \"2px\",\n                                                        borderColor: \"rgb(238, 238, 238)\",\n                                                        borderStyle: \"dashed\",\n                                                        backgroundColor: \"rgb(250, 250, 250)\",\n                                                        color: \"rgb(189, 189, 189)\",\n                                                        outline: \"none\",\n                                                        transition: \"border 0.24s ease-in-out 0s\",\n                                                        position: \"normal\",\n                                                        minHeight: \"75px\"\n                                                    },\n                                                    inputLabel: {\n                                                        color: \"rgb(189, 189, 189)\",\n                                                        fontSize: \"1rem\",\n                                                        fontWeight: \"normal\",\n                                                        padding: \"10px\"\n                                                    },\n                                                    submitButtonContainer: {display: \"none\"},\n                                                    dropzoneReject: {borderColor: '#F19373', backgroundColor: '#F1BDAB'}\n                                                }}\n                                                accept=\"video/*,image/*\"\n                                                submitButtonContent={null}\n                                                maxFiles={1}\n                                            />\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                                <div className=\"row\">\n\n                                    <div className=\"col-6\">\n                                        <fieldset className=\"form-group\">\n                                            <div id=\"radio-action\" className=\"form-inline\">\n                                                <div className=\"custom-control custom-switch right\">\n                                                    <input type=\"checkbox\"\n                                                           onChange={(e) => setFeatured(e.target.checked ? 1 : 0)}\n                                                           className=\"custom-control-input\" id=\"featured_switch\"/>\n                                                    <label className=\"custom-control-label\"\n                                                           htmlFor=\"featured_switch\">{t('add_post.featured')}</label>\n                                                </div>\n                                            </div>\n                                        </fieldset>\n                                    </div>\n\n                                    <div className=\"col-6\">\n                                        <fieldset className=\"form-group\">\n                                            <div id=\"radio-action\" className=\"form-inline\">\n                                                <div className=\"custom-control custom-switch right\">\n                                                    <input type=\"checkbox\"\n                                                           onChange={(e) => setHasPieceJointe(e.target.checked)}\n                                                           className=\"custom-control-input\" id=\"piece_jointe_switch\"/>\n                                                    <label className=\"custom-control-label\"\n                                                           htmlFor=\"piece_jointe_switch\">{t('common.piece_jointe')}</label>\n                                                </div>\n                                            </div>\n                                        </fieldset>\n                                    </div>\n                                </div>\n\n                                {\n                                    hasPieceJointe &&\n                                    <div className=\"form-group mb-3\">\n                                        <Dropzone\n                                            getUploadParams={getVideoUploadParams}\n                                            onChangeStatus={handlePiecesJointeChangeStatus}\n                                            onSubmit={handleFileSubmit}\n                                            inputContent={(files, extra) => (extra.reject ? t('common.video_only') : t('add_post.drad_drop_or_select'))}\n                                            styles={{\n                                                dropzone: {\n                                                    flex: \"1 1 0%\",\n                                                    flexDirection: \"column\",\n                                                    alignItems: \"center\",\n                                                    padding: \"10px\",\n                                                    borderWidth: \"2px\",\n                                                    borderRadius: \"2px\",\n                                                    borderColor: \"rgb(238, 238, 238)\",\n                                                    borderStyle: \"dashed\",\n                                                    backgroundColor: \"rgb(250, 250, 250)\",\n                                                    color: \"rgb(189, 189, 189)\",\n                                                    outline: \"none\",\n                                                    transition: \"border 0.24s ease-in-out 0s\",\n                                                    position: \"normal\",\n                                                    minHeight: \"75px\"\n                                                },\n                                                inputLabel: {\n                                                    color: \"rgb(189, 189, 189)\",\n                                                    fontSize: \"1rem\",\n                                                    fontWeight: \"normal\",\n                                                    padding: \"10px\"\n                                                },\n                                                submitButtonContainer: {display: \"none\"},\n                                                dropzoneReject: {borderColor: '#F19373', backgroundColor: '#F1BDAB'}\n                                            }}\n                                            accept=\"image/*,video/*,.pdf,doc,.docx,.xml,.xlsx,.xslx,.ppt,.pptx,.txt,.csv\"\n                                            submitButtonContent={null}\n                                        />\n                                    </div>\n                                }\n\n                                <div className=\"submit mt-3\">\n\n                                    {\n                                        props.loading ?\n                                            <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                                <span className=\"sr-only\">{t('common.loading')}</span>\n                                            </button> :\n                                            <button className=\"btn btn-primary\"\n                                                    onSubmit={() => {\n                                                        console.log(thematique);\n                                                        setIsDataSubmit(true);\n                                                        handleSubmit(onSubmitPost);\n                                                    }}>{t('common.post')}</button>\n                                    }\n                                </div>\n\n                            </div>\n                            <div className=\"col-12 col-lg-9\">\n                                <div className=\"form-group required\">\n                                    <label htmlFor=\"PostContent\"\n                                           className=\"is-required\">{t('add_post.contenu')}</label>\n\n                                    <RichTextEditor ref={editor}\n                                                    value={contenu}\n                                                    onBlur={event => setContenu(event.target.innerHTML)} // preferred to use only this option to update the content for performance reasons\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.addNewPostReducer.loading,\n    result: state.addNewPostReducer.result,\n    error: state.addNewPostReducer.error,\n\n    loadingCategory: state.getAllCategoryReducer.loading,\n    resultCategory: state.getAllCategoryReducer.result,\n    errorCategory: state.getAllCategoryReducer.error,\n\n    loadingDomaine: state.getAllDomainesReducer.loading,\n    resultDomaine: state.getAllDomainesReducer.result,\n    errorDomaine: state.getAllDomainesReducer.error,\n\n    loadingUploadImage: state.uploadImageReducer.loading,\n    resultUploadImage: state.uploadImageReducer.result,\n    errorUploadImage: state.uploadImageReducer.error,\n\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllDomaineAction,\n    uploadImageAction,\n\n    addNewPostAction,\n    addNewPostReset,\n\n    getAllCategoryAction,\n    getAllCategoryReset\n\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPost);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\test\\test.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\CategoryApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\BlogActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\index.js",["905","906","907","908","909","910","911","912","913","914"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useHistory, withRouter} from \"react-router-dom\";\nimport {getAllPostBackendAction, getAllPostsAction, getAllPostsReset} from \"../../../redux/api/PostsApi\";\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\nimport {validatePublicationAction, validatePublicationReset} from \"../../../redux/api/ValidationApi\";\nimport {postFaqAction, postFaqReset} from \"../../../redux/api/FaqApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport * as Utils from \"../../../utils\";\nimport {Constant} from \"../../../config/Constant\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport {Config} from \"../../../config/ServerConfig\";\nimport CustomMaterialMenu from \"../../../components/CustomMaterialMenu\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DataTableComponent from \"../../../components/DataTable\";\nimport ReactPlayer from \"react-player\";\n\n\nlet route = require('../../../utils/route');\n\nfunction AdminPost(props) {\n    const {t} = useTranslation();\n    const [isLoading, setIsLoading] = useState(true);\n    const [search, setSearch] = useState('');\n    const [posts, setPosts] = useState([]);\n    const [postsPublished, setPostsPublished] = useState([]);\n    const [postsWaiting, setPostsWaiting] = useState([]);\n    const [postsExpired, setPostsExpired] = useState([]);\n    const [postsDeleted, setPostsDeleted] = useState([]);\n    const [tabsActiveIndex, setTabsActiveIndex] = useState(0);\n    let history = useHistory();\n\n    const columns = [\n        {\n            name: t('common.status'),\n            selector: 'rhContentIsOK',\n            width: '56px',\n            sortable: true,\n            cell: post => post.rhContentIsOK ?\n                <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n        },\n        {\n            name: t('add_post.title'),\n            selector: 'rhContentTitle',\n            sortable: true,\n        },\n        {\n            name: t('add_post.contenu'),\n            selector: 'rhContentDescription',\n            sortable: false,\n            width: \"35%\",\n            cell: d => Utils.cutString(Utils.removeTag(d.rhContentDescription), 150)\n        },\n        {\n            name: t('add_post.publication_date'),\n            selector: 'rhContentDateCeated',\n            width: '200px',\n            sortable: true,\n            format: d => moment(d.rhContentDateCeated).format(\"lll\")\n        },\n        {\n            name: t('common.author'),\n            selector: 'user.userName',\n            width: '170px',\n            sortable: true,\n        }, {\n            name: t('common.domain'),\n            selector: 'rhContentDomaine',\n            width: '150px',\n            sortable: true,\n            cell: post => post.rhContentDomaine !== null ? post.rhContentDomaine.rhContentDomaineName : ''\n        },\n        {\n            name: t('add_post.image_ellipsed'),\n            selector: 'rhContentPrincipalLink',\n            grow: 0,\n            cell: post =>\n                !_.isNil(post.rhContentPrincipalLink) ?\n                    Utils.isImageFileUrl(post.rhContentPrincipalLink) ?\n                        <img className=\"rounded mx-auto d-block img-post\" height=\"auto\" width=\"100%\"\n                             loading=\"lazy\"\n                             src={Config.imageFolder + post.rhContentPrincipalLink}/>\n                        :\n                        <ReactPlayer\n                            className=\"img-fluid img-reponsive video-preview\"\n                            width=\"100%\"\n                            height=\"auto\"\n                            url={Config.imageFolder + post.rhContentPrincipalLink}\n                        />\n                    : <img className=\"rounded mx-auto d-block\" height=\"auto\" width=\"100%\"\n                           loading=\"lazy\"\n                           src=\"https://picsum.photos/200/200\"/>\n        },\n        {\n            cell: row => <CustomMaterialMenu size=\"small\" row={row} firstButtonText={t('common.edit')}\n                                             secondButtonText={t('common.unpublish')}\n                                             secondButtonAction={() => {\n                                                 props.getAllPostBackendAction();\n                                             }}\n                                             firstButtonAction={() => {\n                                                 history.push({\n                                                     pathname: `${route.post.edit_post}/${row.rhContentId}`\n                                                 })\n                                             }\n                                             }\n            />,\n            allowOverflow: true,\n            button: true,\n            width: '56px',\n        }\n\n    ];\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllPostsReset();\n        props.getAllPostBackendAction();\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            console.log(\"data result\",props.result);\n            setPostsPublishedAction();\n            setPostsDeleted(props.result.filter((post) => !post.rhContentIsOK));\n            setPostsWaiting(props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDate = moment(post.rhContentDateCeated).format('lll');\n                return moment(currentDate).isBefore(postDate);\n            }));\n            setPostsExpired(props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDateExpired = moment(post.rhContentDateOnPublish).format('lll');\n                return moment(postDateExpired).isBefore(currentDate);\n\n            }));\n            setTimeout(() => {\n                window.$(\".video-preview video\").initVideoLoader();\n                window.$(\".img-post\").initImageNotLoadPlaceHolder();\n            }, 500);\n        }\n\n    }, [props]);\n\n    useEffect(() => {\n        if (props.result !== null) setIsLoading(false);\n        else setIsLoading(true);\n    }, [posts]);\n\n    const setPostsPublishedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => post.rhContentIsOK);\n            setPosts(tempPosts);\n            setPostsPublished(tempPosts);\n        }\n    };\n\n    const setPostsWaitingAction = () => {\n        console.log('waiting click');\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDate = moment(post.rhContentDateCeated).format('lll');\n                return moment(currentDate).isBefore(postDate);\n            });\n            setPosts(tempPosts);\n            setPostsWaiting(tempPosts);\n            setTabsActiveIndex(1);\n        }\n    };\n\n    const setPostsExpiredAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDateExpired = moment(post.rhContentDateOnPublish).format('lll');\n                return moment(postDateExpired).isBefore(currentDate);\n\n            });\n            setPosts(tempPosts);\n            setPostsExpired(tempPosts);\n            setTabsActiveIndex(2);\n        }\n    };\n\n    const setPostsDeletedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => !post.rhContentIsOK);\n            setPosts(tempPosts);\n            setPostsDeleted(tempPosts);\n            setTabsActiveIndex(3);\n        }\n    };\n\n    const handleSearch = () => {\n        console.log(search);\n        if (props.result !== null)\n            setPosts(props.result.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase())))\n\n    };\n\n    const ExpandedComponent = ({data}) => <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n    const renderPostTable = (data) => (\n        <DataTableComponent\n            columns={columns}\n            data={!isLoading ? data : []}\n            progressPending={props.loading}\n            defaultSortField=\"name\"\n            loading={props.loading || isLoading}\n            selectableRowsComponent={Checkbox}\n            onRowClicked={(post) => history.push({\n                pathname: `${route.post.edit_post}/${post.rhContentId}`\n            })}\n            expandableRows={false}\n            expandableRowsComponent={<ExpandedComponent/>}\n        />\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('posts.title')}`}</title>\n                </Helmet>\n                <h1>{t(\"posts.title\")}</h1>\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n\n                        <div className=\"row mb-3\">\n                            <div className=\"col-auto mr-auto\">\n                                <NavLink to={route.post.add_new} className=\"btn btn-primary\" exact>\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('posts.new_post')}\n                                </NavLink>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('posts.find_post')}\n                                           aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <ul className=\"nav nav-tabs nav-tabs-light\">\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 0 && \"active\"}`}\n                                       onClick={() => {\n                                           setPostsPublishedAction();\n                                           setTabsActiveIndex(0);\n                                       }}>{`${t('common.published')} (${postsPublished.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 1 && \"active\"}`}\n                                       onClick={() => setPostsWaitingAction()}>{`${t('common.waiting')} (${postsWaiting.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 2 && \"active\"}`}\n                                       onClick={() => setPostsExpiredAction()}>{`${t('common.expired')} (${postsExpired.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 3 && \"active\"}`}\n                                       onClick={() => setPostsDeletedAction()}>{`${t('common.deleted')} (${postsDeleted.length})`}</a>\n                                </li>\n                            </ul>\n                            <div className=\"media-body\">\n                                {renderPostTable(posts)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsReducer.loading,\n    result: state.getAllPostsReducer.result,\n    error: state.getAllPostsReducer.error,\n\n    loadingPostGlossary: state.postGlossaryReducer.loading,\n    resultPostGlossary: state.postGlossaryReducer.result,\n    errorPostGlossary: state.postGlossaryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    getAllPostBackendAction,\n\n    getAllDomaineAction,\n    validatePublicationAction,\n    validatePublicationReset,\n\n    postFaqAction,\n    postFaqReset,\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminPost));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Header\\index.js",["915","916","917","918","919","920","921","922","923","924","925","926","927"],"import React, {useEffect} from 'react';\nimport {Images} from \"../../config/Images\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, withRouter, useParams} from \"react-router-dom\";\nimport {Link} from \"react-router-dom\";\n\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport LanguageSwitcher from \"../LanguageSwitcher\";\nimport ProfileDropdown from \"../ProfileDropdown\";\nimport NotificationDropdown from \"../NotificationDropdown\";\nimport * as Utils from '../../utils';\nimport {getAllDomaineAction, getDomaineByPostAction} from \"../../redux/api/DomaineApi\";\nimport {getAllCategoryAction, getAllCategoryReset} from \"../../redux/api/CategoryApi\";\nimport {Constant} from \"../../config/Constant\";\nimport {getAllPostsFrontEndAction} from \"../../redux/api/PostsApi\";\nimport './style.css'\n\n\nlet route = require('../../utils/route');\nfunction openTab(data) {\n   // window.open(data);\n    //window.location.href = \"http://www.w3schools.com\";\n    <a href=\"\">salut</a>\n  }\n  \nfunction HeaderAdmin(props) {\n    const mystyle = {\n        color: \"DodgerBlue\",\n        backgroundColor: \"#ccc\",\n        padding: \"10px\",\n        fontFamily: \"Arial\"\n      };\n      const mystyle2 = {\n        color: \"#000\"       \n      };\n\n    const {result} = props;\n    const {t} = useTranslation();\n    const {pathname} = props.location;\n    const matchWorkaround = (pathname) => (isMatch, location) => isMatch || location.pathname.includes(pathname);\n    const matchWorkForDashboard = (match, location) => {\n        return false;\n    };\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllCategoryAction();\n        if (props.resultGetAllPosts === null)\n            props.getAllPostsFrontEndAction();\n    }, []);\n\n    const NavUser = () => (\n        <nav role=\"navigation\" className=\"navbar navbar-dark navbar-expand-md\" aria-label=\"Main navigation\">\n            {console.log(result !== null || Utils.isConnected())}\n            <div className=\"container-fluid\">\n                <a className=\"navbar-brand\" href=\"#\">\n                    <img src={Images.logo} className=\"d-inline-block align-bottom ml-0 mr-1\"\n                         alt=\"Back to homepage\" title=\"Back to homepage\" width=\"50\" height=\"50\" loading=\"lazy\"/>\n                    {/* <span className=\"ml-2 align-self-end\">\n                            <span className=\"sr-only\">Orange </span>\n                            {t('app.name')} <br/>\n                            <small>{t('app.slogan')}</small>\n                        </span>*/}\n\n                    <img src={Images.openRH1} className=\"w-100px d-inline-block align-bottom ml-1 mr-1\"\n                        alt={t(\"app.name\")} title={t(\"app.name\")} loading=\"lazy\"/>\n                </a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#collapsing-navbar2\" aria-controls=\"collapsing-navbar2\" aria-expanded=\"false\"\n                        aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"navbar-collapse justify-content-between collapse\" id=\"mega-menu\">\n                    {\n                        (result !== null || Utils.isConnected()) &&\n                        <>\n                            <ul className=\"navbar-nav\">\n                                <li className=\"nav-item\">\n                                    <NavLink\n                                        to={`${route.home.root}`}\n                                        className=\"nav-link\"\n                                        activeClassName=\"\"\n                                        activeStyle={{\n                                            color: 'var(--orange)'\n                                        }}\n                                        exact>\n                                        {t(route.home.title)}\n                                    </NavLink>\n                                </li>\n                                {\n                                    props.resultGetCategory !== null &&\n                                    props.resultGetCategory.filter(category => category.rhContentCategoryState)\n                                        .map((menu, index) => (\n                                            <li className=\"nav-item\" key={`menu-${index}`}>\n                                                <a className=\"nav-link\" href={`#mega-level-${index}-collapse`}\n                                                   data-toggle=\"collapse\">{t(menu.rhContentCategoryName)}</a>\n                                                <div className=\"mega-menu-panel collapse\" style={mystyle}\n                                                     id={`mega-level-${index}-collapse`}>\n                                                    <div className=\"container-lg\">\n                                                        <NavLink to={{\n                                                            pathname: `${route.post.root}/${menu.rhContentCategoryId}`\n                                                        }} className=\"nav-link all\"\n                                                                 exact>\n                                                            {t(\"common.see_all_post\")}\n                                                        </NavLink>\n                                                        <a className=\"nav-link close ml-auto\"\n                                                           data-toggle=\"collapse\"\n                                                           href={`#mega-level-${index}-collapse`}\n                                                           aria-expanded={false}\n                                                           aria-controls={`mega-level-${index}-collapse`}\n                                                           title={t(\"common.close_menu\")}>\n                                                                    <span\n                                                                        className=\"sr-only\">{t(\"common.close_menu\")}</span>\n                                                        </a>\n                                                    </div>\n                                                    <div className=\"container-lg\">\n                                                        <ul className=\"navbar-nav\">\n                                                            {\n                                                                props.resultGetDomaine !== null &&\n                                                                props.resultGetDomaine.filter(domaine => (domaine.rhContentCategoryId === menu.rhContentCategoryId) && (domaine.rhContentDomaineState))\n                                                                    .map((domaineByPost) => (\n                                                                        <li className=\"nav-item col\">\n                                                                            {\n                                                                            console.log(\"Mes test menu\",domaineByPost)\n                                                                   \n                                                                            }\n                                                                            \n                                                                            {domaineByPost.domaineLink!==null ?\n                                                                        /*<NavLink\n                                                                        to={`${domaineByPost.domaineLink}`}\n                                                                        className=\"nav-link\"\n                                                                        style={mystyle2}\n                                                                        exact>\n                                                                        {domaineByPost.rhContentDomaineName} </NavLink>*/\n                                                                        <a className=\"Mylink\" href={domaineByPost.domaineLink}>{domaineByPost.rhContentDomaineName}</a>\n                                                                         :\n                                                                           <NavLink\n                                                                            to={`${route.post.root}/${menu.rhContentCategoryId}/${domaineByPost.rhContentDomaineId}`}\n                                                                            className=\"Mylink\"\n                                                                          //  style={mystyle2}\n                                                                          //  onclick={openTab(domaineByPost.domaineLink)}\n                                                                            exact>\n                                                                            {domaineByPost.rhContentDomaineName}\n                                                                            </NavLink>\n                                                                            \n                                                                         //   openTab(domaineByPost.domaineLink)\n                                                                        }\n\n                                                                           {/*  <NavLink\n                                                                                to={`${route.post.root}/${menu.rhContentCategoryId}/${domaineByPost.rhContentDomaineId}`}\n                                                                                className=\"nav-link\"\n                                                                                exact>\n                                                                                {domaineByPost.rhContentDomaineName}\n                                                                            </NavLink> */}\n                                                                            <ul className=\"navbar-nav\">\n                                                                                <li className=\"nav-item\"><a\n                                                                                    className=\"nav-link back\"\n                                                                                    href=\"#\">{t('common.previous')}</a>\n                                                                                </li>\n                                                                                <li className=\"nav-item\"><span\n                                                                                    className=\"nav-heading text-primary\">{domaineByPost.rhContentDomaineName}</span>\n                                                                                </li>\n                                                                                {/*\n                                                                                    props.resultGetAllPosts !== null &&\n                                                                                    props.resultGetAllPosts.filter((post) => post.rhContentState && post.rhContentDomaineId === domaineByPost.rhContentDomaineId)\n                                                                                        .slice(0, 2)\n                                                                                        .map((post) => (\n                                                                                            <li className=\"nav-item\">\n                                                                                                <NavLink\n                                                                                                    to={`${route.post.root}/${menu.rhContentCategoryId}/${domaineByPost.rhContentDomaineId}/${post.rhContentId}`}\n                                                                                                    className=\"nav-link\"\n                                                                                                    style={mystyle2}\n                                                                                                    exact>\n                                                                                                    {post.rhContentTitle}\n                                                                                                </NavLink>\n                                                                                            </li>\n                                                                                        ))\n                                                                                        */}\n                                                                            </ul>\n                                                                        </li>\n                                                                    ))\n                                                            }\n                                                        </ul>\n                                                    </div>\n                                                </div>\n                                            </li>\n                                        ))\n                                }\n                                {props.resultGetCategory !== null &&\n                                props.resultGetCategory.filter(category => category.rhContentCategoryState).length <= 4 ?\n                                    route.menu_header_user.map((menu, index) => (\n                                        <li className=\"nav-item\" key={`menu-${index}`}>\n                                            <NavLink to={menu.link} className=\"nav-link\"\n                                                     isActive={matchWorkaround(menu.link)}\n                                                     activeClassName=\"\"\n                                                     activeStyle={{\n                                                         color: 'var(--orange)'\n                                                     }}\n                                                     exact>\n                                                {t(menu.title)}\n                                            </NavLink>\n                                        </li>\n                                    )) :\n                                    <li className=\"nav-item dropdown\">\n                                        <a href=\"#\" className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\"\n                                           role=\"button\" id=\"dropdownMenu\">{t(\"navigation.other\")}</a>\n                                        <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu\">\n                                            {\n                                                route.menu_header_user.map((menuItem) => (\n                                                    <NavLink to={menuItem.link} className=\"dropdown-item\"\n                                                             aria-expanded\n                                                             isActive={matchWorkaround(menuItem.link)}\n                                                             activeClassName=\"\"\n                                                             activeStyle={{\n                                                                 color: 'var(--orange)'\n                                                             }}\n                                                             exact>\n                                                        {t(menuItem.title)}\n                                                    </NavLink>\n                                                ))\n                                            }\n                                        </div>\n                                    </li>\n                                }\n                            </ul>\n                            <ul className=\"navbar-nav\">\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className=\"nav-link nav-icon svg-search\">\n                                        <span className=\"sr-only\">open search bar</span>\n                                    </a>\n                                </li>\n                            </ul>\n                        </>\n                    }\n                </div>\n            </div>\n        </nav>\n    );\n\n\n    return (\n        <header role=\"banner\" id=\"demo-navbar\">\n            <nav role=\"navigation\" className=\"navbar navbar-light bg-white navbar-expand-md supra\"\n                 aria-label=\"Complementary navigation\">\n                <div className=\"container\">\n                    <ul className=\"navbar-nav\">\n                        {(result !== null || Utils.isConnected()) &&\n                        Utils.isAdmin() ?\n                            route.admin_url.map((menu, index) => (\n                                <li className=\"nav-item\" key={index}>\n                                    <NavLink to={menu.link} className=\"nav-link\"\n                                             isActive={matchWorkForDashboard}\n                                             exact>\n                                        {t(menu.title)}\n                                    </NavLink>\n                                </li>\n                            )) :\n                            route.user_admin_url.map((menu, index) => (\n                                <li className=\"nav-item\" key={index}>\n                                    <NavLink to={menu.link} className=\"nav-link\"\n                                             isActive={matchWorkForDashboard}\n                                             exact>\n                                        {t(menu.title)}\n                                    </NavLink>\n                                </li>\n                            ))\n                        }\n                    </ul>\n                    <ul className=\"navbar-nav ml-auto\">\n                        {\n                            (result !== null || Utils.isConnected()) &&\n                            <>\n                                <NotificationDropdown/>\n                                <ProfileDropdown/>\n                            </>\n                        }\n\n                        <LanguageSwitcher/>\n                    </ul>\n                </div>\n            </nav>\n            <NavUser/>\n\n        </header>\n    )\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result,\n\n    loadingGetAllPosts: state.getAllPostsReducer.loading,\n    resultGetAllPosts: state.getAllPostsReducer.result,\n    errorGetAllPosts: state.getAllPostsReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n\n    loadingGetCategory: state.getAllCategoryReducer.loading,\n    resultGetCategory: state.getAllCategoryReducer.result,\n    errorGetCategory: state.getAllCategoryReducer.error,\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllDomaineAction,\n\n    getAllPostsFrontEndAction,\n\n    getAllCategoryAction,\n    getAllCategoryReset\n}, dispatch);\n\nexport default withRouter(connect(mapstateToProps, mapDispatchToProps)(HeaderAdmin));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\BlogLayout\\index.js",["928","929"],"import React from 'react';\nimport {Route, Switch} from \"react-router-dom\";\nimport NewBlog from \"../../screens/Admin/Blog/NewBlog\";\nimport PostDetail from \"../../screens/Posts/PostDetail\";\nimport Blog from \"../../screens/Blog/index\";\n\nlet route = require('../../utils/route');\n\n\nexport default function BlogLayout(props) {\n\n    return (\n        <>\n            <Switch>\n                <Route path={route.blog.blog_domain} component={Blog}/>\n            </Switch>\n        </>\n    )\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Footer\\index.js",["930","931","932"],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\JobOfferLayout\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Testimonial\\index.js",["933","934","935","936","937","938","939","940","941","942","943","944","945","946","947"],"import React, {useEffect, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport NavigationLight from \"../../components/NavigationLight\";\nimport {FakeData} from \"../../fakeData\";\nimport PostWidget from \"../../components/PostWidget\";\nimport {\n    getAllPostsByDomaineReset,\n    getAllPostsByDomaineAction,\n    getAllTestTimonialAction,\n    getAllTestTimonialReset\n} from \"../../redux/api/PostsApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport Loader from \"../../components/Loader\";\nimport AboutOpenRHWidget from \"../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../components/ArchiveWidget\";\nimport {Input} from \"../../components/Input\";\nimport {TextArea} from \"../../components/TextArea/TextArea\";\nimport {useForm} from \"react-hook-form\";\nimport {Helmet} from \"react-helmet\";\nimport {postFaqAction, postFaqReset} from \"../../redux/api/FaqApi\";\nimport {Constant} from \"../../config/Constant\";\nimport * as moment from \"moment\";\nimport * as Utils from \"../../utils\";\nimport {toast} from \"react-toastify\";\nimport FaqList from \"../../components/FaqList\";\nimport TestimonialList from \"../../components/TestimonialList\";\nimport {postTestimonialAction, postTestimonialReset} from \"../../redux/api/TestimonialApi\";\nimport $ from \"jquery\";\n\nlet route = require('../../utils/route');\n\nfunction Testimonial(props) {\n    const {t} = useTranslation();\n    let history = useHistory();\n    const {register, handleSubmit, errors} = useForm();\n    const [search, setSearch] = useState('');\n    const [testimonialFilter, setTestimonialFilter] = useState(null);\n    let {id, page, domaine} = useParams();\n    const [testimonial, setTestimonial] = useState('');\n    const [thematique, setThematique] = useState(1);\n\n    console.log(\"PROPS PROPS PROPS\", props.result);\n    useEffect(() => {\n        props.getAllTestTimonialReset();\n        props.getAllTestTimonialAction();\n    }, []);\n\n\n    const handleSearch = () => {\n        if (props.result !== null)\n            setTestimonialFilter(props.result.filter((post) => post.rhContentDescription.toLowerCase().includes(search.toLowerCase())));\n    };\n\n    const onSubmitTestimonial = () => {\n        props.postTestimonialAction({\n            rhContentTitle: \"\",\n            rhContentDescription: testimonial,\n            rhContentCategoryId: Constant.testimonialID,\n            rhContentDomaineId: Constant.othersDomaineID,\n            rhContentDatePublish: moment(new Date()).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId\n        });\n    };\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.resultPostTestimonial !== null) {\n            toast.dark(t('faq.success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            setTimeout(() => {\n                history.go(0);\n                props.postTestimonialReset();\n            }, Constant.toastDelay);\n        }\n        if (props.errorPostTestimonial !== null) {\n            toast.error(props.errorPostTestimonial, {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.postTestimonialReset();\n        }\n    }, [props]);\n\n    useEffect(() => {\n        if ($(\"body\").hasClass('bg-gray'))\n            $(\"body\").removeClass(\"bg-gray\");\n    });\n\n    const renderModalAddTestimonial = () => (\n        <div className=\"modal fade\" id=\"addFaqModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addFaqModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addFaqModalLabel\">{t('testimonial.new_testimonial')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\"\n                                      onSubmit={handleSubmit(onSubmitTestimonial)}>\n\n                                    {/*                                    <div className=\"col-12\">\n                                        <label htmlFor=\"postThematique\"\n                                               className=\"is-required\">{t('common.thematique')}</label>\n                                        {\n                                            props.loadingGetDomaine ?\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\" disabled>\n                                                </select> :\n                                                props.resultGetDomaine !== null &&\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\"\n                                                        onChange={event => setThematique(event.target.value)}>\n                                                    {\n                                                        props.resultGetDomaine.map((domaine, index) => (\n                                                            <option value={domaine.rhContentDomaineId}\n                                                                    key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                        ))\n                                                    }\n                                                </select>\n                                        }\n\n                                    </div>*/}\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <TextArea wrapperClass=\"form-group\"\n                                                  inputClass=\"form-control\"\n                                                  name=\"testimonial\"\n                                                  required\n                                                  style={{height: \"106px\"}}\n                                                  ref={register({required: true})}\n                                                  id=\"testimonial\"\n                                                  value={testimonial}\n                                                  onChange={(e) => setTestimonial(e.target.value)}\n                                                  error={errors.hasOwnProperty(\"testimonial\")}\n                                                  errorText={t('error.required_field')}\n                                                  labelText={t('testimonial.testimonial_single')}\n                                        />\n\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingPostTestimonial ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitTestimonial)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t('testimonial.title')}`}</title>\n            </Helmet>\n            <div className=\"my-5\">\n                <div className=\"container\">\n                    <h1>{t(\"testimonial.title\")}</h1>\n                </div>\n                {/*<NavigationLight menus={FakeData.posts_menu} menuLink={route.testimonial.root}/>*/}\n\n                {renderModalAddTestimonial()}\n\n                <section className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-lg-9\">\n                            <div className=\"row mb-3\">\n                                <div className=\"col-auto mr-auto\">\n                                    <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                            data-target=\"#addFaqModal\">\n                                        <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                        {t('testimonial.add_new')}\n                                    </button>\n                                </div>\n                                <div className=\"col-auto\">\n                                    <div className=\"input-group\">\n                                        <input type=\"text\" className=\"form-control\"\n                                               placeholder={t('testimonial.find_testimonial')}\n                                               aria-label={t('testimonial.find_testimonial')}\n                                               aria-describedby=\"button-addon2\"\n                                               value={search} onChange={(e) => {\n                                            setSearch(e.target.value);\n                                            handleSearch();\n                                        }}/>\n                                        <div className=\"input-group-append\">\n                                            <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                                <span className=\"sr-only\">Icon</span>\n                                                <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"mt-4\">\n                                {\n                                    <div className=\"media-body\">\n                                        {\n                                            props.loading ?\n                                                <Loader/> :\n                                                props.result !== null ?\n                                                    <TestimonialList\n                                                        testimonials={search !== '' ? testimonialFilter : props.result}/> :\n\n                                                    (props.error !== null) &&\n                                                    <div className=\"alert alert-danger\" role=\"alert\">\n                                                        <span className=\"alert-icon\">\n                                                            <span className=\"sr-only\">Info</span>\n                                                        </span>\n                                                        <p>{t(Utils.displayErrorRequest(props.error))}</p>\n                                                    </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n\n                        </div>\n                        <aside className=\"col-12 col-lg-3\">\n                            <PostWidget categories={FakeData.post_widget_data}/>\n                            <AboutOpenRHWidget/>\n                            {/*<ArchiveWidget/>*/}\n                        </aside>\n                    </div>\n                </section>\n            </div>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.getTestimonialReducer.loading,\n    result: state.getTestimonialReducer.result,\n    error: state.getTestimonialReducer.error,\n\n    loadingPostTestimonial: state.postTestimonialReducer.loading,\n    resultPostTestimonial: state.postTestimonialReducer.result,\n    errorPostTestimonial: state.postTestimonialReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n\n    postTestimonialAction,\n    postTestimonialReset,\n\n    getAllTestTimonialAction,\n    getAllTestTimonialReset\n\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Testimonial));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\JobOffer\\index.js",["948","949","950","951","952","953","954","955"],"import React, {useEffect, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport NavigationLight from \"../../components/NavigationLight\";\nimport {FakeData} from \"../../fakeData\";\nimport PostList from \"../../components/PostList\";\nimport PostWidget from \"../../components/PostWidget\";\nimport {getAllJobOfferReset, getAllJobOfferAction} from \"../../redux/api/JobOfferApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport Loader from \"../../components/Loader\";\nimport AboutOpenRHWidget from \"../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../components/ArchiveWidget\";\nimport {Constant} from \"../../config/Constant\";\nimport {Helmet} from \"react-helmet\";\nimport {getAllPostsByDomaineAction, getAllPostsByDomaineReset} from \"../../redux/api/PostsApi\";\nimport JobOfferList from \"../../components/JobOfferList\";\n\nlet route = require('../../utils/route');\n\n\nfunction JobOffer(props) {\n\n    const {t} = useTranslation();\n    let history = useHistory();\n    const [search, setSearch] = useState('');\n    const [jobsFilter, setPostsFilter] = useState(null);\n    let {id, page, domaine} = useParams();\n    let pathParam = useParams();\n\n\n    useEffect(() => {\n        if (domaine === undefined) {\n            console.warn('DOMAINE NON DEFINI');\n            if (props.resultGetDomaine !== null) {\n                props.getAllPostsByDomaineAction(Constant.jobOfferID, props.resultGetDomaine[0].rhContentDomaineId);\n                history.push(`${route.jobOffer.root}/${props.resultGetDomaine[0].rhContentDomaineId}`);\n            }\n        }\n\n    }, [props]);\n\n    useEffect(() => {\n        props.getAllPostsByDomaineAction(Constant.jobOfferID, domaine);\n    }, [props.location.pathname]);\n\n    const handleSearch = () => {\n        console.log(search);\n        setPostsFilter(props.result.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase())))\n    };\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t('job_offer.title')}`}</title>\n            </Helmet>\n            <div className=\"my-5\">\n                <div className=\"container\">\n                    <h1>{t(\"job_offer.title\")}</h1>\n                </div>\n                <NavigationLight menus={FakeData.posts_menu} menuLink={route.jobOffer.root}/>\n\n                <section className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-lg-9\">\n                            <div className=\"row mb-3\">\n                                <div className=\"col-auto mr-auto\">\n                                    <NavLink to={route.jobOffer.add_new} className=\"btn btn-primary\" exact>\n                                        <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                        {t('add_new_job.title')}\n                                    </NavLink>\n                                </div>\n                                <div className=\"col-auto\">\n                                    <div className=\"input-group\">\n                                        <input type=\"text\" className=\"form-control\"\n                                               placeholder={t('job_offer.find_job_offer')}\n                                               aria-label={t('job_offer.find_job_offer')}\n                                               aria-describedby=\"button-addon2\"\n                                               value={search} onChange={(e) => {\n                                            setSearch(e.target.value);\n                                            handleSearch();\n                                        }}/>\n                                        <div className=\"input-group-append\">\n                                            <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                                <span className=\"sr-only\">Icon</span>\n                                                <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"mt-4\">\n                                {\n                                    props.loading || props.loadingGetDomaine ?\n                                        <Loader/> :\n\n                                        props.resultGetDomaine !== null &&\n                                        props.result !== null &&\n                                        <JobOfferList jobs={search !== '' ? jobsFilter : props.result}/>\n\n                                }\n                            </div>\n\n                        </div>\n                        <aside className=\"col-12 col-lg-3\">\n                            <PostWidget categories={FakeData.post_widget_data}/>\n                            <AboutOpenRHWidget/>\n                            <ArchiveWidget/>\n                        </aside>\n                    </div>\n                </section>\n            </div>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsReducer.loading,\n    result: state.getAllPostsReducer.result,\n    error: state.getAllPostsReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(JobOffer));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\SignIn\\index.js",["956","957","958","959","960","961"],"import React, {useState, useEffect} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {Images} from \"../../config/Images\";\nimport TitleUnderlined from \"../../components/TitleUnderlined\";\nimport {NavLink} from \"react-router-dom\";\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {useHistory} from 'react-router-dom';\nimport {useForm} from \"react-hook-form\";\nimport {signInAction, signInReset} from \"../../redux/api/SignInApi\";\nimport {Input} from '../../components/Input';\n\nlet route = require('../../utils/route');\n\nfunction SignIn(props) {\n    const {t} = useTranslation();\n    const {register, handleSubmit, errors} = useForm();\n    const [login, setLogin] = useState('');\n    const [password, setPassword] = useState('');\n    const [hasErrorExecution, setHasErrorExecution] = useState(false);\n    const [isSubmit, setIsSubmit] = useState(false);\n    let history = useHistory();\n\n    useEffect(() => {\n        if (props.result !== null) {\n            localStorage.setItem('USER', JSON.stringify(props.result));\n            history.push(route.home.root);\n        }\n\n    }, [props]);\n\n    const onLogin = () => {\n        console.log(errors);\n        console.log(\"data checked\",password);\n        props.signInAction(login, password)\n    };\n\n\n    console.log(props);\n    return (\n        <div className=\"container\">\n            <div className=\"row justify-content-md-center\">\n                <div className=\"col-8\">\n                    <div className=\"shadow bg-white rounded\">\n                        <div className=\"row\">\n                            <div className=\"col-6 p-0\">\n                                <img src={Images.signInBanner} className=\"img-fluid\" alt=\"Sign In Banner\"/>\n                            </div>\n                            <div className=\"col-6\">\n                                <div className=\"pl-2 pr-4 pt-4 pb-4 mt-2 mb-5\">\n                                    <div className=\"col-12 p-0\">\n                                        <TitleUnderlined\n                                            customClass=\"mb-2 mb-xl-3\">{t('signin.title')}</TitleUnderlined>\n                                    </div>\n                                    <form className=\"mt-4\" onSubmit={handleSubmit(onLogin)}>\n\n                                        <Input wrapperClass=\"form-group mb-4\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"login\"\n                                               ref={register({required: true})}\n                                               id=\"login\"\n                                               value={login}\n                                               onChange={(e) => setLogin(e.target.value)}\n                                               error={errors.hasOwnProperty(\"login\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('common.ccuid')}\n                                               placeholder={t('signin.enter_ccuid')}/>\n\n                                        <Input wrapperClass=\"form-group mb-4\"\n                                               inputClass=\"form-control\"\n                                               type=\"password\"\n                                               name=\"password\"\n                                               ref={register({required: true})}\n                                               id=\"password\"\n                                               value={password}\n                                               onChange={(e) => setPassword(e.target.value)}\n                                               error={errors.hasOwnProperty(\"password\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('common.password')}\n                                               placeholder={t('signin.enter_password')}/>\n\n                                        <div className=\"custom-control custom-checkbox mb-4\">\n                                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"submitButton\"/>\n                                            <label className=\"custom-control-label\"\n                                                   htmlFor=\"exampleCheck1\">{t('signin.remember_me')}</label>\n                                        </div>\n\n                                        {\n                                            props.loading ?\n                                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                                </button> :\n                                                <button className=\"btn btn-primary\"\n                                                        onClick={() => handleSubmit(onLogin)}>\n                                                    {t('signin.connect')}\n                                                </button>\n                                        }\n\n\n                                        {\n                                            props.error !== null &&\n                                            <div className=\"alert alert-danger mt-1\" role=\"alert\">\n                                                <span className=\"alert-icon\"><span\n                                                    className=\"sr-only\">Danger</span></span>\n                                                <p>{props.error.data}</p>\n                                            </div>\n                                        }\n                                    </form>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.signInReducer.loading,\n    result: state.signInReducer.result,\n    error: state.signInReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    signInAction,\n    signInReset\n\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignIn);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\FAQ\\index.js",["962","963","964","965","966","967","968","969","970","971"],"import React, {useEffect, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {useHistory, useParams, withRouter} from \"react-router-dom\";\nimport {FakeData} from \"../../fakeData\";\nimport PostWidget from \"../../components/PostWidget\";\nimport {\n    getAllPostsAction,\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n    getAllPostsReset\n} from \"../../redux/api/PostsApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport Loader from \"../../components/Loader\";\nimport AboutOpenRHWidget from \"../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../components/ArchiveWidget\";\nimport {Input} from \"../../components/Input\";\nimport {useForm} from \"react-hook-form\";\nimport {Helmet} from \"react-helmet\";\nimport {getAllFaqAction, getAllFaqReset, postFaqAction, postFaqReset} from \"../../redux/api/FaqApi\";\nimport {Constant} from \"../../config/Constant\";\nimport * as moment from \"moment\";\nimport {toast} from \"react-toastify\";\nimport FaqList from \"../../components/FaqList\";\nimport * as Utils from \"../../utils\";\nimport $ from \"jquery\";\n\nlet route = require('../../utils/route');\n\nfunction Faq(props) {\n    const {t} = useTranslation();\n    let history = useHistory();\n    const {register, handleSubmit, errors} = useForm();\n    const [search, setSearch] = useState('');\n    const [faqFilter, setFaqFilter] = useState(null);\n    let {id, page, domaine} = useParams();\n    const [answer, setAnswer] = useState('');\n    const [question, setQuestion] = useState('');\n    const [thematique, setThematique] = useState(1);\n\n    console.log(\"PROPS PROPS PROPS\", props.result);\n    useEffect(() => {\n        props.getAllFaqReset();\n        props.getAllFaqAction();\n    }, []);\n\n    const handleSearch = () => {\n        if (props.result)\n            setFaqFilter(props.result.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase())));\n    };\n\n    const onSubmitFaq = () => {\n        props.postFaqAction({\n            rhContentTitle: question,\n            rhContentDescription: \"\",\n            rhContentCategoryId: Constant.faqID,\n            rhContentDomaineId: Constant.othersDomaineID,\n            rhContentDatePublish: moment(new Date()).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId\n        });\n    };\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.resultPostFaq !== null) {\n            toast.dark(t('faq.success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.go(0);\n            props.postFaqReset();\n        }\n        if (props.errorPostFaq !== null) {\n            toast.error(props.errorPostFaq, {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.postFaqReset();\n        }\n    }, [props]);\n\n    useEffect(() => {\n        if ($(\"body\").hasClass('bg-gray'))\n            $(\"body\").removeClass(\"bg-gray\");\n    });\n\n    const renderModalAddFaq = () => (\n        <div className=\"modal fade\" id=\"addFaqModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addFaqModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addFaqModalLabel\">{t('faq.new_faq')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitFaq)}>\n\n                                    {/*                                    <div className=\"col-12\">\n                                        <label htmlFor=\"postThematique\"\n                                               className=\"is-required\">{t('common.thematique')}</label>\n                                        {\n                                            props.loadingGetDomaine ?\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\" disabled>\n                                                </select> :\n                                                props.resultGetDomaine !== null &&\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\"\n                                                        onChange={event => setThematique(event.target.value)}>\n                                                    {\n                                                        props.resultGetDomaine.map((domaine, index) => (\n                                                            <option value={domaine.rhContentDomaineId}\n                                                                    key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                        ))\n                                                    }\n                                                </select>\n                                        }\n\n                                    </div>*/}\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"question\"\n                                               required\n                                               ref={register({required: true, maxLength: 255})}\n                                               id=\"question\"\n                                               value={question}\n                                               onChange={(e) => setQuestion(e.target.value)}\n                                               error={errors.hasOwnProperty(\"question\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('faq.question')}\n                                               maxLength=\"255\"\n                                        />\n\n                                    </div>\n\n                                    {/*                                    <div className=\"col-12\">\n                                        <TextArea wrapperClass=\"form-group\"\n                                                  inputClass=\"form-control\"\n                                                  name=\"answer\"\n                                                  required\n                                                  style={{height: \"106px\"}}\n                                                  ref={register({required: true})}\n                                                  id=\"answer\"\n                                                  value={answer}\n                                                  onChange={(e) => setAnswer(e.target.value)}\n                                                  error={errors.hasOwnProperty(\"answer\")}\n                                                  errorText={t('error.required_field')}\n                                                  labelText={t('faq.answer')}\n                                        />\n                                    </div>*/}\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingPostFaq ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitFaq)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t('faq.title')}`}</title>\n            </Helmet>\n            <div className=\"my-5\">\n                <div className=\"container\">\n                    <h1>{t(\"faq.title\")}</h1>\n                </div>\n                {/*\n                <NavigationLight menus={FakeData.posts_menu} menuLink={route.faq.root}/>\n*/}\n\n                {renderModalAddFaq()}\n\n                <section className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-12 col-lg-9\">\n                            <div className=\"row mb-3\">\n                                <div className=\"col-auto mr-auto\">\n                                    <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                            data-target=\"#addFaqModal\">\n                                        <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                        {t('faq.new_faq')}\n                                    </button>\n                                </div>\n                                <div className=\"col-auto\">\n                                    <div className=\"input-group\">\n                                        <input type=\"text\" className=\"form-control\" placeholder={t('posts.find_post')}\n                                               aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                               value={search} onChange={(e) => {\n                                            setSearch(e.target.value);\n                                            handleSearch();\n                                        }}/>\n                                        <div className=\"input-group-append\">\n                                            <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                                <span className=\"sr-only\">Icon</span>\n                                                <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                            </button>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div className=\"mt-4\">\n                                {\n                                    <div className=\"media-body\">\n                                        {\n                                            props.loading ?\n                                                <Loader/> :\n                                                props.result !== null ?\n                                                    <FaqList faqs={search !== '' ? faqFilter : props.result}/> :\n\n                                                    (props.error !== null) &&\n                                                    <div className=\"alert alert-danger\" role=\"alert\">\n                                                        <span className=\"alert-icon\">\n                                                            <span className=\"sr-only\">Info</span>\n                                                        </span>\n                                                        <p>{t(Utils.displayErrorRequest(props.error))}</p>\n                                                    </div>\n                                        }\n                                    </div>\n                                }\n                            </div>\n\n                        </div>\n                        <aside className=\"col-12 col-lg-3\">\n                            <PostWidget categories={FakeData.post_widget_data}/>\n                            <AboutOpenRHWidget/>\n                            <ArchiveWidget/>\n                        </aside>\n                    </div>\n                </section>\n            </div>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.getAllFaqReducer.loading,\n    result: state.getAllFaqReducer.result,\n    error: state.getAllFaqReducer.error,\n\n    loadingPostFaq: state.postFaqReducer.loading,\n    resultPostFaq: state.postFaqReducer.result,\n    errorPostFaq: state.postFaqReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n\n    postFaqAction,\n    postFaqReset,\n\n    getAllFaqAction,\n    getAllFaqReset,\n\n    getAllPostsAction,\n    getAllPostsReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Faq));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Blog\\BlogDetail\\index.js",["972","973","974","975","976","977"],"import React, {useEffect, useState, useCallback} from 'react';\nimport {withRouter, useParams, NavLink} from 'react-router-dom';\nimport NavigationLight from \"../../../components/NavigationLight\";\nimport {FakeData} from \"../../../fakeData\";\nimport {useTranslation} from \"react-i18next\";\nimport PostWidget from \"../../../components/PostWidget\";\nimport Comments from \"../../../components/Comments\";\nimport CommentField from \"../../../components/CommentField\";\nimport AboutOpenRHWidget from \"../../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../../components/ArchiveWidget\";\nimport {getPostByIdAction, getPostByIdReset} from \"../../../redux/api/PostsApi\";\nimport {bindActionCreators} from 'redux';\nimport {connect} from \"react-redux\";\nimport Interweave from \"interweave\";\nimport \"./style.css\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport Loader from \"../../../components/Loader\";\nimport {Helmet} from \"react-helmet\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faComment} from '@fortawesome/free-solid-svg-icons';\nimport {faEye} from '@fortawesome/free-solid-svg-icons';\nimport {faUser} from '@fortawesome/free-solid-svg-icons';\nimport {faFolder} from '@fortawesome/free-solid-svg-icons';\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\nimport _ from 'lodash';\nimport {postFaqAction} from \"../../../redux/api/FaqApi\";\nimport {Config} from \"../../../config/ServerConfig\";\nimport SocialShare from \"../../../components/SocialShare\";\n\nlet route = require('../../../utils/route');\n\nfunction BlogDetail(props) {\n    moment.locale(\"fr\");\n    const {t} = useTranslation();\n    let {id, page, domaine} = useParams();\n    const [post, setPost] = useState({});\n    const [, updateState] = useState();\n    const forceUpdate = useCallback(() => updateState({}), []);\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getPostByIdAction(id);\n        /*        if (props.location.post === undefined) {\n                    props.getAllDomaineAction();\n                    props.getPostByIdAction(id);\n                } else\n                    setPost(props.location.post);*/\n\n    }, []);\n    useEffect(()=> {\n        window.$(\".img-post\").initImageNotLoadPlaceHolder();\n    });\n\n    const renderPost = (post) => (\n        <>\n            <div className=\"mt-3\">\n                <div className=\"d-flex justify-content-between p-2\">\n                    <div className=\"mb-1 text-muted mr-2 pt-2\">\n                        <FontAwesomeIcon icon={faComment} className=\"mr-1\"/>\n                       \n                       {post.comments.length} commentaires\n                    </div>\n\n                    <div className=\"mb-1 text-muted mr-2 pt-2\">\n                        <FontAwesomeIcon icon={faEye} className=\"mr-1\"/>\n                        2 vues\n                    </div>\n\n                    <div>\n                        <SocialShare/>\n                    </div>\n                </div>\n                <hr/>\n                <div className=\"mt-4\">\n                    <Interweave content={post.rhContentDescription}/>\n                </div>\n            </div>\n\n        </>\n    );\n\n    const renderHeader = (post) => {\n        const domaine = props.resultGetDomaine.filter(domaine => domaine.rhContentDomaineId === post.rhContentDomaineId)[0];\n        console.log(\"POST\", post.user);\n        return (\n            <div className=\"col-lg-12 col-md-12 col-sm-12 post-title-block\">\n\n                <h1 className=\"text-center text-white\">{post.rhContentTitle}</h1>\n                <ul className=\"list-inline d-flex justify-content-center text-center text-white\">\n                    <li>\n                        <FontAwesomeIcon icon={faFolder} className=\"mr-1\"/>\n                        <NavLink\n                            to={{\n                                pathname: `${route.blog.root}/${post.rhContentDomaineId}/`,\n                                post\n                            }}\n                            role=\"button\"\n                            className=\"text-white font-weight-bold\">\n                            {!_.isNil(domaine) && domaine.rhContentDomaineName}\n                        </NavLink> |&nbsp;&nbsp;&nbsp;\n                    </li>\n                    <li>\n                        <FontAwesomeIcon icon={faUser} className=\"mr-1\"/>\n                        {post.user.userName} |&nbsp;&nbsp;</li>\n                    <li className=\"mb-1 mr-2\">\n                        <span className=\"icon icon-calendar-day mr-1\" aria-hidden=\"true\"></span>\n                        {moment(post.rhContentDatePublish).format(\"lll\")}\n                    </li>\n                </ul>\n            </div>\n        );\n    };\n\n    useEffect(() => {\n        if (props.result !== null) {\n            setPost(props.result);\n        }\n    }, [props]);\n\n    console.log(\"rh content domaine\", props.resultGetDomaine);\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${post.rhContentTitle}`}</title>\n            </Helmet>\n\n            <section className=\"banner-section\"\n                     style={{backgroundImage: `url(${!_.isNil(post.rhContentPrincipalLink) ? (Config.imageFolder + post.rhContentPrincipalLink) : \"https://picsum.photos/1920/400\"})`}}>\n            </section>\n            <div className=\"container\">\n                <div className=\"row\">\n                    {\n                        props.location.post === undefined ?\n                            props.loading ?\n                                <Loader/>\n                                : (props.result !== null && props.resultGetDomaine) ?\n                                renderHeader(props.result) :\n                                null :\n                            null\n                    }\n                </div>\n            </div>\n\n            <div className=\"mb-5\" style={{marginTop: \"120px\"}}>\n                {/*\n                <NavigationLight menus={FakeData.posts_menu} menuLink={route.post.root}/>\n*/}\n\n                <section className=\"container\">\n                    <div className=\"row\">\n                        {\n                    console.log(\"data\",post)\n\n                        }\n\n                        <div className=\"col-12 col-lg-8\" id=\"post\">\n                            {\n                                props.location.post === undefined ?\n                                    props.loading ?\n                                        <Loader/>\n                                        : props.result !== null ?\n                                        renderPost(props.result) :\n                                        null :\n                                    renderPost(props.result)\n                            }\n\n                            <div id=\"comments\">\n                                {\n                                    !_.isEmpty(post) &&\n                                    <>\n                                        <h3 className=\"h2 mt-5\">{t('comment.commentaires')}</h3>\n                                        {\n                                            (post.comments !== null && post.comments !== undefined) ?\n                                                <Comments comments={post.comments}/> :\n                                                <p className=\"lead\">{t('comment.no_comment')}</p>\n                                        }\n                                        <CommentField postID={props.match.params.id}/>\n                                    </>\n                                }\n                            </div>\n\n                        </div>\n\n                        <aside className=\"col-12 col-lg-3\">\n                            <PostWidget categories={FakeData.post_widget_data}/>\n                            <AboutOpenRHWidget/>\n                            <ArchiveWidget/>\n                        </aside>\n                    </div>\n                </section>\n            </div>\n\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.getPostByIdReducer.loading,\n    result: state.getPostByIdReducer.result,\n    error: state.getPostByIdReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getPostByIdAction,\n    getPostByIdReset,\n    getAllDomaineAction,\n\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BlogDetail));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\HeaderAdmin\\index.js",["978","979","980","981","982","983","984","985","986"],"import React, {useEffect} from 'react';\nimport {Images} from \"../../config/Images\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, withRouter} from \"react-router-dom\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport LanguageSwitcher from \"../LanguageSwitcher\";\nimport ProfileDropdown from \"../ProfileDropdown\";\nimport NotificationDropdown from \"../NotificationDropdown\";\nimport * as Utils from \"../../utils\";\nimport './style.css'\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {\n    faComment,\n    faFileAlt,\n    faFileSignature,\n    faNewspaper,\n    faQuestionCircle, faSpellCheck,\n    faTachometerAlt,\n    faThLarge\n} from \"@fortawesome/free-solid-svg-icons\";\nimport $ from \"jquery\";\n\nlet route = require('../../utils/route');\n\nfunction HeaderAdmin(props) {\n    console.log(\"URL\", props.location);\n    const {result} = props;\n    const {t} = useTranslation();\n    const {pathname} = props.location;\n    const matchWorkaround = (pathname) => (isMatch, location) => isMatch || location.pathname.includes(pathname);\n    const matchWorkForHome = (match, location) => {\n        return route.menu_header_admin.map((menu, index) => {\n            if (location.pathname.includes(menu.link))\n                return true;\n            else\n                return false;\n        });\n    };\n\n    useEffect(() => {\n/*        window.$(\".dropdown-toggle\").initDropdownToggleHover();\n        window.$(\".dropdown-toggle\").initDropdownToggleHover();*/\n    });\n\n    const matchWorkForDashboard = (match, location) => {\n        return location.pathname.includes(route.admin_space[0].link);\n    };\n\n    const renderIcon = (icon) => {\n        switch (icon) {\n            case 'tachometer-alt':\n                return faTachometerAlt;\n            case 'file-signature':\n                return faFileSignature;\n            case 'file-alt':\n                return faFileAlt;\n            case 'newspaper':\n                return faNewspaper;\n            case 'comment':\n                return faComment;\n            case 'question-circle':\n                return faQuestionCircle;\n            case 'spell-check':\n                return faSpellCheck;\n            case 'th-large':\n                return faThLarge;\n            default:\n                return faTachometerAlt;\n        }\n    }\n\n    const NavAdmin = () => (\n        <>\n            <nav className=\"navbar navbar-dark navbar-expand-md\" role=\"navigation\">\n                <div className=\"container-fluid flex-sm-wrap justify-content-start\">\n                    <a className=\"navbar-brand\" href=\"#\">\n                        <img src={Images.logo} className=\"d-inline-block align-bottom mr-1\"\n                             loading=\"lazy\"\n                             alt=\"Back to homepage\" title=\"Back to homepage\" width=\"50\" height=\"50\" loading=\"lazy\"/>\n                        {/* <span className=\"h1 mb-0\">{t('app.name')}</span> */}\n                        <img src={Images.openRH1} className=\"w-100px d-inline-block align-bottom mr-1\"\n                            loading=\"lazy\"\n                            alt={t(\"app.name\")} title={t(\"app.name\")} loading=\"lazy\"/>\n                        \n                    </a>\n                    <button className=\"navbar-toggler d-sm-block d-md-none mb-md-0 mt-md-auto ml-auto ml-md-3 collapsed\"\n                            type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsing-navbar11\"\n                            aria-controls=\"collapsing-navbar11\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                        <span aria-hidden=\"true\" className=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <ul className=\"navbar-nav d-none d-md-flex ml-auto\">\n                        <li className=\"nav-item\">\n                            <a href=\"#\" className=\"nav-link nav-icon svg-search\">\n                                <span className=\"sr-only\">Search bar</span>\n                            </a>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n\n            <div className=\"navbar navbar-dark navbar-expand-md bg-dark flex-sm-wrap p-0\">\n                <hr className=\"w-100 m-0 d-none d-md-block border-700\"/>\n                <div className=\"container-fluid border-bottom\">\n                    <div className=\"navbar-collapse collapse\" id=\"collapsing-navbar11\">\n                        <ul className=\"navbar-nav\">\n                            {\n                                Utils.isConnected() ?\n                                    route.admin_space.map((menu, index) => (\n                                        menu.hasOwnProperty('sub_menu') ?\n                                            <li className=\"nav-item dropdown\" key={`menu-${index}`}>\n                                                <a href=\"#\"\n                                                         className=\"nav-link dropdown-toggle\" data-toggle=\"dropdown\"\n                                                   role=\"button\" id=\"dropdownMenu\">\n                                                    <FontAwesomeIcon icon={renderIcon(menu.icon)}\n                                                                     className=\"feather mr-1\"/>\n                                                    {t(menu.title)}\n                                                </a>\n                                                <div className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu\">\n                                                    {\n                                                        menu.sub_menu.map((menuItem) => (\n                                                            <NavLink to={menuItem.link} className=\"dropdown-item\"\n                                                                     aria-expanded\n                                                                     isActive={matchWorkaround(menuItem.link)}\n                                                                     activeClassName=\"\"\n                                                                     activeStyle={{\n                                                                         color: 'var(--orange)'\n                                                                     }}\n                                                                     exact>\n                                                                {t(menuItem.title)}\n                                                            </NavLink>\n                                                        ))\n                                                    }\n                                                </div>\n                                            </li>\n                                            :\n                                            <li className=\"nav-item\" key={index}>\n                                                <NavLink\n                                                    to={{\n                                                        pathname: menu.link\n                                                    }}\n                                                    className=\"nav-link\"\n                                                    /*isActive={matchWorkaround(menu.link)}*/\n                                                    activeClassName=\"\"\n                                                    activeStyle={{\n                                                        color: 'var(--orange)'\n                                                    }}\n                                                    exact>\n                                                    <FontAwesomeIcon icon={renderIcon(menu.icon)}\n                                                                     className=\"feather mr-1\"/>\n                                                    {t(menu.title)}\n                                                </NavLink>\n                                            </li>\n                                    ))\n                                    : null\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n\n    return (\n        <header role=\"banner fixed-top\" id=\"admin-navbar\">\n            <nav role=\"navigation\" className=\"navbar navbar-light bg-white navbar-expand-md supra\"\n                 aria-label=\"Complementary navigation\">\n                <div className=\"container-fluid\">\n                    <ul className=\"navbar-nav\">\n                        {\n                            (result !== null || Utils.isConnected()) &&\n                            Utils.isAdmin() ?\n                                route.admin_url.map((menu, index) => (\n                                    <li className=\"nav-item\" key={index}>\n                                        <NavLink to={menu.link} className=\"nav-link\"\n                                                 isActive={index === 0 ? false : matchWorkForDashboard}\n                                                 exact>\n                                            {t(menu.title)}\n                                        </NavLink>\n                                    </li>\n                                )) :\n                                route.user_admin_url.map((menu, index) => (\n                                    <li className=\"nav-item\" key={index}>\n                                        <NavLink to={menu.link} className=\"nav-link\"\n                                                 isActive={index === 0 ? false : matchWorkForDashboard}\n                                                 exact>\n                                            {t(menu.title)}\n                                        </NavLink>\n                                    </li>\n                                ))\n                        }\n                    </ul>\n                    <ul className=\"navbar-nav ml-auto\">\n                        <NotificationDropdown/>\n                        <ProfileDropdown/>\n                        <LanguageSwitcher/>\n                    </ul>\n                </div>\n            </nav>\n            <NavAdmin/>\n\n        </header>\n    )\n}\n\nconst mapstateToProps = state => ({\n    result: state.signInReducer.result,\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({}, dispatch);\n\nexport default withRouter(connect(mapstateToProps, mapDispatchToProps)(HeaderAdmin));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\layout\\GlossaryLayout\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\index.js",["987","988","989","990","991","992","993","994","995","996","997","998"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport {Constant} from \"../../../config/Constant\";\nimport {getAllPostsAction, getAllPostsReset} from \"../../../redux/api/PostsApi\";\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\nimport {validatePublicationAction, validatePublicationReset} from \"../../../redux/api/ValidationApi\";\nimport {postFaqAction, postFaqReset} from \"../../../redux/api/FaqApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport * as Utils from \"../../../utils\";\nimport Interweave from \"interweave\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport {Config} from \"../../../config/ServerConfig\";\nimport DataTable from 'react-data-table-component';\nimport CustomMaterialMenu from \"../../../components/CustomMaterialMenu\";\nimport DataTableComponent from \"../../../components/DataTable\";\nimport Checkbox from \"@material-ui/core/Checkbox/Checkbox\";\nimport ReactPlayer from \"react-player\";\n\nlet route = require('../../../utils/route');\n\nfunction AdminBlog(props) {\n    console.log('Admin post');\n    const {t} = useTranslation();\n    const [search, setSearch] = useState('');\n    const [isLoading, setIsLoading] = useState(true);\n    const [blogsPublished, setBlogsPublished] = useState([]);\n    const [blogsWaiting, setBlogsWaiting] = useState([]);\n    const [blogsExpired, setBlogsExpired] = useState([]);\n    const [blogsDeleted, setBlogsDeleted] = useState([]);\n    const [tabsActiveIndex, setTabsActiveIndex] = useState(0);\n    const [blog, setBlog] = useState([]);\n    let history = useHistory();\n\n    const columns = [\n        {\n            name: t('common.status'),\n            selector: 'rhContentIsOK',\n            width: '56px',\n            sortable: true,\n            cell: post => post.rhContentIsOK ?\n                <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n        },\n        {\n            name: t('add_post.title'),\n            selector: 'rhContentTitle',\n            sortable: true,\n        },\n        {\n            name: t('add_post.contenu'),\n            selector: 'rhContentDescription',\n            sortable: false,\n            width: \"35%\",\n            cell: d => Utils.cutString(Utils.removeTag(d.rhContentDescription), 150)\n        },\n        {\n            name: t('add_post.publication_date'),\n            selector: 'rhContentDateCeated',\n            width: '200px',\n            sortable: true,\n            format: d => moment(d.rhContentDateCeated).format(\"lll\")\n        },\n        {\n            name: t('common.author'),\n            selector: 'user.userName',\n            width: '170px',\n            sortable: true,\n        }, {\n            name: t('common.domain'),\n            selector: 'rhContentDomaine',\n            width: '150px',\n            sortable: true,\n            cell: post => post.rhContentDomaine !== null ? post.rhContentDomaine.rhContentDomaineName : ''\n        },\n        {\n            name: t('add_post.image_ellipsed'),\n            selector: 'rhContentPrincipalLink',\n            grow: 0,\n            cell: post =>\n                !_.isNil(post.rhContentPrincipalLink) ?\n                    Utils.isImageFileUrl(post.rhContentPrincipalLink) ?\n                        <img className=\"rounded mx-auto d-block img-post\" height=\"auto\" width=\"100%\"\n                             loading=\"lazy\"\n                             src={Config.imageFolder + post.rhContentPrincipalLink}/>\n                        :\n                        <ReactPlayer\n                            className=\"img-fluid img-reponsive video-preview\"\n                            width=\"100%\"\n                            height=\"auto\"\n                            url={Config.imageFolder + post.rhContentPrincipalLink}\n                        />\n                    : <img className=\"rounded mx-auto d-block\" height=\"auto\" width=\"100%\"\n                           loading=\"lazy\"\n                           src=\"https://picsum.photos/200/200\"/>\n        },\n        {\n            cell: row => <CustomMaterialMenu size=\"small\" row={row}\n                                             firstButtonText={t('common.edit')}\n                                             secondButtonText={t('common.unpublish')}\n                                             secondButtonAction={() => {\n                                                 props.getAllPostsAction(Constant.publicationID);\n                                             }}\n                                             firstButtonAction={() => {\n                                                 history.push({\n                                                     pathname: `${route.post.edit_post}/${row.rhContentId}`\n                                                 })\n                                             }\n                                             }/>,\n            allowOverflow: true,\n            button: true,\n            width: '56px',\n        }\n\n    ];\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllPostsReset();\n        props.getAllPostsAction(Constant.blogID);\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null && props.error === null) {\n            setBlogsPublishedAction();\n            setBlogsDeleted(props.result.filter((post) => !post.rhContentIsOK));\n            setBlogsWaiting(props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDate = moment(post.rhContentDateCeated).format('lll');\n                return moment(currentDate).isBefore(postDate);\n            }));\n            setBlogsExpired(props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDateExpired = moment(post.rhContentDateOnPublish).format('lll');\n                return moment(postDateExpired).isBefore(currentDate);\n\n            }));\n            setTimeout(() => {\n                window.$(\".video-preview video\").initVideoLoader();\n                window.$(\".img-post\").initImageNotLoadPlaceHolder();\n            }, 500);\n        }\n\n    }, [props]);\n\n    useEffect(() => {\n        if (props.result !== null) setIsLoading(false);\n        else setIsLoading(true);\n    }, [blog]);\n\n    const setBlogsPublishedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => post.rhContentIsOK);\n            setBlog(tempPosts);\n            setBlogsPublished(tempPosts);\n        }\n    };\n\n    const setBlogsWaitingAction = () => {\n        console.log('waiting click');\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDate = moment(post.rhContentDateCeated).format('lll');\n                return moment(currentDate).isBefore(postDate);\n            });\n            setBlog(tempPosts);\n            setBlogsWaiting(tempPosts);\n            setTabsActiveIndex(1);\n        }\n    };\n\n    const setBlogsExpiredAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDateExpired = moment(post.rhContentDateOnPublish).format('lll');\n                return moment(postDateExpired).isBefore(currentDate);\n\n            });\n            setBlog(tempPosts);\n            setBlogsExpired(tempPosts);\n            setTabsActiveIndex(2);\n        }\n    };\n\n    const setBlogsDeletedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => !post.rhContentIsOK);\n            setBlog(tempPosts);\n            setBlogsDeleted(tempPosts);\n            setTabsActiveIndex(3);\n        }\n    };\n\n    const handleSearch = () => {\n        console.log(search);\n        if (props.result !== null)\n            setBlog(props.result.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase())))\n\n    };\n\n    const ExpandedComponent = ({data}) => <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n\n    const renderBlogTable = (data) => (\n        <DataTableComponent\n            columns={columns}\n            data={!isLoading ? data : []}\n            progressPending={props.loading}\n            defaultSortField=\"name\"\n            loading={props.loading || isLoading}\n            selectableRowsComponent={Checkbox}\n            onRowClicked={(post) => history.push({\n                pathname: `${route.blog.edit_blog}/${post.rhContentId}`\n            })}\n            expandableRows={false}\n            expandableRowsComponent={<ExpandedComponent/>}\n        />\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('navigation.blog')}`}</title>\n                </Helmet>\n                <h1>{t(\"blog.title\")}</h1>\n\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className=\"row mb-3\">\n                            <div className=\"col-auto mr-auto\">\n                                <NavLink to={route.blog.add_new} className=\"btn btn-primary\" exact>\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('blog.new_blog')}\n                                </NavLink>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('posts.find_post')}\n                                           aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <ul className=\"nav nav-tabs nav-tabs-light\">\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 0 && \"active\"}`}\n                                       onClick={() => {\n                                           setBlogsPublishedAction();\n                                           setTabsActiveIndex(0);\n                                       }}>{`${t('common.published')} (${blogsPublished.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 1 && \"active\"}`}\n                                       onClick={() => setBlogsWaitingAction()}>{`${t('common.waiting')} (${blogsWaiting.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 2 && \"active\"}`}\n                                       onClick={() => setBlogsExpiredAction()}>{`${t('common.expired')} (${blogsExpired.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 3 && \"active\"}`}\n                                       onClick={() => setBlogsDeletedAction()}>{`${t('common.deleted')} (${blogsDeleted.length})`}</a>\n                                </li>\n                            </ul>\n                            <div className=\"media-body\">\n                                {renderBlogTable(blog)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsReducer.loading,\n    result: state.getAllPostsReducer.result,\n    error: state.getAllPostsReducer.error,\n\n    loadingPostGlossary: state.postGlossaryReducer.loading,\n    resultPostGlossary: state.postGlossaryReducer.result,\n    errorPostGlossary: state.postGlossaryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    getAllDomaineAction,\n    validatePublicationAction,\n    validatePublicationReset,\n\n    postFaqAction,\n    postFaqReset,\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminBlog));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Blog\\index.js",["999","1000","1001","1002","1003","1004","1005","1006","1007"],"import React, {useEffect, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport NavigationLight from \"../../components/NavigationLight\";\nimport {FakeData} from \"../../fakeData\";\nimport PostList from \"../../components/PostList\";\nimport PostWidget from \"../../components/PostWidget\";\nimport {\n    getAllPostsByDomaineReset,\n    getAllPostsByDomaineAction,\n    getAllPostsAction,\n    getAllPostsReset\n} from \"../../redux/api/PostsApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport Loader from \"../../components/Loader\";\nimport AboutOpenRHWidget from \"../../components/AboutOpenRHWidget\";\nimport ArchiveWidget from \"../../components/ArchiveWidget\";\nimport BlogLayout from \"../../layout/BlogLayout\";\nimport * as Utils from \"../../utils\";\nimport BlogList from \"../../components/BlogList\";\nimport {Constant} from \"../../config/Constant\";\nimport {Helmet} from \"react-helmet\";\nimport $ from \"jquery\";\nimport SecondaryNavigation from \"../../components/SecondaryNavigation\";\nimport {getAllBlogAction, getAllBlogReset} from \"../../redux/api/BlogApi\";\n\nlet route = require('../../utils/route');\n\nfunction Blog(props) {\n    const {t} = useTranslation();\n    let history = useHistory();\n    const [search, setSearch] = useState('');\n    const [blogFilter, setBlogFilter] = useState(null);\n    let {id, page, domaine} = useParams();\n\n\n    useEffect(() => {\n        console.log(\"domaine\", domaine);\n        if (domaine === undefined && props.resultGetAllBlog === null && props.errorGetAllBlog == null) {\n            props.getAllBlogAction();\n        }\n\n    }, [props]);\n\n    useEffect(() => {\n        const {pathname} = props.location;\n        props.getAllPostsByDomaineReset();\n        if(domaine !== undefined)\n        props.getAllPostsByDomaineAction(Constant.blogID, domaine);\n    }, [props.location.pathname]);\n\n    useEffect(() => {\n        $(\"body\").addClass(\"bg-gray\");\n    });\n\n    const handleSearch = () => {\n        if(domaine === undefined) {\n            if (props.result !== null)\n                setBlogFilter(props.result.filter((post) =>\n                    post.rhContentTitle.toLowerCase().includes(search.toLowerCase()) && post.rhContentPriorityLevel !== 1\n                ));\n        } else {\n            if (props.resultGetAllBlog !== null)\n                setBlogFilter(props.resultGetAllBlog.filter((post) =>\n                    post.rhContentTitle.toLowerCase().includes(search.toLowerCase()) && post.rhContentPriorityLevel !== 1\n                ));\n        }\n\n    };\n\n    console.log(\"ERREUR\", props.error);\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t('navigation.blog')}`}</title>\n            </Helmet>\n\n            <div className=\"post-header pt-5 bg-white\">\n                <div className=\"container\">\n                    <h1>{t(\"blog.title\")}</h1>\n                </div>\n                <NavigationLight menuLink={route.blog.root} additionnalClasses categoryId={Constant.blogID}/>\n\n                <SecondaryNavigation data={props.result} menuLink={route.blog.root}/>\n            </div>\n\n            <section className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 col-lg-9\">\n                        <div className=\"row mb-3\">\n                            {/*                                <div className=\"col-auto mr-auto\">\n                                    <NavLink to={route.blog.add_new} className=\"btn btn-primary\" exact>\n                                        <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                        {t('blog.new_blog')}\n                                    </NavLink>\n                                </div>*/}\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('posts.find_post')}\n                                           aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            {\n                                props.loading || props.loadingGetDomaine ?\n                                    <Loader/> :\n                                    (\n                                        domaine !== undefined ?\n                                            (props.resultGetDomaine !== null && props.result !== null) ?\n                                                <BlogList blogs={search !== '' ? blogFilter : props.result}/> :\n\n                                                (props.errorGetDomaine !== null || props.error !== null) &&\n                                                <div className=\"alert alert-danger\" role=\"alert\">\n                                                <span className=\"alert-icon\"><span\n                                                    className=\"sr-only\">Info</span></span>\n                                                    <p>{t(Utils.displayErrorRequest(props.error))}</p>\n                                                </div>\n                                            :\n                                        (props.resultGetDomaine !== null && props.resultGetAllBlog !== null) ?\n                                            <BlogList blogs={search !== '' ? blogFilter : props.resultGetAllBlog}/> :\n\n                                            (props.errorGetDomaine !== null || props.errorGetAllBlog !== null) &&\n                                            <div className=\"alert alert-danger\" role=\"alert\">\n                                                <span className=\"alert-icon\"><span\n                                                    className=\"sr-only\">Info</span></span>\n                                                <p>{t(Utils.displayErrorRequest(props.errorGetAllBlog))}</p>\n                                            </div>\n                                    )\n\n\n                            }\n                        </div>\n\n                    </div>\n                    <aside className=\"col-12 col-lg-3\">\n                        <PostWidget categories={FakeData.post_widget_data}/>\n                        <AboutOpenRHWidget/>\n                        <ArchiveWidget/>\n                    </aside>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsByDomainReducer.loading,\n    result: state.getAllPostsByDomainReducer.result,\n    error: state.getAllPostsByDomainReducer.error,\n\n    loadingGetAllBlog: state.getAllBlogReducer.loading,\n    resultGetAllBlog: state.getAllBlogReducer.result,\n    errorGetAllBlog: state.getAllBlogReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n\n    getAllBlogAction,\n    getAllBlogReset,\n\n    getAllPostsAction,\n    getAllPostsReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Blog));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\BlogThematique\\index.js",["1008","1009","1010","1011","1012","1013","1014","1015","1016"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {useHistory, withRouter} from \"react-router-dom\";\nimport {getAllPostsAction, getAllPostsReset} from \"../../../../redux/api/PostsApi\";\nimport {\n    createThematiqueAction,\n    createThematiqueReset,\n    getAllDomaineAction,\n    getAllDomaineReset, modifyThematiqueAction, modifyThematiqueReset\n} from \"../../../../redux/api/DomaineApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport * as Utils from \"../../../../utils\";\nimport {Constant} from \"../../../../config/Constant\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport CustomMaterialMenu from \"../../../../components/CustomMaterialMenu\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DataTableComponent from \"../../../../components/DataTable\";\nimport {Input} from \"../../../../components/Input\";\nimport {useForm} from \"react-hook-form\";\nimport {\n    getAllCategoryAction,\n    getAllCategoryReset,\n    modifyCategoryAction,\n    modifyCategoryReset\n} from \"../../../../redux/api/CategoryApi\";\nimport {toast} from \"react-toastify\";\nimport $ from \"jquery\";\n\n\nlet route = require('../../../../utils/route');\n\nfunction BlogThematique(props) {\n    const {t} = useTranslation();\n    const [isModifyCategory, setIsModifyCategory] = useState(false);\n    const [idCategory, setIdCategory] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [search, setSearch] = useState('');\n    const [thematique, setThematique] = useState(\"\");\n    const [categories, setCategories] = useState([]);\n    const [categoriesPublished, setCategoriesPublished] = useState([]);\n    const [categoriesDeleted, setCategoryDeleted] = useState([]);\n    const [category, setCategory] = useState(5);\n    const [tabsActiveIndex, setTabsActiveIndex] = useState(0);\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n\n    const columns = [\n        {\n            name: t('common.status'),\n            selector: 'rhContentIsOK',\n            width: '100px',\n            sortable: true,\n            cell: post => post.rhContentDomaineState ?\n                <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n        },\n        {\n            name: t('add_post.title'),\n            selector: 'rhContentDomaineName',\n            sortable: true\n        },\n        {\n            name: t('add_post.publication_date'),\n            selector: 'rhContentDateCeated',\n            sortable: true,\n            format: d => moment(d.rhContentCategoryDateCreated).format(\"lll\")\n        },\n        {\n            name: t('common.actions'),\n            cell: row => <CustomMaterialMenu size=\"small\" row={row} firstButtonText={t('common.edit')}\n                                             secondButtonText={row.rhContentDomaineState ? t('common.unpublish') : t('common.publish')}\n                                             firstButtonAction={() => {\n                                                 setIsModifyCategory(true);\n                                                 setIdCategory(row.rhContentCategoryId);\n                                                 $('#category').val(row.rhContentCategoryName);\n                                                 $('#btnModal').trigger('click');\n                                                 $('.modal-title').html(t('common.categorie_modify'));\n                                                 $('.modal-footer .btn-primary').html(t('common.modify'));\n                                             }} secondButtonAction={() => {\n                props.modifyCategoryAction(row.rhContentCategoryId, {\n                    rhContentDomaineState: !row.rhContentDomaineState\n                });\n            }}/>,\n            allowOverflow: true,\n            button: true,\n        }\n\n    ];\n\n    useEffect(() => {\n        props.createThematiqueReset();\n        props.getAllDomaineAction();\n        //props.getAllCategoryAction();\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            setThematiquePublishedAction();\n            setCategoryDeleted(props.result.filter((post) => (!post.rhContentDomaineState && post.rhContentCategoryId === Constant.blogID)));\n        }\n    }, [props.result]);\n\n    useEffect(() => {\n        if (props.resultBlogThematique !== null) {\n            toast.dark(t('common.thematique_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            setTimeout(() => {\n                history.go(0);\n            }, Constant.toastDelay);\n            props.createThematiqueReset();\n        }\n        if (props.errorBlogThematique !== null) {\n            toast.error(Utils.displayErrorRequest(props.errorBlogThematique), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.createThematiqueReset();\n        }\n        \n        if (props.resultModifyThematique !== null) {\n            toast.dark(t('common.thematique_modify_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.go(0);\n            props.modifyCategoryReset();\n        }\n        if (props.errorModifyThematique !== null) {\n            toast.error(Utils.displayErrorRequest(props.errorModifyThematique), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.modifyCategoryReset();\n        }\n    }, [props]);\n\n    useEffect(() => {\n        if (props.result !== null) setIsLoading(false);\n        else setIsLoading(true);\n    }, [categories]);\n\n    const setThematiquePublishedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => (post.rhContentDomaineState && post.rhContentCategoryId === Constant.blogID));\n            console.log(\"Temp Post\", tempPosts);\n            setCategories(tempPosts);\n            setCategoriesPublished(tempPosts);\n        }\n    };\n\n    const setThematiqueDeletedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => (!post.rhContentDomaineState && post.rhContentCategoryId === Constant.blogID));\n            setCategories(tempPosts);\n            setCategoryDeleted(tempPosts);\n            setTabsActiveIndex(1);\n        }\n    };\n\n    const handleSearch = () => {\n        console.log(search);\n        if (props.result !== null)\n            setCategories(props.result.filter((post) => (post.rhContentDomaineName.toLowerCase().includes(search.toLowerCase()) && post.rhContentCategoryId === Constant.blogID)));\n\n    };\n\n    const onSubmitThematique = () => {\n        if (isModifyCategory) {\n            props.modifyThematiqueAction(idCategory, {\n                rhContentCategoryId: Constant.blogID,\n                rhContentDomaineState: true\n            });\n        } else {\n            props.createThematiqueAction({\n                rhContentDomaineName: thematique,\n                rhContentCategoryId: Constant.blogID,\n                rhContentDomaineState: true,\n            });\n        }\n    };\n\n\n    const ExpandedComponent = ({data}) => <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n    const renderPostTable = (data) => (\n        <DataTableComponent\n            columns={columns}\n            data={!isLoading ? data : []}\n            progressPending={props.loading}\n            defaultSortField=\"name\"\n            loading={props.loading || isLoading}\n            selectableRowsComponent={Checkbox}\n            onRowClicked={(category) => {\n                setIsModifyCategory(true);\n                setIdCategory(category.rhContentCategoryId);\n                $('#category').val(category.rhContentCategoryName);\n                $('#btnModal').trigger('click');\n                $('.modal-title').html(t('common.categorie_modify'));\n                $('.modal-footer .btn-primary').html(t('common.modify'));\n            }}\n            expandableRows={false}\n            expandableRowsComponent={<ExpandedComponent/>}\n        />\n    );\n\n    const renderModalAddCategory = () => (\n        <div className=\"modal fade\" id=\"addCategoryModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addCategoryModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addCategoryModalLabel\">{t('common.new_thematique')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\"\n                                      onSubmit={handleSubmit(onSubmitThematique)}>\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"thematique\"\n                                               required\n                                               ref={register({required: true, maxLength: 255})}\n                                               id=\"category\"\n                                               value={thematique}\n                                               onChange={(e) => setThematique(e.target.value)}\n                                               error={errors.hasOwnProperty(\"thematique\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('common.thematique_label')}\n                                               maxLength=\"255\"\n                                        />\n\n                                        {/*                                        <div className=\"form-group\">\n                                            <label htmlFor=\"postCategory\"\n                                                   className=\"is-required\">{t('common.categorie')}</label>\n                                            {\n                                                props.loadingGetCategory ?\n                                                    <select className=\"custom-select\"\n                                                            id=\"postCategory\" disabled>\n                                                    </select> :\n                                                    props.resultGetCategory !== null &&\n                                                    <select className=\"custom-select\"\n                                                            id=\"postCategory\"\n                                                            onChange={event => setCategory(event.target.value)}>\n                                                        {\n                                                            props.resultGetCategory.map((domaine, index) => (\n                                                                <option value={domaine.rhContentCategoryId}\n                                                                        key={`category${index}`}>{domaine.rhContentCategoryName}\n                                                                </option>\n                                                            ))\n                                                        }\n                                                    </select>\n                                            }\n\n                                        </div>*/}\n\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingBlogThematique ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitThematique)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('common.thematique')}`}</title>\n                </Helmet>\n                <h1>{t(\"common.thematique\")}</h1>\n\n                {renderModalAddCategory()}\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n                        <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" id=\"btnModal\"\n                                style={{display: \"none\"}} data-target=\"#addCategoryModal\"/>\n                        <div className=\"row mb-3\">\n                            <div className=\"col-auto mr-auto\">\n                                <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                        onClick={() => {\n                                            setIsModifyCategory(false);\n                                        }}\n                                        data-target=\"#addCategoryModal\">\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('common.add')}\n                                </button>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('common.find_category')}\n                                           aria-label={t('common.find_category')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <ul className=\"nav nav-tabs nav-tabs-light\">\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 0 && \"active\"}`}\n                                       onClick={() => {\n                                           setThematiquePublishedAction();\n                                           setTabsActiveIndex(0);\n                                       }}>{`${t('common.published')} (${categoriesPublished.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 1 && \"active\"}`}\n                                       onClick={() => setThematiqueDeletedAction()}>{`${t('common.unpublished')} (${categoriesDeleted.length})`}</a>\n                                </li>\n                            </ul>\n                            <div className=\"media-body\">\n                                {renderPostTable(categories)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getAllDomainesReducer.loading,\n    result: state.getAllDomainesReducer.result,\n    error: state.getAllDomainesReducer.error,\n\n    loadingGetCategory: state.getAllCategoryReducer.loading,\n    resultGetCategory: state.getAllCategoryReducer.result,\n    errorGetCategory: state.getAllCategoryReducer.error,\n\n    loadingBlogThematique: state.createDomaineReducer.loading,\n    resultBlogThematique: state.createDomaineReducer.result,\n    errorBlogThematique: state.createDomaineReducer.error,\n\n    loadingModifyThematique: state.modifyDomaineReducer.loading,\n    resultModifyThematique: state.modifyDomaineReducer.result,\n    errorModifyThematique: state.modifyDomaineReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    createThematiqueAction,\n    createThematiqueReset,\n\n    modifyThematiqueAction,\n    modifyThematiqueReset,\n\n    modifyCategoryAction,\n    modifyCategoryReset,\n\n    getAllDomaineAction,\n    getAllDomaineReset,\n\n    getAllCategoryAction,\n    getAllCategoryReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(BlogThematique));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\PostThematique\\index.js",["1017","1018","1019","1020","1021","1022","1023"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {useHistory, withRouter} from \"react-router-dom\";\nimport {getAllPostsAction, getAllPostsReset} from \"../../../../redux/api/PostsApi\";\nimport {\n    createThematiqueAction,\n    createThematiqueReset,\n    getAllDomaineAction,\n    getAllDomaineReset, modifyThematiqueAction, modifyThematiqueReset\n} from \"../../../../redux/api/DomaineApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport * as Utils from \"../../../../utils\";\nimport {Constant} from \"../../../../config/Constant\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport CustomMaterialMenu from \"../../../../components/CustomMaterialMenu\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DataTableComponent from \"../../../../components/DataTable\";\nimport {Input} from \"../../../../components/Input\";\nimport {useForm} from \"react-hook-form\";\nimport {\n    getAllCategoryAction,\n    getAllCategoryReset,\n    modifyCategoryAction,\n    modifyCategoryReset\n} from \"../../../../redux/api/CategoryApi\";\nimport {toast} from \"react-toastify\";\nimport $ from \"jquery\";\n\n\nlet route = require('../../../../utils/route');\n\nfunction PostThematique(props) {\n    const {t} = useTranslation();\n    const [isModifyCategory, setIsModifyCategory] = useState(false);\n    const [idCategory, setIdCategory] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [search, setSearch] = useState('');\n    const [thematique, setThematique] = useState(\"\");\n    const [thematiqueLink, setThematiqueLink] = useState(\"\");\n    const [categories, setCategories] = useState([]);\n    const [categoriesPublished, setCategoriesPublished] = useState([]);\n    const [categoriesDeleted, setCategoryDeleted] = useState([]);\n    const [category, setCategory] = useState(5);\n    const [tabsActiveIndex, setTabsActiveIndex] = useState(0);\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n\n    const columns = [\n        {\n            name: t('common.status'),\n            selector: 'rhContentIsOK',\n            width: '100px',\n            sortable: true,\n            cell: post => post.rhContentDomaineState ?\n                <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n        },\n        {\n            name: t('add_post.title'),\n            selector: 'rhContentDomaineName',\n            sortable: true\n        },\n        {\n            name: t('add_post.publication_date'),\n            selector: 'rhContentDateCeated',\n            sortable: true,\n            format: d => moment(d.rhContentCategoryDateCreated).format(\"lll\")\n        },\n        {\n            name: t('common.categorie'),\n            selector: 'rhContentCategory.rhContentCategoryName',\n            sortable: true,\n            cell: row => props.resultGetCategory !== null ? props.resultGetCategory.filter((category) => category.rhContentCategoryId === row.rhContentCategoryId)[0].rhContentCategoryName : ''\n        },\n        {\n            name: t('common.actions'),\n            cell: row => <CustomMaterialMenu size=\"small\" row={row} firstButtonText={t('common.edit')}\n                                             secondButtonText={row.rhContentDomaineState ? t('common.unpublish') : t('common.publish')}\n                                             firstButtonAction={() => {\n                                                 setIsModifyCategory(true);\n                                                 setIdCategory(row.rhContentCategoryId);\n                                                 $('#category').val(row.rhContentCategoryName);\n                                                 $('#btnModal').trigger('click');\n                                                 $('.modal-title').html(t('common.categorie_modify'));\n                                                 $('.modal-footer .btn-primary').html(t('common.modify'));\n                                             }} secondButtonAction={() => {\n                props.modifyCategoryAction(row.rhContentCategoryId, {\n                    rhContentDomaineState: !row.rhContentDomaineState\n                });\n            }}/>,\n            allowOverflow: true,\n            button: true,\n        }\n\n    ];\n\n    useEffect(() => {\n        props.createThematiqueReset();\n        props.getAllDomaineAction();\n        props.getAllCategoryAction();\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            setThematiquePublishedAction();\n            setCategoryDeleted(props.result.filter((post) => !post.rhContentDomaineState && post.rhContentCategoryId >= Constant.publicationID));\n        }\n    }, [props.result]);\n\n    useEffect(() => {\n        if (props.resultPostThematique !== null) {\n            toast.dark(t('common.thematique_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            setTimeout(() => {\n                history.go(0);\n            }, Constant.toastDelay);\n            props.createThematiqueReset();\n        }\n        if (props.errorPostThematique !== null) {\n            toast.error(Utils.displayErrorRequest(props.errorPostThematique), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.createThematiqueReset();\n        }\n\n        if (props.resultModifyThematique !== null) {\n            toast.dark(t('common.thematique_modify_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.go(0);\n            props.modifyCategoryReset();\n        }\n        if (props.errorModifyThematique !== null) {\n            toast.error(Utils.displayErrorRequest(props.errorModifyThematique), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.modifyCategoryReset();\n        }\n    }, [props]);\n\n    useEffect(() => {\n        if (props.result !== null) setIsLoading(false);\n        else setIsLoading(true);\n    }, [categories]);\n\n    const setThematiquePublishedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => post.rhContentDomaineState && post.rhContentCategoryId >= Constant.publicationID);\n            setCategories(tempPosts);\n            setCategoriesPublished(tempPosts);\n        }\n    };\n\n    const setThematiqueDeletedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => !post.rhContentDomaineState && post.rhContentCategoryId >= Constant.publicationID);\n            setCategories(tempPosts);\n            setCategoryDeleted(tempPosts);\n            setTabsActiveIndex(1);\n        }\n    };\n\n    const handleSearch = () => {\n        console.log(search);\n        if (props.result !== null)\n            setCategories(props.result.filter((post) => post.rhContentDomaineName.toLowerCase().includes(search.toLowerCase()) && post.rhContentCategoryId >= Constant.publicationID ))\n\n    };\n\n    const onSubmitThematique = () => {\n        if (isModifyCategory) {\n            props.modifyThematiqueAction(idCategory, {\n                rhContentCategoryName: parseInt(category),\n                rhContentDomaineState: true\n            });\n        } else {\n            props.createThematiqueAction({\n                rhContentDomaineName: thematique,\n                rhContentCategoryId: parseInt(category),\n                rhContentDomaineState: true,\n                domaineLink: thematiqueLink,\n            });\n        }\n    };\n\n\n    const ExpandedComponent = ({data}) => <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n    const renderPostTable = (data) => (\n        <DataTableComponent\n            columns={columns}\n            data={!isLoading ? data : []}\n            progressPending={props.loading}\n            defaultSortField=\"name\"\n            loading={props.loading || isLoading}\n            selectableRowsComponent={Checkbox}\n            onRowClicked={(category) => {\n                setIsModifyCategory(true);\n                setIdCategory(category.rhContentCategoryId);\n                $('#category').val(category.rhContentCategoryName);\n                $('#btnModal').trigger('click');\n                $('.modal-title').html(t('common.categorie_modify'));\n                $('.modal-footer .btn-primary').html(t('common.modify'));\n            }}\n            expandableRows={false}\n            expandableRowsComponent={<ExpandedComponent/>}\n        />\n    );\n\n    const renderModalAddCategory = () => (\n        <div className=\"modal fade\" id=\"addCategoryModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addCategoryModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addCategoryModalLabel\">{t('common.new_thematique')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\"\n                                      onSubmit={handleSubmit(onSubmitThematique)}>\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"thematique\"\n                                               required\n                                               ref={register({required: true, maxLength: 255})}\n                                               id=\"category\"\n                                               value={thematique}\n                                               onChange={(e) => setThematique(e.target.value)}\n                                               error={errors.hasOwnProperty(\"thematique\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('common.thematique_label')}\n                                               maxLength=\"255\"\n                                        />\n\n                                        <div className=\"form-group\">\n\n                                            <label htmlFor=\"postCategory\"\n                                                   className=\"is-required\">{t('common.categorie')}</label>\n                                            {\n                                                props.loadingGetCategory ?\n                                                    <select className=\"custom-select\"\n                                                            id=\"postCategory\" disabled>\n                                                    </select> :\n                                                    props.resultGetCategory !== null &&\n                                                    <select className=\"custom-select\"\n                                                            id=\"postCategory\"\n                                                            onChange={event => setCategory(event.target.value)}>\n                                                        {\n                                                            props.resultGetCategory.map((domaine, index) => (\n                                                                <option value={domaine.rhContentCategoryId}\n                                                                        key={`category${index}`}>{domaine.rhContentCategoryName}\n                                                                </option>\n                                                            ))\n                                                        }\n                                                    </select>\n                                            }\n\n                                        </div>\n                                        \n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"thematiqueLink\"\n                                               \n                                               ref={register({required: false, maxLength: 255})}\n                                               id=\"thematiqueLink\"\n                                               value={thematiqueLink}\n                                               onChange={(e) => setThematiqueLink(e.target.value)}\n                                               error={errors.hasOwnProperty(\"thematique\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('common.thematiqueLink_label')}\n                                               maxLength=\"255\"/>\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingPostThematique ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitThematique)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('common.thematique')}`}</title>\n                </Helmet>\n                <h1>{t(\"common.thematique\")}</h1>\n\n                {renderModalAddCategory()}\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n                        <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" id=\"btnModal\"\n                                style={{display: \"none\"}} data-target=\"#addCategoryModal\"/>\n                        <div className=\"row mb-3\">\n                            <div className=\"col-auto mr-auto\">\n                                <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                        onClick={() => {\n                                            setIsModifyCategory(false);\n                                        }}\n                                        data-target=\"#addCategoryModal\">\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('common.add')}\n                                </button>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('common.find_category')}\n                                           aria-label={t('common.find_category')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <ul className=\"nav nav-tabs nav-tabs-light\">\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 0 && \"active\"}`}\n                                       onClick={() => {\n                                           setThematiquePublishedAction();\n                                           setTabsActiveIndex(0);\n                                       }}>{`${t('common.published')} (${categoriesPublished.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 1 && \"active\"}`}\n                                       onClick={() => setThematiqueDeletedAction()}>{`${t('common.unpublished')} (${categoriesDeleted.length})`}</a>\n                                </li>\n                            </ul>\n                            <div className=\"media-body\">\n                                {renderPostTable(categories)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getAllDomainesReducer.loading,\n    result: state.getAllDomainesReducer.result,\n    error: state.getAllDomainesReducer.error,\n\n    loadingGetCategory: state.getAllCategoryReducer.loading,\n    resultGetCategory: state.getAllCategoryReducer.result,\n    errorGetCategory: state.getAllCategoryReducer.error,\n\n    loadingPostThematique: state.createDomaineReducer.loading,\n    resultPostThematique: state.createDomaineReducer.result,\n    errorPostThematique: state.createDomaineReducer.error,\n\n    loadingModifyThematique: state.modifyDomaineReducer.loading,\n    resultModifyThematique: state.modifyDomaineReducer.result,\n    errorModifyThematique: state.modifyDomaineReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    createThematiqueAction,\n    createThematiqueReset,\n\n    modifyThematiqueAction,\n    modifyThematiqueReset,\n\n    modifyCategoryAction,\n    modifyCategoryReset,\n\n    getAllDomaineAction,\n    getAllDomaineReset,\n\n    getAllCategoryAction,\n    getAllCategoryReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PostThematique));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Blog\\EditBlog\\index.js",["1024","1025","1026","1027","1028","1029","1030","1031","1032"],"import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {useForm} from \"react-hook-form\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {useHistory} from \"react-router-dom\";\nimport {Input} from \"../../../../components/Input\";\nimport {getAllDomaineAction} from \"../../../../redux/api/DomaineApi\";\nimport {useDropzone} from 'react-dropzone';\nimport * as Utils from '../../../../utils';\nimport {Constant} from \"../../../../config/Constant\";\nimport {toast} from 'react-toastify';\nimport * as moment from 'moment';\nimport {Helmet} from \"react-helmet\";\nimport {postBlogAction, postBlogReset} from \"../../../../redux/api/BlogApi\";\nimport {uploadImageAction} from \"../../../../redux/api/ImageApi\";\nimport RichTextEditor from \"../../../../components/RichTextEditor\";\n\nlet route = require('../../../../utils/route');\n\nfunction EditBlog(props) {\n    const {t} = useTranslation();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n    const editor = useRef(null);\n    const [title, setTitle] = useState('');\n    const [date, setDate] = useState(null);\n    const [ContentId, setId] = useState(0);\n    const [dateFin, setDateFin] = useState(null);\n    const [thematique, setThematique] = useState(1);\n    const [image, setImage] = useState(new FormData());\n    const [contenu, setContenu] = useState('');\n    const [featured, setFeatured] = useState(0);\n    const [isDataSubmit, setIsDataSubmit] = useState(false);\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const [files, setFiles] = useState([]);\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n        accept: \".jpeg,.png,.gif,.jpg,.svg\",\n        maxFiles: 1,\n        multiple: false,\n        onDrop: acceptedFiles => {\n            console.log(acceptedFiles);\n            acceptedFiles.map(file => {\n                let imageToSend = new FormData();\n                imageToSend.append(\"file\", file);\n                props.uploadImageAction(imageToSend);\n            });\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            })));\n        }\n    });\n\n    const style = useMemo(() => ({\n        ...Utils.baseStyle,\n        ...(isDragActive ? Utils.activeStyle : {}),\n        ...(isDragAccept ? Utils.acceptStyle : {}),\n        ...(isDragReject ? Utils.rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject,\n        isDragAccept\n    ]);\n\n    const Thumbs = files.map(file => (\n        <div style={Utils.thumbStyle} key={file.name}>\n            <div style={Utils.thumbInnerStyle}>\n                {\n                    props.loadingUpdloadPhoto &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                <img\n                    src={file.preview}\n                    loading=\"lazy\"\n                    style={Utils.imgStyle}\n                />\n            </div>\n        </div>\n    ));\n\n    useEffect(() => () => {\n        // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    const onSubmitPost = () => {\n        setIsDataSubmit(true);\n        props.postBlogAction({\n            rhContentTitle: title,\n            rhCCId:ContentId,\n            rhContentDescription: contenu,\n            rhContentPriorityLevel: featured,\n            rhContentCategoryId: Constant.blogID,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentPrincipalLink: props.resultUploadImage !== null ? props.resultUploadImage.imageName : \"\",\n            rhContentDatePublish: date !== null ? moment(date).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\"),\n            rhContentDateOnPublish: dateFin === null ? moment(moment().add(1, 'y')).format(\"YYYY-MM-DD\") : moment(dateFin).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId\n        });\n    }\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n    }, []);\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.result !== null) {\n            toast.dark(t('add_new_blog.success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.push(route.blog.root);\n            props.postBlogReset();\n        }\n        if (props.error !== null) {\n            toast.error(t(Utils.displayErrorRequest(props.error)), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.postBlogReset();\n        }\n    }, [props]);\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t(\"add_new_blog.title\")}`}</title>\n            </Helmet>\n            <div className=\"container-fluid\">\n                <h1>{t(\"add_new_blog.title\")}</h1>\n            </div>\n\n            <section className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitPost)}>\n                            <div className=\"col-12 col-lg-4\">\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"text\"\n                                       name=\"title\"\n                                       required\n                                       ref={register({required: true, maxLength: 255})}\n                                       id=\"title\"\n                                       value={title}\n                                       onChange={(e) => setTitle(e.target.value)}\n                                       error={errors.hasOwnProperty(\"title\")}\n                                       errorText={t('error.required_field')}\n                                       labelText={t('add_new_blog.blog_title')}\n                                       maxLength=\"255\"\n                                />\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"date\"\n                                       name=\"date\"\n                                       id=\"date\"\n                                       value={date}\n                                       onChange={(e) => {\n                                           setDate(e.target.value);\n                                           console.log(e.target.value);\n                                       }}\n                                       errorText={t('error.date_incorrect')}\n                                       labelText={t('add_post.publication_date')}\n                                       title={t('add_post.expected_format')}\n                                >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                </Input>\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"date\"\n                                       name=\"dateFin\"\n                                       id=\"dateFin\"\n                                       value={dateFin}\n                                       onChange={(e) => {\n                                           setDateFin(e.target.value);\n                                           console.log(e.target.value);\n                                       }}\n                                       error={isDataSubmit ? dateFin !== null : false}\n                                       errorText={t('error.date_incorrect')}\n                                       labelText={t('add_post.publication_end_date')}\n                                       title={t('add_post.expected_format')}\n                                >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                </Input>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"postThematique\"\n                                           className=\"is-required\">{t('common.thematique')}</label>\n                                    {\n                                        props.loadingDomaine ?\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\" disabled>\n                                            </select> :\n                                            props.resultDomaine !== null &&\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\"\n                                                    onChange={event => setThematique(event.target.value)}>\n                                                {\n                                                    props.resultDomaine.map((domaine, index) => (\n                                                        <option value={domaine.rhContentDomaineId}\n                                                                key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                    ))\n                                                }\n                                            </select>\n                                    }\n\n                                </div>\n\n                                <div className=\"form-group mb-3\">\n                                    <label htmlFor=\"postThematique\"\n                                           className={`is-required ${(files.length === 0) && \"is-invalid\"}`}>{t('add_post.image')}</label>\n                                    <div {...getRootProps({style})}>\n                                        <input {...getInputProps()} />\n                                        {files.length === 0 && <p>{t('add_post.drad_drop_or_select')}</p>}\n                                        {Thumbs}\n                                    </div>\n\n                                    {files.length === 0 ?\n                                        isDataSubmit ?\n                                            <div className=\"invalid-feedback\">\n                                                {t('error.image_required')}\n                                            </div> : null : null}\n\n                                </div>\n\n                                <fieldset className=\"form-group\">\n                                    <div id=\"radio-action\" className=\"form-inline\">\n\n                                        <div className=\"custom-control custom-switch\">\n                                            <input type=\"checkbox\"\n                                                   onChange={(e) => setFeatured(e.target.checked ? 1 : 0)}\n                                                   className=\"custom-control-input\" id=\"customSwitch1\"/>\n                                            <label className=\"custom-control-label\"\n                                                   htmlFor=\"customSwitch1\">{t('add_post.featured')}</label>\n                                        </div>\n                                    </div>\n                                </fieldset>\n\n                                <div className=\"submit mt-3\">\n\n                                    {\n                                        props.loading ?\n                                            <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                                <span className=\"sr-only\">{t('common.loading')}</span>\n                                            </button> :\n                                            <button className=\"btn btn-primary\"\n                                                    onSubmit={handleSubmit(onSubmitPost)}>{t('common.post')}</button>\n                                    }\n                                </div>\n                            </div>\n                            <div className=\"col-12 col-lg-8\">\n                                <div className=\"form-group required\">\n                                    <label htmlFor=\"PostContent\"\n                                           className=\"is-required\">{t('add_post.contenu')}</label>\n                                    <RichTextEditor ref={editor}\n                                                    value={contenu}\n                                                    onBlur={event => setContenu(event.target.innerHTML)} // preferred to use only this option to update the content for performance reasons\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.postBlogReducer.loading,\n    result: state.postBlogReducer.result,\n    error: state.postBlogReducer.error,\n\n    loadingDomaine: state.getAllDomainesReducer.loading,\n    resultDomaine: state.getAllDomainesReducer.result,\n    errorDomaine: state.getAllDomainesReducer.error,\n\n    loadingUploadImage: state.uploadImageReducer.loading,\n    resultUploadImage: state.uploadImageReducer.result,\n    errorUploadImage: state.uploadImageReducer.error,\n\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllDomaineAction,\n    uploadImageAction,\n\n    postBlogAction,\n    postBlogReset\n\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditBlog);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\PostsActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\FAQ\\index.js",["1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044"],"import React, {useState, useEffect} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useParams, useHistory, withRouter} from \"react-router-dom\";\nimport {Input} from \"../../../components/Input\";\nimport {TextArea} from \"../../../components/TextArea/TextArea\";\nimport {useForm} from \"react-hook-form\";\nimport {bindActionCreators} from 'redux';\nimport {Constant} from \"../../../config/Constant\";\nimport * as moment from \"../../Glossary\";\nimport $ from \"jquery\";\nimport {\n    getAllPostsAction,\n    getAllPostsByDomaineAction,\n    getAllPostsByDomaineReset,\n    getAllPostsReset\n} from \"../../../redux/api/PostsApi\";\nimport {connect} from \"react-redux\";\nimport {postFaqAction, postFaqReset} from \"../../../redux/api/FaqApi\";\nimport * as Utils from \"../../../utils\";\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\nimport {validatePublicationAction, validatePublicationReset} from \"../../../redux/api/ValidationApi\";\nimport {toast} from \"react-toastify\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck} from \"@fortawesome/free-solid-svg-icons\";\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\n\nlet route = require('../../../utils/route');\n\nfunction AdminFAQ(props) {\n    const {t} = useTranslation();\n    let {id, page, domaine} = useParams();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n\n    const [currentPath, setCurrentPath] = useState(props.location.pathname);\n    const [search, setSearch] = useState('');\n    const [thematique, setThematique] = useState(1);\n    const [answer, setAnswer] = useState('');\n    const [answerToModify, setAnswerToModify] = useState('');\n    const [questionToModify, setQuestionToModify] = useState('');\n    const [thematiqueToModify, setThematiqueToModify] = useState('');\n    const [contentId, setContentId] = useState('');\n    const [question, setQuestion] = useState('');\n    const [enabled, setEnabled] = useState(1);\n\n    const onSubmitFaq = () => {\n        props.postFaqAction({\n            rhContentTitle: question,\n            rhContentDescription: answer,\n            rhContentCategoryId: Constant.faqID,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentDatePublish: moment(new Date()).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId\n        });\n    };\n\n    const onModifyFaq = () => {\n        props.validatePublicationAction({\n            rhContentId: contentId,\n            rhContentDescription: answerToModify,\n            rhContentValidationIsValidated: enabled === 1,\n            userId: Utils.getUserConnected().userId\n        });\n    }\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.resultValidatePublication !== null) {\n            toast.dark(t('faq.modify_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.go(0);\n            props.validatePublicationReset();\n        }\n        if (props.errorValidatePublication !== null) {\n            toast.error(props.errorValidatePublication, {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.validatePublicationReset();\n        }\n    }, [props]);\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllPostsReset();\n        props.getAllPostsAction(Constant.faqID);\n    }, []);\n\n\n    const renderModalAddFaq = () => (\n        <div className=\"modal fade\" id=\"addFaqModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addFaqModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addFaqModalLabel\">{t('faq.new_faq')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitFaq)}>\n\n                                    <div className=\"col-12\">\n                                        <label htmlFor=\"postThematique\"\n                                               className=\"is-required\">{t('common.thematique')}</label>\n                                        {\n                                            props.loadingGetDomaine ?\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\" disabled>\n                                                </select> :\n                                                props.resultGetDomaine !== null &&\n                                                <select className=\"custom-select\"\n                                                        id=\"postThematique\">\n                                                    {\n                                                        props.resultGetDomaine.map((domaine, index) => (\n                                                            <option value={domaine.rhContentDomaineId}\n                                                                    key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                        ))\n                                                    }\n                                                </select>\n                                        }\n\n                                    </div>\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"question\"\n                                               required\n                                               ref={register({required: true, maxLength: 255})}\n                                               id=\"question\"\n                                               value={question}\n                                               onChange={(e) => setQuestion(e.target.value)}\n                                               error={errors.hasOwnProperty(\"question\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('faq.question')}\n                                               maxLength=\"255\"\n                                        />\n\n                                    </div>\n\n                                    <div className=\"col-12\">\n                                        <TextArea wrapperClass=\"form-group\"\n                                                  inputClass=\"form-control\"\n                                                  name=\"answer\"\n                                                  required\n                                                  style={{height: \"106px\"}}\n                                                  ref={register({required: true})}\n                                                  id=\"answer\"\n                                                  value={answer}\n                                                  onChange={(e) => setAnswer(e.target.value)}\n                                                  error={errors.hasOwnProperty(\"answer\")}\n                                                  errorText={t('error.required_field')}\n                                                  labelText={t('faq.answer')}\n                                        />\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingPostFaq ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                        <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                              aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitFaq)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    const renderModalModifyFaq = () => (\n        <div className=\"modal fade\" id=\"answerFaqModalLabel\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"answerFaqModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addFaqModalLabel\">{t('faq.answer_question')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\">\n\n                                    <div className=\"col-12\">\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               disabled\n                                               name=\"postThematiqueToModify\"\n                                               id=\"postThematiqueToModify\"\n                                               value={thematiqueToModify}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('common.thematique')}\n                                               maxLength=\"255\"\n                                        />\n\n                                    </div>\n\n                                    <div className=\"col-12\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               disabled\n                                               name=\"questionToAnswer\"\n                                               required\n                                               id=\"questionToAnswer\"\n                                               value={questionToModify}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('faq.question')}\n                                               maxLength=\"255\"\n                                        />\n\n                                    </div>\n\n\n                                    <fieldset className=\"form-group col-12\">\n                                        <div id=\"radio-action\" className=\"form-inline\">\n                                            <div className=\"custom-control custom-switch\">\n                                                <input type=\"checkbox\"\n                                                       checked={enabled === 1}\n                                                       onChange={(e) => setEnabled(e.target.checked ? 1 : 0)}\n                                                       className=\"custom-control-input\" id=\"customSwitch1\"/>\n                                                <label className=\"custom-control-label\"\n                                                       htmlFor=\"customSwitch1\">{t('faq.publish_faq_state')}</label>\n                                            </div>\n                                        </div>\n                                    </fieldset>\n\n                                    <div className=\"col-12\">\n                                        <TextArea wrapperClass=\"form-group\"\n                                                  inputClass=\"form-control\"\n                                                  name=\"answerToModify\"\n                                                  required\n                                                  disabled={enabled === 0}\n                                                  style={{height: \"106px\"}}\n                                                  id=\"answerToModify\"\n                                                  onChange={(e) => setAnswerToModify(e.target.value)}\n                                                  value={answerToModify}\n                                                  error={answerToModify === ''}\n                                                  errorText={t('error.required_field')}\n                                                  labelText={t('faq.answer')}\n                                        />\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingValidatePublication ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                        <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                              aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={() => {\n                                            if (answerToModify !== '') onModifyFaq();\n                                        }}>{t('common.save')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    const renderFaqTable = (data) => (\n        <table className=\"table table-striped table-responsive-lg table-hover has-icon col-12\">\n            {/*\n            <caption>Icons table</caption>\n*/}\n            <thead>\n            <tr>\n                <th className=\"text-center\">{t('common.status')}</th>\n                <th className=\"text-left\">{t('faq.question')}</th>\n                <th className=\"text-left\">{t('faq.answer')}</th>\n                <th className=\"text-left\">{t('common.domain')}</th>\n                <th className=\"text-left\">{t('common.author')}</th>\n            </tr>\n            </thead>\n            <tbody>\n            {\n                data.map((faq, index) => (\n                    <tr key={index} className=\"faq-item\" onClick={() => {\n                        $('#btnModal').trigger('click');\n                        setContentId(faq.rhContentId);\n                        setQuestionToModify(faq.rhContentTitle);\n                        setThematiqueToModify(faq.rhContentDomaine.rhContentDomaineName);\n                        setAnswerToModify(faq.rhContentDescription);\n                    }}>\n                        <td className=\"text-left\">\n                            {\n                                faq.rhContentIsOK ?\n                                    <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                                    <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n                            }\n                        </td>\n                        <th className=\"text-left\">{faq.rhContentTitle}</th>\n                        <th className=\"text-left\">{Utils.cutString(faq.rhContentDescription, 70)}</th>\n                        <th className=\"text-left\">{faq.rhContentDomaine.rhContentDomaineName}</th>\n                        <th className=\"text-left\">{faq.user.userName}</th>\n                    </tr>\n                ))\n            }\n            </tbody>\n        </table>\n    );\n\n    const handleSearch = () => {\n\n    }\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('faq.title')}`}</title>\n                </Helmet>\n                <h1>{t(\"faq.title\")}</h1>\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n                        {renderModalAddFaq()}\n                        {renderModalModifyFaq()}\n                        <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" id=\"btnModal\"\n                                style={{display: \"none\"}} data-target=\"#answerFaqModalLabel\"/>\n                        <div className=\"row mb-3\">\n                            {/*                            <div className=\"col-auto mr-auto\">\n                                <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                        data-target=\"#addFaqModal\">\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('faq.new_faq')}\n                                </button>\n                            </div>*/}\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('posts.find_post')}\n                                           aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <div className=\"media-body\">\n                                {props.result !== null && renderFaqTable(props.result)}\n                            </div>\n                        </div>\n                    </div>\n\n\n                </div>\n            </div>\n        </>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsReducer.loading,\n    result: state.getAllPostsReducer.result,\n    error: state.getAllPostsReducer.error,\n\n    loadingPostGlossary: state.postGlossaryReducer.loading,\n    resultPostGlossary: state.postGlossaryReducer.result,\n    errorPostGlossary: state.postGlossaryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n\n    loadingValidatePublication: state.validatePublicationReducer.loading,\n    resultValidatePublication: state.validatePublicationReducer.result,\n    errorValidatePublication: state.validatePublicationReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    getAllDomaineAction,\n    validatePublicationAction,\n    validatePublicationReset,\n\n    postFaqAction,\n    postFaqReset,\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminFAQ));\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\TitleUnderlined\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Loader\\index.js",["1045","1046"],"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useTranslation} from \"react-i18next\";\nimport moment from 'moment';\nimport 'moment/locale/en-gb';\nimport 'moment/locale/fr';\n\nexport default function Loader(props) {\n    const {\n        ...rest\n    } = props;\n\n    const {i18n, t} = useTranslation();\n    console.log(i18n);\n\n    return (\n        <div className=\"d-flex justify-content-center\" {...rest}>\n            <div className=\"spinner-border\" role=\"status\">\n                <span className=\"sr-only\">{t('common.loading')}</span>\n            </div>\n        </div>\n    );\n};\n\nLoader.propTypes = {};\n\nLoader.defaultProps = {};","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\CommonScreen\\NotFound\\index.js",["1047","1048","1049","1050"],"import React from \"react\";\nimport {Helmet} from \"react-helmet\";\nimport {useHistory, useParams, withRouter, NavLink} from \"react-router-dom\";\nimport {useTranslation} from \"react-i18next\";\nimport {Images} from \"../../../config/Images\";\nlet route = require('../../../utils/route');\nexport default function NotFound(props) {\n\n    const {t} = useTranslation();\n    let history = useHistory();\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t('faq.title')}`}</title>\n            </Helmet>\n            <div className=\"my-5\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-6\" style={{padding: 0}}>\n                            <div className=\"jumbotron bg-dark\" style={{margin: 0}}>\n                                <h1 className=\"display-4\">{t('common.404_not_found')}</h1>\n                                <p className=\"lead\">{t('common.page_you_look_for_not_found')}</p>\n                                <hr className=\"my-4\"/>\n                                <p>{t('common.you_can_return_to_home_page')}</p>\n                                <NavLink to=\"/\" className=\"btn btn-primary btn-lg\" role=\"button\">{t('home.title')}</NavLink>\n                            </div>\n                        </div>\n\n                        <div className=\"col-6\" style={{\n                            backgroundImage: `url(${Images.notfoundillustration})`,\n                            padding: 0,\n                            backgroundSize: 'contain'\n                        }}>\n\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </>\n    );\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\fakeData\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\DomaineApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\ImageApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Slider\\index.js",["1051"],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\PostCategory\\index.js",["1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useHistory, withRouter} from \"react-router-dom\";\nimport {getAllPostsAction, getAllPostsReset} from \"../../../../redux/api/PostsApi\";\nimport {getAllDomaineAction} from \"../../../../redux/api/DomaineApi\";\nimport {validatePublicationAction, validatePublicationReset} from \"../../../../redux/api/ValidationApi\";\nimport {postFaqAction, postFaqReset} from \"../../../../redux/api/FaqApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport * as Utils from \"../../../../utils\";\nimport {Constant} from \"../../../../config/Constant\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport {Config} from \"../../../../config/ServerConfig\";\nimport CustomMaterialMenu from \"../../../../components/CustomMaterialMenu\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DataTableComponent from \"../../../../components/DataTable\";\nimport ReactPlayer from \"react-player\";\nimport {Input} from \"../../../../components/Input\";\nimport {useForm} from \"react-hook-form\";\nimport {\n    createCategoryAction,\n    createCategoryReset,\n    getAllCategoryAction,\n    getAllCategoryReset, modifyCategoryAction, modifyCategoryReset\n} from \"../../../../redux/api/CategoryApi\";\nimport {toast} from \"react-toastify\";\nimport $ from \"jquery\";\n\n\nlet route = require('../../../../utils/route');\n\nfunction PostCategory(props) {\n    const {t} = useTranslation();\n    const [isModifyCategory, setIsModifyCategory] = useState(false);\n    const [idCategory, setIdCategory] = useState(false);\n    const [isLoading, setIsLoading] = useState(true);\n    const [search, setSearch] = useState('');\n    const [categories, setCategories] = useState([]);\n    const [categoriesPublished, setCategoriesPublished] = useState([]);\n    const [categoriesDeleted, setCategoryDeleted] = useState([]);\n    const [category, setCategory] = useState(\"\");\n    const [tabsActiveIndex, setTabsActiveIndex] = useState(0);\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n\n    const columns = [\n        {\n            name: t('common.status'),\n            selector: 'rhContentIsOK',\n            width: '100px',\n            sortable: true,\n            cell: post => post.rhContentCategoryState ?\n                <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n        },\n        {\n            name: t('add_post.title'),\n            selector: 'rhContentCategoryName',\n            sortable: true\n        },\n        {\n            name: t('add_post.publication_date'),\n            selector: 'rhContentDateCeated',\n            sortable: true,\n            format: d => moment(d.rhContentCategoryDateCreated).format(\"lll\")\n        },\n        {\n            name: t('common.actions'),\n            cell: row => <CustomMaterialMenu size=\"small\" row={row} firstButtonText={t('common.edit')}\n                                             secondButtonText={row.rhContentCategoryState ? t('common.unpublish') : t('common.publish')}\n                                             firstButtonAction={() => {\n                                                 setIsModifyCategory(true);\n                                                 setIdCategory(row.rhContentCategoryId);\n                                                 $('#category').val(row.rhContentCategoryName);\n                                                 $('#btnModal').trigger('click');\n                                                 $('.modal-title').html(t('common.categorie_modify'));\n                                                 $('.modal-footer .btn-primary').html(t('common.modify'));\n                                             }} secondButtonAction={() => {\n                props.modifyCategoryAction(row.rhContentCategoryId, {\n                    rhContentCategoryState: !row.rhContentCategoryState\n                });\n            }}/>,\n            allowOverflow: true,\n            button: true,\n        }\n\n    ];\n\n    useEffect(() => {\n        props.createCategoryReset();\n        props.getAllCategoryAction();\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            setCategoryPublishedAction();\n            setCategoryDeleted(props.result.filter((post) => !post.rhContentCategoryState));\n        }\n    }, [props.result]);\n\n    useEffect(() => {\n        if (props.resultPostCategory !== null) {\n            toast.dark(t('common.categorie_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            setTimeout(() => {\n                history.go(0);\n            }, Constant.toastDelay);\n            props.createCategoryReset();\n        }\n        if (props.errorPostCategory !== null) {\n            toast.error(Utils.displayErrorRequest(props.errorPostCategory), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.createCategoryReset();\n        }\n\n        if (props.resultModifyCategory !== null) {\n            toast.dark(t('common.categorie_modify_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.go(0);\n            props.modifyCategoryReset();\n        }\n        if (props.errorModifyCategory !== null) {\n            toast.error(Utils.displayErrorRequest(props.errorModifyCategory), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.modifyCategoryReset();\n        }\n    }, [props]);\n\n    useEffect(() => {\n        if (props.result !== null) setIsLoading(false);\n        else setIsLoading(true);\n    }, [categories]);\n\n    const setCategoryPublishedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => post.rhContentCategoryState);\n            setCategories(tempPosts);\n            setCategoriesPublished(tempPosts);\n        }\n    };\n\n    const setCategoryDeletedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => !post.rhContentCategoryState);\n            setCategories(tempPosts);\n            setCategoryDeleted(tempPosts);\n            setTabsActiveIndex(1);\n        }\n    };\n\n    const handleSearch = () => {\n        console.log(search);\n        if (props.result !== null)\n            setCategories(props.result.filter((post) => post.rhContentCategoryName.toLowerCase().includes(search.toLowerCase())))\n\n    };\n\n    const onSubmitCategory = () => {\n        if (isModifyCategory) {\n            props.modifyCategoryAction(idCategory, {\n                rhContentCategoryName: category,\n                rhContentCategoryState: true\n            });\n        } else {\n            props.createCategoryAction({\n                rhContentCategoryName: category,\n                rhContentCategoryState: true,\n            });\n        }\n    };\n\n\n    const ExpandedComponent = ({data}) => <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n    const renderPostTable = (data) => (\n        <DataTableComponent\n            columns={columns}\n            data={!isLoading ? data : []}\n            progressPending={props.loading}\n            defaultSortField=\"name\"\n            loading={props.loading || isLoading}\n            selectableRowsComponent={Checkbox}\n            onRowClicked={(category) => {\n                setIsModifyCategory(true);\n                setIdCategory(category.rhContentCategoryId);\n                $('#category').val(category.rhContentCategoryName);\n                $('#btnModal').trigger('click');\n                $('.modal-title').html(t('common.categorie_modify'));\n                $('.modal-footer .btn-primary').html(t('common.modify'));\n            }}\n            expandableRows={false}\n            expandableRowsComponent={<ExpandedComponent/>}\n        />\n    );\n\n    console.log(\"POST\", categories);\n\n    const renderModalAddCategory = () => (\n        <div className=\"modal fade\" id=\"addCategoryModal\" data-backdrop=\"static\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addCategoryModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\" id=\"addCategoryModalLabel\">{t('common.new_category')}</h5>\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">\n                            <span className=\"sr-only\">{t('common.click_to_close')}</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <div className=\"row\">\n                            <div className=\"col\">\n\n                                <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitCategory)}>\n\n                                    <div className=\"col-12 mt-3\">\n\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"text\"\n                                               name=\"category\"\n                                               required\n                                               ref={register({required: true, maxLength: 255})}\n                                               id=\"category\"\n                                               value={category}\n                                               onChange={(e) => setCategory(e.target.value)}\n                                               error={errors.hasOwnProperty(\"category\")}\n                                               errorText={t('error.required_field')}\n                                               labelText={t('common.category_label')}\n                                               maxLength=\"255\"\n                                        />\n\n                                    </div>\n\n                                </form>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"modal-footer\">\n                        <button type=\"button\" className=\"btn btn-secondary\"\n                                data-dismiss=\"modal\">{t('common.close')}</button>\n                        {\n                            props.loadingPostCategory ?\n                                <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                    <span className=\"sr-only\">{t('common.loading')}</span>\n                                </button> :\n                                <button type=\"button\" className=\"btn btn-primary\"\n                                        onClick={handleSubmit(onSubmitCategory)}>{t('common.post')}</button>\n                        }\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('common.categorie')}`}</title>\n                </Helmet>\n                <h1>{t(\"common.categorie\")}</h1>\n\n                {renderModalAddCategory()}\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n                        <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" id=\"btnModal\"\n                                style={{display: \"none\"}} data-target=\"#addCategoryModal\"/>\n                        <div className=\"row mb-3\">\n                            <div className=\"col-auto mr-auto\">\n                                <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\"\n                                        onClick={() => setIsModifyCategory(false)}\n                                        data-target=\"#addCategoryModal\">\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('common.add')}\n                                </button>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('common.find_category')}\n                                           aria-label={t('common.find_category')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <ul className=\"nav nav-tabs nav-tabs-light\">\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 0 && \"active\"}`}\n                                       onClick={() => {\n                                           setCategoryPublishedAction();\n                                           setTabsActiveIndex(0);\n                                       }}>{`${t('common.published')} (${categoriesPublished.length})`}</a>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <a href=\"#\" className={`nav-link ${tabsActiveIndex === 1 && \"active\"}`}\n                                       onClick={() => setCategoryDeletedAction()}>{`${t('common.unpublished')} (${categoriesDeleted.length})`}</a>\n                                </li>\n                            </ul>\n                            <div className=\"media-body\">\n                                {renderPostTable(categories)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getAllCategoryReducer.loading,\n    result: state.getAllCategoryReducer.result,\n    error: state.getAllCategoryReducer.error,\n\n    loadingPostCategory: state.createCategoryReducer.loading,\n    resultPostCategory: state.createCategoryReducer.result,\n    errorPostCategory: state.createCategoryReducer.error,\n\n    loadingModifyCategory: state.modifyCategoryReducer.loading,\n    resultModifyCategory: state.modifyCategoryReducer.result,\n    errorModifyCategory: state.modifyCategoryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    createCategoryAction,\n    createCategoryReset,\n\n    modifyCategoryAction,\n    modifyCategoryReset,\n\n    getAllCategoryAction,\n    getAllCategoryReset\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(PostCategory));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\Admin\\Posts\\EditPost\\index.js",["1068","1069","1070","1071","1072","1073","1074","1075","1076","1077"],"import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {useForm} from \"react-hook-form\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {useHistory, withRouter, useParams} from \"react-router-dom\";\nimport {Input} from \"../../../../components/Input\";\nimport {getAllDomaineAction} from \"../../../../redux/api/DomaineApi\";\nimport {\n    addNewPostAction,\n    addNewPostReset,\n    editPostAction,\n    editPostReset,\n    getPostByIdAction\n} from \"../../../../redux/api/PostsApi\";\nimport {useDropzone} from 'react-dropzone';\nimport * as Utils from '../../../../utils';\nimport {Constant} from \"../../../../config/Constant\";\nimport './style.css';\nimport {toast} from 'react-toastify';\nimport * as moment from 'moment';\nimport {Helmet} from \"react-helmet\";\nimport {uploadImageAction} from \"../../../../redux/api/ImageApi\";\nimport Dropzone from 'react-dropzone-uploader'\nimport RichTextEditor from \"../../../../components/RichTextEditor\";\nimport {Config} from \"../../../../config/ServerConfig\";\nimport ReactPlayer from \"react-player\";\nimport $ from \"jquery\";\n\nlet route = require('../../../../utils/route');\n\nfunction EditPost(props) {\n    const {t} = useTranslation();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n    let {id, page, domaine} = useParams();\n    const editor = useRef(null);\n    const [title, setTitle] = useState('');\n    const [date, setDate] = useState(null);\n    const [dateFin, setDateFin] = useState(null);\n    const [thematique, setThematique] = useState(1);\n    const [video, setVideo] = useState(null);\n    const [contenu, setContenu] = useState('');\n    const [featured, setFeatured] = useState(0);\n    const [hasPieceJointe, setHasPieceJointe] = useState(false);\n    const [piecesJointes, setPieceJointe] = useState([]);\n    const [isDataSubmit, setIsDataSubmit] = useState(false);\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const [files, setFiles] = useState([]);\n    const [isImageSelected, setIsImageSelected] = useState(true);\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n        accept: \".jpeg,.png,.gif,.jpg,.svg\",\n        maxFiles: 1,\n        multiple: false,\n        onDrop: acceptedFiles => {\n            console.log(acceptedFiles);\n            acceptedFiles.map(file => {\n                let imageToSend = new FormData();\n                imageToSend.append(\"file\", file);\n                props.uploadImageAction(imageToSend);\n            });\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            })));\n        }\n    });\n\n    const style = useMemo(() => ({\n        ...Utils.baseStyle,\n        ...(isDragActive ? Utils.activeStyle : {}),\n        ...(isDragAccept ? Utils.acceptStyle : {}),\n        ...(isDragReject ? Utils.rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject,\n        isDragAccept\n    ]);\n\n    const Thumbs = files.map(file => (\n        <div style={Utils.thumbStyle} key={file.name}>\n            <div style={Utils.thumbInnerStyle}>\n                {\n                    props.loadingUpdloadPhoto &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                <img\n                    src={file.preview}\n                    style={Utils.imgStyle}\n                />\n            </div>\n        </div>\n    ));\n\n    const ThumbsLoadedImage = () => (\n        <div style={Utils.thumbStyle}>\n            <div style={Utils.thumbInnerStyle}>\n                {\n                    props.loadingGetPostById &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                {props.resultGetPostById !== null &&\n                <img\n                    src={Config.imageFolder + props.resultGetPostById.rhContentPrincipalLink}\n                    style={Utils.imgStyle}\n                    className=\"img-post\"\n                />\n                }\n\n            </div>\n        </div>\n    );\n\n    const ThumbsLoadedVideo = () => (\n        <div style={Utils.thumbStyleVideo}>\n            <div style={Utils.thumbInnerStyleVideo}>\n                {\n                    props.loadingGetPostById &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                {props.resultGetPostById !== null &&\n                <ReactPlayer\n                    className=\"img-fluid img-reponsive video-preview\"\n                    width=\"100%\"\n                    controls\n                    height=\"200px\"\n                    url={Config.imageFolder + props.resultGetPostById.rhContentPrincipalLink}\n                />\n                }\n            </div>\n        </div>\n    );\n\n    console.log(\"POST ID\", id);\n    const getVideoUploadParams = ({meta}) => {\n        return {url: Config.uploadImageUrl}\n    };\n\n    const handleFileUploadChangeStatus = ({meta, file, xhr}, status) => {\n        console.log(status, meta, file);\n        if (status === \"done\") {\n            let response = JSON.parse(xhr.response);\n            setVideo(response.imageName);\n        }\n    };\n\n    const handlePiecesJointeChangeStatus = ({meta, file, xhr}, status) => {\n        let piecesJointesUpload = piecesJointes;\n        if (status === \"done\") {\n            let response = JSON.parse(xhr.response);\n            piecesJointesUpload.push({imageLink: response.imageName});\n            setPieceJointe(piecesJointesUpload);\n        }\n    };\n\n    const handleFileSubmit = (files, allFiles) => {\n        allFiles.forEach(f => f.remove());\n    };\n\n    useEffect(() => () => {\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n\n    const onEditPost = () => {\n        setIsDataSubmit(true);\n        props.editPostAction({\n            rhContentTitle: title,\n            rhContentDescription: contenu,\n            rhContentPriorityLevel: featured,\n            rhContentCategoryId: Constant.publicationID,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentPrincipalLink: isImageSelected ?\n                props.resultUploadImage !== null ?\n                    props.resultUploadImage.imageName :\n                    props.resultGetPostById.rhContentPrincipalLink :\n                video !== null ?\n                    video : props.resultGetPostById.rhContentPrincipalLink,\n            rhContentDatePublish: date !== null ? moment(date).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\"),\n            rhContentDateOnPublish: dateFin === null ? moment(moment().add(1, 'y')).format(\"YYYY-MM-DD\") : moment(dateFin).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId,\n            images: piecesJointes\n        }, props.resultGetPostById.rhContentId);\n    };\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getPostByIdAction(id);\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            toast.dark(t('posts.add_new_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.push(route.post.admin_post);\n            props.editPostReset();\n        }\n        if (props.error !== null) {\n            toast.error(t(Utils.displayErrorRequest(props.error)), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.editPostReset();\n        }\n\n        if (props.resultGetPostById !== null) {\n            setTitle(props.resultGetPostById.rhContentTitle);\n            setDateFin(moment(props.resultGetPostById.rhContentDateOnPublish).format(\"YYYY-MM-DD\"));\n            setDate(moment(props.resultGetPostById.rhContentDatePublish).format(\"YYYY-MM-DD\"));\n            setContenu(props.resultGetPostById.rhContentDescription);\n            if (!Utils.isImageFileUrl(props.resultGetPostById.rhContentPrincipalLink)) {\n                window.$(\"#video-tab\").trigger(\"click\");\n                setIsImageSelected(false);\n            }\n        }\n    }, [props]);\n\n    useEffect(() => {\n        window.$(\".img-post\").initImageNotLoadPlaceHolder();\n    });\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t(\"posts.new_post\")}`}</title>\n            </Helmet>\n            <div className=\"container-fluid\">\n                <h1>{t(\"common.edit_post\")}</h1>\n            </div>\n\n            <section className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onEditPost)}>\n                            <div className=\"col-12 col-lg-3\">\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"text\"\n                                       name=\"title\"\n                                       required\n                                       ref={register({required: true, maxLength: 255})}\n                                       id=\"title\"\n                                       value={title}\n                                       onChange={(e) => setTitle(e.target.value)}\n                                       error={errors.hasOwnProperty(\"title\")}\n                                       errorText={t('error.required_field')}\n                                       labelText={t('add_post.title')}\n                                       maxLength=\"255\"\n                                />\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"postThematique\"\n                                           className=\"is-required\">{t('common.thematique')}</label>\n                                    {\n                                        props.loadingDomaine ?\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\" disabled>\n                                            </select> :\n                                            props.resultDomaine !== null &&\n                                            <select className=\"custom-select\"\n                                                    id=\"postThematique\"\n\n                                                    onChange={event => setThematique(event.target.value)}>\n                                                {\n                                                    props.resultDomaine.map((domaine, index) => (\n                                                        <option value={domaine.rhContentDomaineId}\n                                                                selected={props.resultGetPostById !== null ? props.resultGetPostById.rhContentDomaineId === domaine.rhContentDomaineId : false}\n                                                                key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                    ))\n                                                }\n                                            </select>\n                                    }\n\n                                </div>\n\n                                <div className=\"row\">\n                                    <div className=\"col-6\">\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"date\"\n                                               name=\"date\"\n                                               id=\"date\"\n                                               value={date}\n                                               error={isDataSubmit ? dateFin === null : false}\n                                               onChange={(e) => {\n                                                   setDate(e.target.value);\n                                               }}\n                                               errorText={t('error.date_incorrect')}\n                                               labelText={t('add_post.publication_date')}\n                                               title={t('add_post.expected_format')}\n                                        >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                        </Input>\n                                    </div>\n\n                                    <div className=\"col-6\">\n                                        <Input wrapperClass=\"form-group\"\n                                               inputClass=\"form-control\"\n                                               type=\"date\"\n                                               name=\"dateFin\"\n                                               id=\"dateFin\"\n                                               value={dateFin}\n                                               onChange={(e) => {\n                                                   setDateFin(e.target.value);\n                                               }}\n                                               error={isDataSubmit ? dateFin === null : false}\n                                               errorText={t('error.date_incorrect')}\n                                               labelText={t('add_post.publication_end_date')}\n                                               title={t('add_post.expected_format')}\n                                        >\n                                    <span className=\"form-text small text-muted\"\n                                          id=\"date-format\">{t('add_post.expected_format')}</span>\n                                        </Input>\n                                    </div>\n                                </div>\n\n                                <div className=\"form-group mb-3\">\n\n                                    <ul class=\"nav nav-pills mb-3\" id=\"pills-tab\" role=\"tablist\">\n                                        <li className=\"nav-item\" role=\"presentation\"\n                                            onClick={() => setIsImageSelected(true)}>\n                                            <a className=\"nav-link active\" id=\"home-tab\" data-toggle=\"tab\" href=\"#image\"\n                                               role=\"tab\" aria-controls=\"home\"\n                                               aria-selected=\"true\">{t('common.image')}</a>\n                                        </li>\n                                        <li className=\"nav-item\" role=\"presentation\"\n                                            onClick={() => setIsImageSelected(false)}>\n                                            <a className=\"nav-link\" id=\"video-tab\" data-toggle=\"tab\" href=\"#video\"\n                                               role=\"tab\" aria-controls=\"profile\"\n                                               aria-selected=\"false\">{t('common.video')}</a>\n                                        </li>\n                                    </ul>\n                                    <div className=\"tab-content\" style={{padding: 0, border: 0}}>\n                                        <div className=\"tab-pane fade show active\" id=\"image\" role=\"tabpanel\"\n                                             aria-labelledby=\"image-tab\">\n                                            <label htmlFor=\"postThematique\"\n                                                   className={`is-required ${(files.length === 0) && \"is-invalid\"}`}>{t('add_post.image')}</label>\n                                            <div {...getRootProps({style})}>\n                                                <input {...getInputProps()} />\n                                                {files.length === 0 && <p>{t('add_post.drad_drop_or_select')}</p>}\n                                                {props.resultGetPostById !== null ? Utils.isImageFileUrl(props.resultGetPostById.rhContentPrincipalLink) &&\n                                                    <ThumbsLoadedImage/> : Thumbs}\n                                            </div>\n\n                                            {props.resultGetPostById !== null &&\n                                            files.length === 0 && !Utils.isImageFileUrl(props.resultGetPostById.rhContentPrincipalLink) ?\n                                                isDataSubmit ?\n                                                    <div className=\"invalid-feedback\">\n                                                        {t('error.image_required')}\n                                                    </div> : null : null}\n                                        </div>\n                                        <div className=\"tab-pane fade\" id=\"video\" role=\"tabpanel\"\n                                             aria-labelledby=\"video-tab\">\n                                            <label htmlFor=\"postThematique\"\n                                                   className={`is-required ${(files.length === 0) && \"is-invalid\"}`}>{t('add_post.video')}</label>\n                                            <ThumbsLoadedVideo/>\n                                            <Dropzone\n                                                getUploadParams={getVideoUploadParams}\n                                                onChangeStatus={handleFileUploadChangeStatus}\n                                                onSubmit={handleFileSubmit}\n                                                inputContent={(files, extra) => (extra.reject ? t('common.video_only') : t('add_post.drad_drop_or_select'))}\n                                                styles={{\n                                                    dropzone: {\n                                                        flex: \"1 1 0%\",\n                                                        flexDirection: \"column\",\n                                                        alignItems: \"center\",\n                                                        padding: \"10px\",\n                                                        borderWidth: \"2px\",\n                                                        borderRadius: \"2px\",\n                                                        borderColor: \"rgb(238, 238, 238)\",\n                                                        borderStyle: \"dashed\",\n                                                        backgroundColor: \"rgb(250, 250, 250)\",\n                                                        color: \"rgb(189, 189, 189)\",\n                                                        outline: \"none\",\n                                                        transition: \"border 0.24s ease-in-out 0s\",\n                                                        position: \"normal\",\n                                                        minHeight: \"75px\"\n                                                    },\n                                                    inputLabel: {\n                                                        color: \"rgb(189, 189, 189)\",\n                                                        fontSize: \"1rem\",\n                                                        fontWeight: \"normal\",\n                                                        padding: \"10px\"\n                                                    },\n                                                    submitButtonContainer: {display: \"none\"},\n                                                    dropzoneReject: {borderColor: '#F19373', backgroundColor: '#F1BDAB'}\n                                                }}\n                                                accept=\"video/*,image/*\"\n                                                submitButtonContent={null}\n                                                maxFiles={1}\n                                            />\n                                        </div>\n                                    </div>\n\n                                </div>\n\n                                <div className=\"row\">\n\n                                    <div className=\"col-6\">\n                                        <fieldset className=\"form-group\">\n                                            <div id=\"radio-action\" className=\"form-inline\">\n                                                <div className=\"custom-control custom-switch right\">\n                                                    <input type=\"checkbox\"\n                                                           onChange={(e) => setFeatured(e.target.checked ? 1 : 0)}\n                                                           defaultChecked={props.resultGetPostById !== null ? props.resultGetPostById.rhContentPriorityLevel : false}\n                                                           className=\"custom-control-input\" id=\"featured_switch\"/>\n                                                    <label className=\"custom-control-label\"\n                                                           htmlFor=\"featured_switch\">{t('add_post.featured')}</label>\n                                                </div>\n                                            </div>\n                                        </fieldset>\n                                    </div>\n\n                                    <div className=\"col-6\">\n                                        <fieldset className=\"form-group\">\n                                            <div id=\"radio-action\" className=\"form-inline\">\n                                                <div className=\"custom-control custom-switch right\">\n                                                    <input type=\"checkbox\"\n                                                           onChange={(e) => setHasPieceJointe(e.target.checked)}\n                                                           defaultChecked={props.resultGetPostById !== null ? props.resultGetPostById.images.length > 0 : false}\n                                                           className=\"custom-control-input\" id=\"piece_jointe_switch\"/>\n                                                    <label className=\"custom-control-label\"\n                                                           htmlFor=\"piece_jointe_switch\">{t('common.piece_jointe')}</label>\n                                                </div>\n                                            </div>\n                                        </fieldset>\n                                    </div>\n                                </div>\n\n                                {\n                                    hasPieceJointe &&\n                                    <div className=\"form-group mb-3\">\n                                        <Dropzone\n                                            getUploadParams={getVideoUploadParams}\n                                            onChangeStatus={handlePiecesJointeChangeStatus}\n                                            onSubmit={handleFileSubmit}\n                                            inputContent={(files, extra) => (extra.reject ? t('common.video_only') : t('add_post.drad_drop_or_select'))}\n                                            styles={{\n                                                dropzone: {\n                                                    flex: \"1 1 0%\",\n                                                    flexDirection: \"column\",\n                                                    alignItems: \"center\",\n                                                    padding: \"10px\",\n                                                    borderWidth: \"2px\",\n                                                    borderRadius: \"2px\",\n                                                    borderColor: \"rgb(238, 238, 238)\",\n                                                    borderStyle: \"dashed\",\n                                                    backgroundColor: \"rgb(250, 250, 250)\",\n                                                    color: \"rgb(189, 189, 189)\",\n                                                    outline: \"none\",\n                                                    transition: \"border 0.24s ease-in-out 0s\",\n                                                    position: \"normal\",\n                                                    minHeight: \"75px\"\n                                                },\n                                                inputLabel: {\n                                                    color: \"rgb(189, 189, 189)\",\n                                                    fontSize: \"1rem\",\n                                                    fontWeight: \"normal\",\n                                                    padding: \"10px\"\n                                                },\n                                                submitButtonContainer: {display: \"none\"},\n                                                dropzoneReject: {borderColor: '#F19373', backgroundColor: '#F1BDAB'}\n                                            }}\n                                            accept=\"image/*,video/*,.pdf,doc,.docx,.xml,.xlsx,.xslx,.ppt,.pptx,.txt,.csv\"\n                                            submitButtonContent={null}\n                                        />\n                                    </div>\n                                }\n\n                                <div className=\"submit mt-3\">\n\n                                    {\n                                        props.loading ?\n                                            <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                                <span className=\"sr-only\">{t('common.loading')}</span>\n                                            </button> :\n                                            <button className=\"btn btn-primary\"\n                                                    onSubmit={() => {\n                                                        setIsDataSubmit(true);\n                                                        handleSubmit(onEditPost);\n                                                    }}>{t('common.post')}</button>\n                                    }\n                                </div>\n                            </div>\n                            <div className=\"col-12 col-lg-9\">\n                                <div className=\"form-group required\">\n                                    <label htmlFor=\"PostContent\"\n                                           className=\"is-required\">{t('add_post.contenu')}</label>\n\n                                    <RichTextEditor name=\"contenu\" ref={editor}\n                                                    value={contenu}\n                                                    onBlur={event => setContenu(event.target.innerHTML)} // preferred to use only this option to update the content for performance reasons\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.modifyPostReducer.loading,\n    result: state.modifyPostReducer.result,\n    error: state.modifyPostReducer.error,\n\n    loadingDomaine: state.getAllDomainesReducer.loading,\n    resultDomaine: state.getAllDomainesReducer.result,\n    errorDomaine: state.getAllDomainesReducer.error,\n\n    loadingUploadImage: state.uploadImageReducer.loading,\n    resultUploadImage: state.uploadImageReducer.result,\n    errorUploadImage: state.uploadImageReducer.error,\n\n    loadingGetPostById: state.getPostByIdReducer.loading,\n    resultGetPostById: state.getPostByIdReducer.result,\n    errorGetPostById: state.getPostByIdReducer.error,\n\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllDomaineAction,\n    uploadImageAction,\n\n    getPostByIdAction,\n\n    addNewPostAction,\n    addNewPostReset,\n\n    editPostAction,\n    editPostReset\n\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(EditPost));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\index.js",["1078"],"import React from 'react';\nimport './style.css';\nimport {Images} from \"../../config/Images\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useHistory} from \"react-router-dom\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\n\nlet route = require(\"../../utils/route\");\n\nexport default function User(props) {\n    console.log(\"Admin page\");\n    const {t} = useTranslation();\n    let history = useHistory();\n\n    return (\n        <>\n            <div className=\"container-fluid dashboard-admin\">\n                <div className=\"row\">\n                    <div className=\"col-xl-3 col-md-6 mb-4\">\n                        <div className=\"card border-left-blue shadow h-100 py-2  rounded-sm\"\n                             style={{border: \"1px solid var(--gray)\"}}\n                             onClick={() => history.push(route.post.admin_post)}>\n                            <div className=\"card-body\">\n                                <div className=\"row no-gutters align-items-center\">\n                                    <div className=\"col mr-2\">\n                                        <div className=\"text-xs font-weight-bold color-blue text-uppercase mb-1\">\n                                            Demandes\n                                        </div>\n                                        <div className=\"h5 mb-0 font-weight-bold text-gray-800\">1</div>\n                                    </div>\n                                    <div clarssName=\"col-auto\">\n                                        <i className=\"fas fa-calendar fa-2x text-gray-300\"></i>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n\n                <div className=\"row\">\n\n                    <div className=\"col-md-4\">\n                        <div className=\"bg-success rounded-sm w-100 d-flex py-3 px-3 br-4\">\n                            <img alt=\"orange et moi\"\n                                 src={Images.envelope} width={108} height={100}/>\n                            <div className=\"ml-2 d-flex flex-column\">\n                                <h1 className=\"font-size-18 font-size-lg-24 align-self-center\">{t('admin.demands_management')}</h1>\n                                <NavLink\n                                    style={{width: \"max-content\"}}\n                                    to={{\n                                        pathname: route.blog.admin_blog\n                                    }}\n                                    className=\"btn btn-secondary mt-auto\"\n                                    exact>\n                                    {t('common.consulter')}\n                                </NavLink>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n        </>\n    );\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\CategoryActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\Demands\\index.js",["1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094"],"import React, {useEffect, useState} from 'react';\nimport {Helmet} from \"react-helmet\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, useHistory, withRouter} from \"react-router-dom\";\nimport {getAllPostBackendAction, getAllPostsAction, getAllPostsReset} from \"../../../redux/api/PostsApi\";\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\nimport {validatePublicationAction, validatePublicationReset} from \"../../../redux/api/ValidationApi\";\nimport {postFaqAction, postFaqReset} from \"../../../redux/api/FaqApi\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport * as Utils from \"../../../utils\";\nimport {Constant} from \"../../../config/Constant\";\nimport * as moment from \"moment\";\nimport \"moment/locale/fr\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCheck, faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport _ from \"lodash\";\nimport {Config} from \"../../../config/ServerConfig\";\nimport CustomMaterialMenu from \"../../../components/CustomMaterialMenu\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport DataTableComponent from \"../../../components/DataTable\";\nimport ReactPlayer from \"react-player\";\n\n\nlet route = require('../../../utils/route');\n\nfunction UserDemands(props) {\n    const {t} = useTranslation();\n    const [isLoading, setIsLoading] = useState(true);\n    const [search, setSearch] = useState('');\n    const [posts, setPosts] = useState([]);\n    const [postsPublished, setPostsPublished] = useState([]);\n    const [postsWaiting, setPostsWaiting] = useState([]);\n    const [postsExpired, setPostsExpired] = useState([]);\n    const [postsDeleted, setPostsDeleted] = useState([]);\n    const [tabsActiveIndex, setTabsActiveIndex] = useState(0);\n    let history = useHistory();\n\n    const columns = [\n        {\n            name: t('common.status'),\n            selector: 'rhContentIsOK',\n            width: '56px',\n            sortable: true,\n            cell: post => post.rhContentIsOK ?\n                <FontAwesomeIcon icon={faCheck} color='var(--success)' className=\"mr-1\"/> :\n                <FontAwesomeIcon icon={faTimes} color='var(--danger)' className=\"mr-1\"/>\n        },\n        {\n            name: \"Intitulé de la demande\",\n            selector: 'rhContentTitle',\n            sortable: true,\n        },\n        {\n            name: \"Description de la demande\",\n            selector: 'rhContentDescription',\n            sortable: false,\n            width: \"35%\",\n            cell: d => Utils.cutString(Utils.removeTag(d.rhContentDescription), 150)\n        },\n        {\n            name: t('add_post.publication_date'),\n            selector: 'rhContentDateCeated',\n            width: '200px',\n            sortable: true,\n            format: d => moment(d.rhContentDateCeated).format(\"lll\")\n        }\n\n    ];\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllPostsReset();\n        props.getAllPostBackendAction();\n    }, []);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            setPostsPublishedAction();\n            setPostsDeleted(props.result.filter((post) => !post.rhContentIsOK));\n            setPostsWaiting(props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDate = moment(post.rhContentDateCeated).format('lll');\n                return moment(currentDate).isBefore(postDate);\n            }));\n            setPostsExpired(props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDateExpired = moment(post.rhContentDateOnPublish).format('lll');\n                return moment(postDateExpired).isBefore(currentDate);\n\n            }));\n            setTimeout(() => {\n                window.$(\".video-preview video\").initVideoLoader();\n                window.$(\".img-post\").initImageNotLoadPlaceHolder();\n            }, 500);\n        }\n\n    }, [props]);\n\n    useEffect(() => {\n        if (props.result !== null) setIsLoading(false);\n        else setIsLoading(true);\n    }, [posts]);\n\n    const setPostsPublishedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => post.rhContentIsOK);\n            setPosts(tempPosts);\n            setPostsPublished(tempPosts);\n        }\n    };\n\n    const setPostsWaitingAction = () => {\n        console.log('waiting click');\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDate = moment(post.rhContentDateCeated).format('lll');\n                return moment(currentDate).isBefore(postDate);\n            });\n            setPosts(tempPosts);\n            setPostsWaiting(tempPosts);\n            setTabsActiveIndex(1);\n        }\n    };\n\n    const setPostsExpiredAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => {\n                let currentDate = moment().format(\"lll\");\n                let postDateExpired = moment(post.rhContentDateOnPublish).format('lll');\n                return moment(postDateExpired).isBefore(currentDate);\n\n            });\n            setPosts(tempPosts);\n            setPostsExpired(tempPosts);\n            setTabsActiveIndex(2);\n        }\n    };\n\n    const setPostsDeletedAction = () => {\n        if (props.result !== null) {\n            let tempPosts = props.result.filter((post) => !post.rhContentIsOK);\n            setPosts(tempPosts);\n            setPostsDeleted(tempPosts);\n            setTabsActiveIndex(3);\n        }\n    };\n\n    const handleSearch = () => {\n        console.log(search);\n        if (props.result !== null)\n            setPosts(props.result.filter((post) => post.rhContentTitle.toLowerCase().includes(search.toLowerCase())))\n\n    };\n\n    const ExpandedComponent = ({data}) => <pre>{JSON.stringify(data, null, 2)}</pre>;\n\n    const renderPostTable = (data) => (\n        <DataTableComponent\n            columns={columns}\n            data={[]}\n            progressPending={props.loading}\n            defaultSortField=\"name\"\n            loading={props.loading || isLoading}\n            selectableRowsComponent={Checkbox}\n            onRowClicked={(post) => history.push({\n                pathname: `${route.post.edit_post}/${post.rhContentId}`\n            })}\n            expandableRows={false}\n            expandableRowsComponent={<ExpandedComponent/>}\n        />\n    );\n\n    return (\n        <>\n            <div className=\"container-fluid\">\n                <Helmet>\n                    <title>{`${t(\"app.name\")} - ${t('posts.title')}`}</title>\n                </Helmet>\n                <h1>{t(\"user.demands\")}</h1>\n\n                <div className=\"row\">\n                    <div className=\"col-12 o-layer\">\n\n                        <div className=\"row mb-3\">\n                            <div className=\"col-auto mr-auto\">\n                                <NavLink to={route.user.add_new_demand} className=\"btn btn-primary\" exact>\n                                    <span className=\"icon icon-Add\" aria-hidden=\"true\"/>\n                                    {t('user.new_demands')}\n                                </NavLink>\n                            </div>\n                            <div className=\"col-auto\">\n                                <div className=\"input-group\">\n                                    <input type=\"text\" className=\"form-control\" placeholder={t('user.find_demand')}\n                                           aria-label={t('posts.find_post')} aria-describedby=\"button-addon2\"\n                                           value={search} onChange={(e) => {\n                                        setSearch(e.target.value);\n                                        handleSearch();\n                                    }}/>\n                                    <div className=\"input-group-append\">\n                                        <button type=\"button\" className=\"btn btn-secondary btn-icon\">\n                                            <span className=\"sr-only\">Icon</span>\n                                            <span className=\"icon icon-search\" aria-hidden=\"true\"></span>\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div className=\"mt-4\">\n                            <div className=\"media-body\">\n                                {renderPostTable(posts)}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getAllPostsReducer.loading,\n    result: state.getAllPostsReducer.result,\n    error: state.getAllPostsReducer.error,\n\n    loadingPostGlossary: state.postGlossaryReducer.loading,\n    resultPostGlossary: state.postGlossaryReducer.result,\n    errorPostGlossary: state.postGlossaryReducer.error,\n\n    loadingGetDomaine: state.getAllDomainesReducer.loading,\n    resultGetDomaine: state.getAllDomainesReducer.result,\n    errorGetDomaine: state.getAllDomainesReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllPostsAction,\n    getAllPostsReset,\n\n    getAllPostBackendAction,\n\n    getAllDomaineAction,\n    validatePublicationAction,\n    validatePublicationReset,\n\n    postFaqAction,\n    postFaqReset,\n}, dispatch);\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(UserDemands));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\User\\Demands\\NewDemands\\index.js",["1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110"],"import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {useForm} from \"react-hook-form\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {useHistory} from \"react-router-dom\";\nimport {Input} from \"../../../../components/Input\";\nimport {getAllDomaineAction} from \"../../../../redux/api/DomaineApi\";\nimport {addNewPostAction, addNewPostReset} from \"../../../../redux/api/PostsApi\";\nimport {useDropzone} from 'react-dropzone';\nimport * as Utils from '../../../../utils';\nimport {Constant} from \"../../../../config/Constant\";\nimport './style.css';\nimport {toast} from 'react-toastify';\nimport * as moment from 'moment';\nimport {Helmet} from \"react-helmet\";\nimport {uploadImageAction} from \"../../../../redux/api/ImageApi\";\nimport Dropzone from 'react-dropzone-uploader'\nimport RichTextEditor from \"../../../../components/RichTextEditor\";\nimport {Config} from \"../../../../config/ServerConfig\";\nimport {getAllCategoryAction, getAllCategoryReset} from \"../../../../redux/api/CategoryApi\";\n\nlet route = require('../../../../utils/route');\n\nfunction NewDemand(props) {\n    const {t} = useTranslation();\n    const {register, handleSubmit, errors} = useForm();\n    let history = useHistory();\n    const editor = useRef(null);\n    const [title, setTitle] = useState('');\n    const [date, setDate] = useState(null);\n    const [dateFin, setDateFin] = useState(null);\n    const [thematique, setThematique] = useState(1);\n    const [video, setVideo] = useState(null);\n    const [contenu, setContenu] = useState('');\n    const [featured, setFeatured] = useState(0);\n    const [hasPieceJointe, setHasPieceJointe] = useState(false);\n    const [piecesJointes, setPieceJointe] = useState([]);\n    const [isDataSubmit, setIsDataSubmit] = useState(false);\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const [files, setFiles] = useState([]);\n    const [isImageSelected, setIsImageSelected] = useState(true);\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n        accept: \".jpeg,.png,.gif,.jpg,.svg\",\n        maxFiles: 1,\n        multiple: false,\n        onDrop: acceptedFiles => {\n            console.log(acceptedFiles);\n            acceptedFiles.map(file => {\n                let imageToSend = new FormData();\n                imageToSend.append(\"file\", file);\n                props.uploadImageAction(imageToSend);\n            });\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            })));\n        }\n    });\n\n    const style = useMemo(() => ({\n        ...Utils.baseStyle,\n        ...(isDragActive ? Utils.activeStyle : {}),\n        ...(isDragAccept ? Utils.acceptStyle : {}),\n        ...(isDragReject ? Utils.rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject,\n        isDragAccept\n    ]);\n\n    const Thumbs = files.map(file => (\n        <div style={Utils.thumbStyle} key={file.name}>\n            <div style={Utils.thumbInnerStyle}>\n                {\n                    props.loadingUpdloadPhoto &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                <img\n                    src={file.preview}\n                    style={Utils.imgStyle}\n                />\n            </div>\n        </div>\n    ));\n\n    const getVideoUploadParams = ({meta}) => {\n        return {url: Config.uploadImageUrl}\n    };\n\n    const handleFileUploadChangeStatus = ({meta, file, xhr}, status) => {\n        console.log(status, meta, file);\n        if (status === \"done\") {\n            let response = JSON.parse(xhr.response);\n            setVideo(response.imageName);\n        }\n    };\n\n    const handlePiecesJointeChangeStatus = ({meta, file, xhr}, status) => {\n        let piecesJointesUpload = piecesJointes;\n        console.log(status, meta, file);\n        if (status === \"done\") {\n            let response = JSON.parse(xhr.response);\n            piecesJointesUpload.push({imageLink: response.imageName});\n            setPieceJointe(piecesJointesUpload);\n        }\n    };\n\n    const handleFileSubmit = (files, allFiles) => {\n        console.log(files.map(f => f.meta));\n        allFiles.forEach(f => f.remove());\n    };\n\n    useEffect(() => () => {\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n\n    const onSubmitPost = () => {\n        setIsDataSubmit(true);\n        props.addNewPostAction({\n            rhContentTitle: title,\n            rhContentDescription: contenu,\n            rhContentPriorityLevel: featured,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentPrincipalLink: isImageSelected ? props.resultUploadImage !== null ? props.resultUploadImage.imageName : \"\" : video,\n            rhContentDatePublish: date !== null ? moment(date).format(\"YYYY-MM-DD\") : moment().format(\"YYYY-MM-DD\"),\n            rhContentDateOnPublish: dateFin === null ? moment(moment().add(1, 'y')).format(\"YYYY-MM-DD\") : moment(dateFin).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId,\n            images: piecesJointes\n        });\n    };\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n        props.getAllCategoryAction();\n    }, []);\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.result !== null) {\n            toast.dark(t('posts.add_new_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.push(route.post.admin_post);\n            props.addNewPostReset();\n        }\n        console.log(props.error);\n        if (props.error !== null) {\n            toast.error(t(Utils.displayErrorRequest(props.error)), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            props.addNewPostReset();\n        }\n        if (props.resultDomaine !== null) {\n            console.log(\"Domaine has lodaded\", props.resultDomaine.filter(domaine => domaine.rhContentCategoryId === Constant.blogID)[0].rhContentDomaineId);\n            setThematique(props.resultDomaine.filter(domaine => domaine.rhContentCategoryId === Constant.blogID)[0].rhContentDomaineId);\n        }\n    }, [props]);\n\n    console.log(\"Thematique\", parseInt(thematique));\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t(\"user.new_demands\")}`}</title>\n            </Helmet>\n            <div className=\"container-fluid\">\n                <h1>{t(\"user.new_demands\")}</h1>\n            </div>\n\n            <section className=\"container-fluid\">\n                <div className=\"row\">\n                    <div className=\"col\">\n                        <form className=\"row\" id=\"PostAdminEditForm\" onSubmit={handleSubmit(onSubmitPost)}>\n                            <div className=\"col-12 col-lg-3\">\n\n                                <Input wrapperClass=\"form-group\"\n                                       inputClass=\"form-control\"\n                                       type=\"text\"\n                                       name=\"title\"\n                                       required\n                                       ref={register({required: true, maxLength: 255})}\n                                       id=\"title\"\n                                       value={title}\n                                       onChange={(e) => setTitle(e.target.value)}\n                                       error={errors.hasOwnProperty(\"title\")}\n                                       errorText={t('error.required_field')}\n                                       labelText={t('add_post.title')}\n                                       maxLength=\"255\"\n                                />\n\n                                <div className=\"row\">\n\n                                    <div className=\"col-6\">\n                                        <fieldset className=\"form-group\">\n                                            <div id=\"radio-action\" className=\"form-inline\">\n                                                <div className=\"custom-control custom-switch right\">\n                                                    <input type=\"checkbox\"\n                                                           onChange={(e) => setHasPieceJointe(e.target.checked)}\n                                                           className=\"custom-control-input\" id=\"piece_jointe_switch\"/>\n                                                    <label className=\"custom-control-label\"\n                                                           htmlFor=\"piece_jointe_switch\">{t('common.piece_jointe')}</label>\n                                                </div>\n                                            </div>\n                                        </fieldset>\n                                    </div>\n                                </div>\n\n                                {\n                                    hasPieceJointe &&\n                                    <div className=\"form-group mb-3\">\n                                        <Dropzone\n                                            getUploadParams={getVideoUploadParams}\n                                            onChangeStatus={handlePiecesJointeChangeStatus}\n                                            onSubmit={handleFileSubmit}\n                                            inputContent={(files, extra) => (extra.reject ? t('common.video_only') : t('add_post.drad_drop_or_select'))}\n                                            styles={{\n                                                dropzone: {\n                                                    flex: \"1 1 0%\",\n                                                    flexDirection: \"column\",\n                                                    alignItems: \"center\",\n                                                    padding: \"10px\",\n                                                    borderWidth: \"2px\",\n                                                    borderRadius: \"2px\",\n                                                    borderColor: \"rgb(238, 238, 238)\",\n                                                    borderStyle: \"dashed\",\n                                                    backgroundColor: \"rgb(250, 250, 250)\",\n                                                    color: \"rgb(189, 189, 189)\",\n                                                    outline: \"none\",\n                                                    transition: \"border 0.24s ease-in-out 0s\",\n                                                    position: \"normal\",\n                                                    minHeight: \"75px\"\n                                                },\n                                                inputLabel: {\n                                                    color: \"rgb(189, 189, 189)\",\n                                                    fontSize: \"1rem\",\n                                                    fontWeight: \"normal\",\n                                                    padding: \"10px\"\n                                                },\n                                                submitButtonContainer: {display: \"none\"},\n                                                dropzoneReject: {borderColor: '#F19373', backgroundColor: '#F1BDAB'}\n                                            }}\n                                            accept=\"image/*,video/*,.pdf,doc,.docx,.xml,.xlsx,.xslx,.ppt,.pptx,.txt,.csv\"\n                                            submitButtonContent={null}\n                                        />\n                                    </div>\n                                }\n\n                                <div className=\"submit mt-3\">\n\n                                    {\n                                        props.loading ?\n                                            <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                                <span className=\"sr-only\">{t('common.loading')}</span>\n                                            </button> :\n                                            <button className=\"btn btn-primary\"\n                                                    onSubmit={() => {\n                                                        setIsDataSubmit(true);\n                                                        handleSubmit(onSubmitPost);\n                                                    }}>{t('common.send')}</button>\n                                    }\n                                </div>\n\n                            </div>\n                            <div className=\"col-12 col-lg-9\">\n                                <div className=\"form-group required\">\n                                    <label htmlFor=\"PostContent\"\n                                           className=\"is-required\">{t('add_post.contenu')}</label>\n\n                                    <RichTextEditor ref={editor}\n                                                    value={contenu}\n                                                    onBlur={event => setContenu(event.target.innerHTML)} // preferred to use only this option to update the content for performance reasons\n                                    />\n                                </div>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </section>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.addNewPostReducer.loading,\n    result: state.addNewPostReducer.result,\n    error: state.addNewPostReducer.error,\n\n    loadingCategory: state.getAllCategoryReducer.loading,\n    resultCategory: state.getAllCategoryReducer.result,\n    errorCategory: state.getAllCategoryReducer.error,\n\n    loadingDomaine: state.getAllDomainesReducer.loading,\n    resultDomaine: state.getAllDomainesReducer.result,\n    errorDomaine: state.getAllDomainesReducer.error,\n\n    loadingUploadImage: state.uploadImageReducer.loading,\n    resultUploadImage: state.uploadImageReducer.result,\n    errorUploadImage: state.uploadImageReducer.error,\n\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllDomaineAction,\n    uploadImageAction,\n\n    addNewPostAction,\n    addNewPostReset,\n\n    getAllCategoryAction,\n    getAllCategoryReset\n\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewDemand);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\TestimonialApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\ValidationApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\config\\Images.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\PostsType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\TextArea\\TextArea.js",["1111"],"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useForm} from \"react-hook-form\";\n\nexport const TextArea = React.forwardRef((props, ref) => {\n\n    const {register} = useForm();\n    const {\n        wrapperClass,\n        inputClass,\n        name,\n        value,\n        id,\n        onChange,\n        placeholder,\n        error,\n        children,\n        errorText,\n        labelText,\n        required,\n        ...rest\n    } = props;\n    let className = `${error && \"is-invalid\"} ${required && \"is-required\"}`;\n\n    return (\n        <div className={wrapperClass}>\n            <label htmlFor={id}\n                   className={className}>{`${labelText} `}</label>\n            {\n                <textarea name={name}\n                          value={value}\n                          ref={ref}\n                          className={`${inputClass} ${error && \"is-invalid\"}`}\n                          id=\"password\"\n                          onChange={onChange}\n                          placeholder={placeholder}\n                          {...rest}>\n                </textarea>\n\n            }\n            {children}\n            {\n                error &&\n                <div className=\"invalid-feedback\">\n                    {errorText}\n                </div>\n            }\n        </div>\n    )\n});\n\nTextArea.propTypess = {\n    wrapperClass: PropTypes.string,\n    inputClass: PropTypes.string,\n    name: PropTypes.string,\n    value: PropTypes.string,\n    id: PropTypes.string,\n    onChange: PropTypes.func,\n    placeholder: PropTypes.string,\n    error: PropTypes.bool,\n    errorText: PropTypes.string,\n    labelText: PropTypes.string,\n    required: PropTypes.bool\n};\n\nTextArea.defaultProps = {\n    wrapperClass: \"form-group\",\n    inputClass: \"form-control\",\n    name: \"\",\n    value: \"\",\n    id: \"\",\n    required: false,\n    onChange: () => {\n    },\n    placeholder: \"\",\n    error: \"\",\n    errorText: \"\",\n    labelText: \"\"\n};","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\actions\\ImageActions.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\CategoryType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Input\\index.js",["1112"],"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport {useForm} from \"react-hook-form\";\n\nexport const Input = React.forwardRef((props, ref) => {\n\n    const {register} = useForm();\n    const {\n        wrapperClass,\n        inputClass,\n        type,\n        name,\n        value,\n        id,\n        onChange,\n        placeholder,\n        error,\n        children,\n        errorText,\n        labelText,\n        required,\n        ...rest\n    } = props;\n    let className = `${error && \"is-invalid\"} ${required && \"is-required\"}`;\n\n    return (\n        <div className={wrapperClass}>\n            <label htmlFor={id}\n                   className={className}>{`${labelText} `}</label>\n            {\n                <input type={type}\n                       name={name}\n                       value={value}\n                       ref={ref}\n                       className={`${inputClass} ${error && \"is-invalid\"}`}\n                       id={id}\n                       onChange={onChange}\n                       placeholder={placeholder}\n                       {...rest}/>\n            }\n            {children}\n            {\n                error &&\n                <div className=\"invalid-feedback\">\n                    {errorText}\n                </div>\n            }\n        </div>\n    )\n});\n\nInput.propTypess = {\n    wrapperClass: PropTypes.string,\n    inputClass: PropTypes.string,\n    type: PropTypes.oneOf(['text', 'password', 'number', 'date']),\n    name: PropTypes.string,\n    value: PropTypes.string,\n    id: PropTypes.string,\n    onChange: PropTypes.func,\n    placeholder: PropTypes.string,\n    error: PropTypes.bool,\n    errorText: PropTypes.string,\n    labelText: PropTypes.string,\n    required: PropTypes.bool\n};\n\nInput.defaultProps = {\n    wrapperClass: \"form-group\",\n    inputClass: \"form-control\",\n    type: \"text\",\n    name: \"\",\n    value: \"\",\n    id: \"\",\n    required: false,\n    onChange: () => {\n    },\n    placeholder: \"\",\n    error: \"\",\n    errorText: \"\",\n    labelText: \"\"\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\SecondaryNavigation\\index.js",["1113","1114"],"import React, {useEffect} from 'react';\nimport \"./style.css\";\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink, withRouter} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {Constant} from \"../../config/Constant\";\n\nlet route = require('../../utils/route');\n\nfunction SecondaryNavigation(props) {\n    const {menuLink, data} = props;\n    const {t} = useTranslation();\n\n    useEffect(() => {\n        data !== null &&\n        window.$('.marquee-vertical').marquee({delay: 5000, direction: 'vertical'});\n    });\n\n    useEffect(() => {\n        data !== null &&\n        window.$('.marquee-vertical').marquee({delay: 5000, direction: 'vertical'});\n    }, [props.location.pathname]);\n\n    return (\n        <header id=\"secondary_nav\" className=\"bg-dark mb-4\">\n            <div className=\"container-main\">\n                <div className=\"main-container ellispsis-supported row\">\n                    <div className=\"col-2\" style={{padding: 0}}>\n                        <ul className=\"menu clearfix\">\n                            <li className=\"breadcrumb\">\n                                <span>{t('add_post.featured')}</span>\n                            </li>\n                        </ul>\n                    </div>\n                    <div className=\"col-8\">\n                        <ul className=\"marquee-vertical\">\n                            {\n                                data !== null ?\n                                    data.map((post, index) => (\n                                        <li key={index}>\n                                            <NavLink to={{\n                                                pathname: `${menuLink}/${post.rhContentDomaineId}/${post.rhContentId}`,\n                                            }} exact>\n                                                {post.rhContentTitle}\n                                            </NavLink>\n                                        </li>\n                                    )) : null\n                            }\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </header>\n    );\n}\n\nSecondaryNavigation.propTypes = {\n    menuLink: PropTypes.string,\n    data: PropTypes.array\n};\n\nSecondaryNavigation.defaultProps = {\n    menuLink: route.post.root,\n    data: []\n};\n\nexport default withRouter(connect(null, null)(SecondaryNavigation));\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\AboutOpenRHWidget\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\NavigationLight\\index.js",["1115","1116","1117","1118","1119","1120","1121","1122","1123","1124"],"import React, {useEffect} from 'react';\nimport PropTypes from \"prop-types\";\nimport Button from \"../Button\";\nimport {FakeData} from \"../../fakeData\";\nimport {bindActionCreators} from 'redux';\nimport {getAllDomaineAction, getAllDomaineReset, getDomaineByPostAction} from \"../../redux/api/DomaineApi\";\nimport {connect} from \"react-redux\";\nimport Loader from \"../Loader\";\nimport {useParams, withRouter, NavLink} from \"react-router-dom\";\nimport './style.css';\nimport {useTranslation} from \"react-i18next\";\n\nlet route = require('../../utils/route');\n\nfunction NavigationLight(props) {\n\n    const {t} = useTranslation();\n    let {id, page, domaine, category} = useParams();\n    const {\n        menus,\n        menuLink,\n        categoryId,\n        additionnalClasses,\n        ...rest\n    } = props;\n    const matchWorkaround = (pathname) => (isMatch, location) => isMatch || location.pathname.includes(pathname);\n\n    useEffect(() => {\n        props.getDomaineByPostAction(categoryId);\n    }, []);\n\n    useEffect(() => {\n        props.getDomaineByPostAction(category);\n    }, [props.location.pathname]);\n\n    console.log(\"Result\", props.result);\n    return (\n        <>\n            {\n                props.loading ?\n                    <div className={`o-nav-local navbar-light ${additionnalClasses && \"light-nav\"}`}>\n                        <nav role=\"navigation\" className=\"container\" aria-label=\"News categories navigation\">\n                            <Loader/>\n                        </nav>\n                    </div> :\n\n                    props.result !== null &&\n\n                    <div className={`o-nav-local navbar-light ${additionnalClasses && \"light-nav\"}`}>\n                        <nav role=\"navigation\" className=\"container\" aria-label=\"News categories navigation\">\n                            <ul className=\"nav\">\n                                <li><NavLink to={{\n                                    pathname: `${menuLink}`\n                                }}\n                                             className=\"nav-link\">\n                                    {t('common.general')}\n                                </NavLink>\n                                </li>\n                                {\n                                    props.result.map((domaine, index) => (\n                                        <li className={`nav-item`} key={`menu-${index}`}>\n                                            <NavLink to={`${menuLink}/${domaine.rhContentDomaineId}`}\n                                                     isActive={matchWorkaround(domaine.rhContentDomaineId)}\n                                                     className=\"nav-link\" exact>\n                                                {domaine.rhContentDomaineName}\n                                            </NavLink>\n                                        </li>\n                                    ))\n                                }\n                            </ul>\n                        </nav>\n                    </div>\n            }\n        </>\n\n\n    );\n}\n\nconst mapStateToProps = state => ({\n    loading: state.getDomaineByPostReducer.loading,\n    result: state.getDomaineByPostReducer.result,\n    error: state.getDomaineByPostReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getDomaineByPostAction,\n\n}, dispatch);\n\nNavigationLight.propTypes = {\n    menus: PropTypes.array,\n    menuLink: PropTypes.string,\n    categoryId: PropTypes.number,\n    additionnalClasses: PropTypes.bool,\n};\n\nNavigationLight.defaultProps = {\n    menus: [],\n    categoryId: 1,\n    additionnalClasses: false,\n    menuLink: route.post.root\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(NavigationLight));\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\DataTable\\index.js",["1125","1126"],"import React, {useEffect} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport DataTable from 'react-data-table-component';\nimport PropTypes from \"prop-types\";\nimport {useTranslation} from \"react-i18next\";\nimport {Constant} from \"../../config/Constant\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        '& > * + *': {\n            marginTop: theme.spacing(2),\n        },\n    },\n}));\n\nconst LinearIndeterminate = () => {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n            <LinearProgress color=\"secondary\"/>\n        </div>\n    );\n};\n\nexport default function DataTableComponent(props) {\n    const {\n        data,\n        loading,\n        ...rest\n    } = props;\n    const {t} = useTranslation();\n\n    return (\n        <DataTable\n            {...rest}\n            data={data}\n            progressPending={loading}\n            progressComponent={<LinearIndeterminate/>}\n            persistTableHead\n            noDataComponent={t('common.no_data_table')}\n            customStyles={Constant.tableCustomStyles}\n            pagination\n            selectableRows\n            highlightOnHover\n            pointerOnHover\n            persistTableHead\n        />\n    );\n};\n\n\nDataTableComponent.propTypes = {\n    loading: PropTypes.bool,\n    data: PropTypes.array\n};\n\nDataTableComponent.defaultProps = {\n    data: [],\n    loading: false\n};\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\TestimonialList\\index.js",["1127","1128","1129","1130","1131","1132","1133"],"import React, {useEffect, useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport {useTranslation} from \"react-i18next\";\nimport moment from 'moment';\nimport 'moment/locale/en-gb';\nimport 'moment/locale/fr';\nimport './style.css';\nimport * as Utils from '../../utils';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faQuoteLeft} from \"@fortawesome/free-solid-svg-icons\";\nimport {faQuoteRight} from \"@fortawesome/free-solid-svg-icons\";\nimport $ from \"jquery\";\nimport Slider from \"../Slider\";\nimport {Images} from \"../../config/Images\";\n\nconst TestimonialItem = (props) => (\n    <div className=\"swiper-slide testimonialItem\" style={{width: \"300px\"}} key={props.testimonial.rhContentId}\n         data-testimonial={JSON.stringify(props.testimonial)}>\n        <div className=\"card rounded-lg shadow-lg\"\n             data-target=\"#testimonialDetail\">\n            <div className=\"d-flex justify-content-between\">\n                <div className=\"px-1 py-1\">\n                    <FontAwesomeIcon icon={faQuoteLeft} color='var(--orange)' className=\"mr-1\"/>\n                </div>\n                <div className=\"content py-4 px-1 text-center\">\n                    <p>{Utils.cutString(props.testimonial.rhContentDescription, 150)}</p>\n                </div>\n                <div className=\"px-1 py-1\" style={{marginTop: 'auto'}}>\n                    <FontAwesomeIcon icon={faQuoteRight} color='var(--orange)' className=\"mr-1\"/>\n                </div>\n            </div>\n            <div className=\"about text-center p-4 text-white\">\n                <img alt=\"Image placeholder\"\n                     loading=\"lazy\"\n                     className=\"rounded-circle img-post\"\n                     src={Images.defaultImage}\n                     width=\"60\"/>\n                <h4 className=\"mb-0 mt-3\" style={{color: 'var(--orange)'}}>{props.testimonial.user.userName}</h4>\n                <span>{props.testimonial.user.userFunction}</span>\n            </div>\n        </div>\n    </div>\n);\n\nexport default function TestimonialList(props) {\n    moment.locale(\"fr\");\n    const {\n        testimonials,\n        ...rest\n    } = props;\n\n    const [cardModal, setCardModal] = useState(null);\n\n    const slideParams = {\n        slidesPerView: 3,\n        spaceBetween: 30,\n        pagination: {\n            el: '.swiper-pagination',\n            clickable: true,\n        }\n    };\n\n    useEffect(() => {\n        $('.testimonialItem').on('click', event => {\n            let testimonial = $(event.target).parents(\"div.testimonialItem\").data('testimonial');\n            $('.intro').html(testimonial.rhContentDescription);\n            $('.testimonial-date').html(moment(testimonial.rhContentDateCeated).format('lll'));\n            $('.author').html(testimonial.user.userName + \" / \" + testimonial.user.userFunction);\n            $('#btnModal').trigger('click');\n        });\n        window.$(\".img-post\").initImageNotLoadPlaceHolder();\n    });\n\n\n    const {i18n, t} = useTranslation();\n\n    const renderModalTestimonialDetail = () => (\n        <div className=\"modal modal-detail fade\" id=\"testimonialDetail\" data-keyboard=\"false\" tabIndex=\"-1\"\n             aria-labelledby=\"addFaqModalLabel\" aria-hidden=\"true\">\n            <div className=\"modal-dialog\">\n                <div className=\"modal-content\">\n                    <div className=\"card border-0 \">\n                        <div className=\"card-header\"></div>\n                        <div className=\"card-body text-center \">\n                            <img className=\"img-1 img-fluid img-post\"\n                                 loading=\"lazy\"\n                                 src={Images.defaultImage}\n                            />\n                            <div className=\"quotes\">\n                                <FontAwesomeIcon size=\"3x\" icon={faQuoteLeft} color=\"var(--orange)\"\n                                                 className=\"quotes-img\"/>\n                                <p className=\"card-text bold text-center px-md-3 intro\">I believe that one defines\n                                    oneself by reinvention. To not be like your parents. To not be like your friends. To\n                                    be yourself. To cut yourself out of stone. </p>\n                                <h6 className=\"font-weight-bold mt-4 author\">Nicholas V./ Company Inc</h6>\n                                <blockquote className=\"blockquote\">\n                                    <footer className=\"blockquote-footer testimonial-date\">18 janv. 2021 16:49</footer>\n                                </blockquote>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n    return (\n        <>\n            {renderModalTestimonialDetail()}\n            <div className=\"container mt-5\">\n                <div className=\"row d-flex justify-content-center align-item-center testimonials\">\n                    <button type=\"button\" className=\"btn btn-primary\" data-toggle=\"modal\" id=\"btnModal\"\n                            style={{display: \"none\"}} data-target=\"#testimonialDetail\"/>\n                    {\n                        testimonials.length === 0 ?\n                            <div className=\"alert alert-info\" role=\"alert\">\n                                <span className=\"alert-icon\"><span className=\"sr-only\">Info</span></span>\n                                <p>{t('testimonial.no_testimonial')}</p>\n                            </div> :\n                            <div className=\"swiper-wrapper\">\n                                <Slider spaceBetween={50}\n                                        slidesPerView={3}\n                                        slides={testimonials}\n                                        effect={'coverflow'}\n                                        grabCursor={true}\n                                        autoplay={true}\n                                        centeredSlides={true}\n                                        renderItem={(testimonial) => (\n                                            <TestimonialItem testimonial={testimonial}/>\n                                        )}\n                                />\n                            </div>\n                    }\n\n                </div>\n            </div>\n        </>\n    );\n};\n\nTestimonialList.propTypes = {\n    testimonials: PropTypes.array\n};\n\nTestimonialList.defaultProps = {\n    testimonials: []\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\SocialShare\\index.js",["1134","1135","1136","1137","1138","1139","1140"],"import React from 'react';\nimport './style.css';\n\nexport default function SocialShare(props) {\n\n    return (\n        <div className=\"social-share-btn\">\n            <a className=\"btn btn-social btn-twitter\" href=\"#\"><span className=\"sr-only\">Twitter</span></a>\n            <a className=\"btn btn-social btn-facebook\" href=\"#\"><span className=\"sr-only\">Facebook</span></a>\n            <a className=\"btn btn-social btn-instagram\" href=\"#\"><span className=\"sr-only\">Instagram</span></a>\n            <a className=\"btn btn-social btn-whatsapp\" href=\"#\"><span className=\"sr-only\">Whatsapp</span></a>\n            <a className=\"btn btn-social btn-linkedin\" href=\"#\"><span className=\"sr-only\">Linkedin</span></a>\n            <a className=\"btn btn-social btn-youtube\" href=\"#\"><span className=\"sr-only\">YouTube</span></a>\n            <a className=\"btn btn-social btn-mail\" href=\"#\"><span className=\"sr-only\">Mail</span></a>\n        </div>\n    );\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\CommentField\\index.js",["1141","1142","1143"],"import React, {useState, useEffect} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {postCommentAction, postCommentReset} from \"../../redux/api/CommentApi\";\nimport {connect} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\";\nimport {bindActionCreators} from 'redux';\nimport {useForm} from \"react-hook-form\";\nimport {toast} from \"react-toastify\";\nimport {Constant} from \"../../config/Constant\";\nimport * as Utils from \"../../utils\";\n\nfunction CommentField(props) {\n    const {\n        postID\n    } = props;\n    const {t} = useTranslation();\n    let history = useHistory();\n    const [comment, setComment] = useState('');\n    const [isStartWriting, setIsStartWriting] = useState(false);\n\n    useEffect(() => {\n        if (props.result !== null) {\n            toast.dark(t('comment.add_new_success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.go(0);\n        }\n    }, [props]);\n\n    const onSubmitComment = (event) => {\n        event.preventDefault();\n        console.log(comment);\n        if (comment !== \"\") {\n            props.postCommentAction({\n                commentContent: comment,\n                rhContentId: parseInt(props.postID),\n                userId: Utils.getUserConnected().userId\n            });\n        }\n    };\n    return (\n        <form className=\"mb-3\" onSubmit={onSubmitComment}>\n            <div className=\"form-group\">\n                <label htmlFor=\"commentField\"\n                       className={`${comment === \"\" && isStartWriting && \"is-invalid\"}`}>\n                    {t('comment.add_comment')}\n                </label>\n                <textarea className={`form-control ${comment === \"\" && isStartWriting && \"is-invalid\"}`}\n                          id=\"commentField\"\n                          onChange={event => {\n                              setComment(event.target.value);\n                              setIsStartWriting(true);\n                          }}\n                          value={comment}\n                          name=\"comment\"\n                          rows=\"3\"/>\n\n                {\n                    comment === \"\" && isStartWriting &&\n                    <div className=\"invalid-feedback\">\n                        {t('error.required_field')}\n                    </div>\n                }\n            </div>\n            {\n                props.loading ?\n                    <button className=\"btn btn-primary\" type=\"button\" disabled>\n                        <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                              aria-hidden=\"true\"/>\n                        <span className=\"sr-only\">{t('common.loading')}</span>\n                    </button> :\n                    <button className=\"btn btn-primary\"\n                            type=\"button\"\n                            onClick={onSubmitComment}>{t('common.post')}</button>\n            }\n        </form>\n    );\n}\n\n\nconst mapStateToProps = state => ({\n    loading: state.postCommentReducer.loading,\n    result: state.postCommentReducer.result,\n    error: state.postCommentReducer.error,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    postCommentAction,\n    postCommentReset\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentField);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Comments\\index.js",["1144"],"import React from 'react';\nimport PropTypes from \"prop-types\";\nimport Comment from \"../Comment\";\n\nexport default function Comments(props) {\n    const {\n        style,\n        onClick,\n        children,\n        comments,\n        ...rest\n    } = props;\n\n    console.log(\"comments\", comments);\n    return (\n        <ul className=\"list-unstyled\">\n            {\n                comments.map((comment, index) => (\n                    <Comment description={comment.commentContent}\n                             date={comment.commentDateCreated}\n                             author={comment.user.userName}\n                             key={`comment${index}`}/>\n                ))\n            }\n        </ul>\n    );\n};\n\nComments.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClick: PropTypes.func,\n    comments: PropTypes.array\n};\n\nComments.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    posts: []\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\CustomMaterialMenu\\index.js",["1145","1146","1147","1148","1149","1150"],"import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/core/Menu';\nimport {useHistory} from \"react-router-dom\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faArchive, faEdit, faEllipsisV, faTrash} from \"@fortawesome/free-solid-svg-icons\";\nimport {deletePostByIdAction, deletePostByIdReset} from \"../../redux/api/PostsApi\";\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {useTranslation} from \"react-i18next\";\nimport PropTypes from \"prop-types\";\n\n\nlet route = require('../../utils/route');\n\nfunction CustomMaterialMenu(props) {\n    const {\n        row,\n        onDeleteRow,\n        size,\n        deletePostByIdAction,\n        deletePostByIdReset,\n        firstButtonText,\n        secondButtonText,\n        thirthButtonText,\n        firstButtonAction,\n        secondButtonAction,\n        thirthButtonAction\n    } = props;\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    let history = useHistory();\n    const {t} = useTranslation();\n    const handleClick = event => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const deleteRow = () => {\n        deletePostByIdAction(row.rhContentId);\n    };\n\n    return (\n        <div>\n            <IconButton\n                aria-label=\"more\"\n                aria-controls=\"long-menu\"\n                aria-haspopup=\"true\"\n                onClick={handleClick}\n                size={size}\n            >\n                <FontAwesomeIcon icon={faEllipsisV}/>\n            </IconButton>\n            <Menu\n                id=\"menu\"\n                getContentAnchorEl={null}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n                anchorEl={anchorEl}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleClose}\n            >\n\n                <MenuItem onClick={firstButtonAction}>\n                    <ListItemIcon>\n                        <FontAwesomeIcon icon={faEdit}/>\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\">\n                        {firstButtonText}\n                    </Typography>\n                </MenuItem>\n\n                {secondButtonText !== \"\" &&\n                <MenuItem onClick={secondButtonAction}>\n                    <ListItemIcon>\n                        <FontAwesomeIcon icon={faArchive}/>\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\">\n                        {secondButtonText}\n                    </Typography>\n                </MenuItem>\n                }\n                <Divider/>\n\n                {thirthButtonText !== \"\" &&\n                <MenuItem onClick={thirthButtonAction}>\n                    <ListItemIcon>\n                        <FontAwesomeIcon icon={faTrash}/>\n                    </ListItemIcon>\n                    <Typography variant=\"inherit\">\n                        {thirthButtonText}\n                    </Typography>\n                </MenuItem>\n                }\n            </Menu>\n        </div>\n    );\n};\n\nCustomMaterialMenu.propTypes = {\n    row: PropTypes.object,\n    firstButtonText: PropTypes.string,\n    secondButtonText: PropTypes.string,\n    thirthButtonText: PropTypes.string,\n    firstButtonAction: PropTypes.func,\n    secondButtonAction: PropTypes.func,\n    thirthButtonAction: PropTypes.func,\n};\n\nCustomMaterialMenu.defaultProps = {\n    row: {},\n    firstButtonText: \"\",\n    secondButtonText: \"\",\n    thirthButtonText: \"\",\n    firstButtonAction: () => {\n    },\n    secondButtonAction: () => {\n    },\n    thirthButtonAction: () => {\n    }\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    deletePostByIdAction,\n    deletePostByIdReset\n\n}, dispatch);\n\nexport default connect(null, mapDispatchToProps)(CustomMaterialMenu);\n\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\JobOfferApi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\DomaineType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\TestimonialType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\BlogType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\FaqType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\ValidatePublicationType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\NotificationDropdown\\index.js",["1151","1152","1153","1154","1155","1156","1157","1158","1159"],"import React, {useEffect} from 'react';\nimport PropTypes from \"prop-types\";\nimport {useTranslation} from \"react-i18next\";\nimport 'moment/locale/en-gb';\nimport 'moment/locale/fr';\nimport {bindActionCreators} from \"redux\";\nimport './style.css';\nimport {getAdminPendingValidationAction, getAdminPendingValidationReset} from \"../../redux/api/ValidationApi\";\nimport {connect} from \"react-redux\";\nimport {NavLink} from \"react-router-dom\";\nimport * as moment from \"moment\";\nimport * as Utils from \"../../utils\";\nimport 'moment/locale/en-gb';\nimport 'moment/locale/fr';\nimport {Constant} from '../../config/Constant';\nimport {getUserNotificationAction} from \"../../redux/api/NotificationAPi\";\nimport axios from \"axios\";\nimport {Config} from \"../../config/ServerConfig\";\n\nlet route = require('../../utils/route');\n\nfunction NotificationDropdown(props) {\n    moment.locale(\"fr\");\n    const {\n        resultGetPubToValidate,\n        ...rest\n    } = props;\n    console.log(props);\n    const {i18n, t} = useTranslation();\n    useEffect(() => {\n        if (Utils.isConnected()) {\n            if (Utils.isAdmin())\n                props.getAdminPendingValidationAction();\n            else\n                props.getUserNotificationAction(Utils.getUserConnected().userId);\n        }\n    }, []);\n\n    const renderUrlToRedirect = (categoryID) => {\n        if (Utils.isAdmin()) {\n            switch (categoryID) {\n                case Constant.faqID:\n                    return route.faq.admin_faq;\n            }\n        } else {\n            switch (categoryID) {\n                case Constant.faqID:\n                    return route.faq.root;\n            }\n        }\n    };\n\n    const updateUserNotification = (id) => {\n        axios({\n            url: `${Config.updateNotificationUrl}/${id}`,\n            method: 'PUT'\n        }).then((response) => {\n            console.warn(\"UPDATE NOTIFICATION SUCCESS\", response)\n        })\n            .catch((error) => {\n                console.warn(\"UPDATE NOTIFICATION ERROR\", error)\n            })\n    }\n\n    return (\n        <li className=\"nav-item dropdown notification-dropdown ml-auto\" id=\"notification-dropdown\">\n            <a href=\"#\" className=\"nav-link nav-icon icon-Notification-Bell\" id=\"notification-link\"\n               data-toggle=\"dropdown\" role=\"button\"\n               aria-haspopup=\"true\" aria-expanded=\"false\" style={{transform: 'scale(1.5)'}}>\n                {\n                    resultGetPubToValidate !== null &&\n                    resultGetPubToValidate.length > 0 &&\n                    <span className=\"badge badge-primary badge-counter\"\n                          style={{\n                              right: \" -.1125rem\",\n                              top: \".125rem\"\n                          }}>{resultGetPubToValidate.length}</span>\n                }\n            </a>\n            <div className=\"dropdown-list dropdown-menu dropdown-menu-right animated--grow-in shadow-lg mb-3\"\n                 style={{maxWidth: '18rem'}} id=\"notification-container\">\n                <div className=\"o-layer-arrow\">\n                    <div style={{left: \"143.562px\"}}></div>\n                </div>\n                <div className=\"card-header\">\n                </div>\n                <div className=\"card-body\">\n                    <h6 className=\"dropdown-header\">\n                        {t('notification.title')}\n                    </h6>\n                    {\n                        resultGetPubToValidate !== null &&\n                        resultGetPubToValidate.length === 0 &&\n                        <NavLink\n                            activeClassName=\"\"\n                            to={{\n                                pathname: '#'\n                            }}\n                            role=\"button\"\n                            className=\"dropdown-item d-flex align-items-center\">\n                            <div className=\"mr-3\">\n                                <div className=\"icon-circle bg-primary\">\n                                    <i className=\"fas fa-file-alt text-white\"></i>\n                                </div>\n                            </div>\n                            <div>\n                                <span className=\"font-weight-bold\">{t('notification.no_notification')}</span>\n                            </div>\n                        </NavLink>\n                    }\n                    {\n                        resultGetPubToValidate !== null &&\n                        resultGetPubToValidate.map((notification, index) => (\n                            Utils.isAdmin() ?\n                                index < Constant.notificationLimit &&\n                                <NavLink\n                                    activeClassName=\"\"\n                                    key={index}\n                                    to={{\n                                        pathname: `${renderUrlToRedirect(notification.rhContentCategoryId)}`\n                                    }}\n                                    onClick={() => updateUserNotification(notification.notificationId)}\n                                    role=\"button\"\n                                    className=\"dropdown-item d-flex align-items-center\"\n                                >\n                                    <div className=\"mr-3\">\n                                        <div className=\"icon-circle bg-primary\">\n                                            <i className=\"fas fa-file-alt text-white\"></i>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <div\n                                            className=\"small text-gray-500\">{moment(notification.rhContentDateCeated).fromNow()}</div>\n                                        <span\n                                            className=\"font-weight-bold\">{Utils.cutString(notification.rhContentTitle, 20)}</span>\n                                    </div>\n                                </NavLink> :\n                                index < Constant.notificationLimit &&\n                                <NavLink\n                                    activeClassName=\"\"\n                                    key={index}\n                                    to={{\n                                        pathname: `${renderUrlToRedirect(notification.rhContentValidation.rhContent.rhContentCategoryId)}`\n                                    }}\n                                    onClick={() => updateUserNotification(notification.notificationId)}\n                                    role=\"button\"\n                                    className=\"dropdown-item d-flex align-items-center\"\n                                    onClick={() => {\n                                        console.log('Click')\n                                    }}>\n                                    <div className=\"mr-3\">\n                                        <div className=\"icon-circle bg-primary\">\n                                            <i className=\"fas fa-file-alt text-white\"></i>\n                                        </div>\n                                    </div>\n                                    <div>\n                                        <div\n                                            className=\"small text-gray-500\">{moment(notification.rhContentValidation.rhContent.rhContentDateCeated).fromNow()}</div>\n                                        <span\n                                            className=\"font-weight-bold\">{Utils.cutString(notification.rhContentValidation.rhContent.rhContentTitle, 20)}</span>\n                                    </div>\n                                </NavLink>\n\n                        ))\n                    }\n                    <a className=\"btn btn-primary text-gray-500 align-items-center\" style={{display: \"block\"}}\n                       href=\"#\">{t('notification.show_all')}</a>\n                </div>\n            </div>\n\n        </li>\n    );\n};\n\nNotificationDropdown.propTypes = {};\n\nNotificationDropdown.defaultProps = {};\n\n\nconst mapstateToProps = state => ({\n    loadingGetPubToValidate: state.getAdminPublicationToValidateReducer.loading,\n    resultGetPubToValidate: state.getAdminPublicationToValidateReducer.result,\n    errorGetPubToValidate: state.getAdminPublicationToValidateReducer.error,\n\n})\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAdminPendingValidationAction,\n    getAdminPendingValidationReset,\n\n    getUserNotificationAction\n}, dispatch);\n\nexport default connect(mapstateToProps, mapDispatchToProps)(NotificationDropdown);\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\FaqList\\index.js",["1160","1161"],"import React, {useEffect, useState} from 'react';\nimport * as moment from \"moment\";\nimport {useTranslation} from \"react-i18next\";\nimport {Constant} from \"../../config/Constant\";\nimport ReactPaginate from \"react-paginate\";\nimport PropTypes from \"prop-types\";\n\nexport default function FaqList(props) {\n    moment.locale(\"fr\");\n    const {t} = useTranslation();\n    const {\n        style,\n        onClick,\n        faqs,\n        children,\n        ...rest\n    } = props;\n\n    const totalPosts = faqs.length;\n    const totalPage = Math.ceil(totalPosts / Constant.blogPageLimit);\n\n    const [currentFaqs, setCurentFaq] = useState(faqs.slice(0, Constant.blogPageLimit));\n\n    useEffect(() => {\n        setCurentFaq(faqs.slice(0, Constant.blogPageLimit));\n    }, [props.faqs]);\n\n    const handlePageChange = data => {\n        const offset = (data.selected) * Constant.blogPageLimit;\n        setCurentFaq(faqs.slice(offset, offset + Constant.blogPageLimit));\n    };\n\n\n    return (\n        <>\n            {\n                faqs.length === 0 ?\n\n                    <div className=\"alert alert-info\" role=\"alert\">\n                        <span className=\"alert-icon\"><span className=\"sr-only\">Info</span></span>\n                        <p>{t('faq.no_faq')}</p>\n                    </div> :\n                    <div className=\"accordion\" id={`accordion`}>\n                        {\n                            currentFaqs.map((item, index) => (\n                                <div className=\"card\" key={`glossairedescription${index}`}>\n                                    <div className=\"card-header\" id={`heading${index}`}>\n                                        <h4 className=\"mb-0\">\n                                            <button className=\"btn btn-link btn-block text-left\"\n                                                    type=\"button\"\n                                                    data-toggle=\"collapse\"\n                                                    data-target={`#collapse${index}`}\n                                                    aria-expanded=\"false\"\n                                                    aria-controls={`collapse${index}`}>\n                                                {item.rhContentTitle}\n                                            </button>\n                                        </h4>\n                                    </div>\n                                    <div id={`collapse${index}`} className=\"collapse\"\n                                         aria-labelledby={`collapse${index}`}\n                                         data-parent={`#accordion`}>\n                                        <div className=\"card-body\">\n                                            <blockquote className=\"blockquote\">\n                                                <p className=\"mb-0\">\n                                                    {item.rhContentDescription}\n                                                </p>\n                                                <footer className=\"blockquote-footer\">{moment(item.rhContentDateCeated).format('lll')} {t('common.by')} <cite\n                                                    title=\"Source Title\">{item.user.userName}</cite></footer>\n                                            </blockquote>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))\n                        }\n                    </div>\n            }\n            <nav role=\"navigation\" aria-label=\"Pagination example with active span item\">\n                <ReactPaginate\n                    previousLabel={<span className=\"sr-only\"> {t('common.previous')}</span>}\n                    nextLabel={<span className=\"sr-only\"> {t('common.next')}</span>}\n                    breakLabel={'...'}\n                    breakClassName={'page-item'}\n                    breakLinkClassName={'page-link'}\n                    pageCount={totalPage}\n                    pageClassName={'page-item'}\n                    pageLinkClassName={'page-link'}\n                    marginPagesDisplayed={2}\n                    onPageChange={handlePageChange}\n                    previousClassName={'page-item'}\n                    previousLinkClassName={'page-link'}\n                    nextLinkClassName={'page-link'}\n                    nextClassName={'page-item'}\n                    pageRangeDisplayed={Constant.blogPageLimit}\n                    containerClassName={'pagination justify-content-center'}\n                    activeClassName={'active'}\n                />\n            </nav>\n        </>\n    );\n};\n\nFaqList.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClick: PropTypes.func,\n    faqs: PropTypes.array\n};\n\nFaqList.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    faqs: []\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\JobOfferList\\index.js",["1162","1163","1164"],"import React, {useState, useEffect} from \"react\";\nimport PropTypes from 'prop-types';\nimport {useTranslation} from \"react-i18next\";\nimport {NavLink} from \"react-router-dom\";\nimport Interweave from 'interweave';\nimport * as Utils from '../../utils';\nimport * as moment from 'moment';\nimport 'moment/locale/fr';\nimport ReactPaginate from 'react-paginate';\nimport './style.css';\nimport {Constant} from \"../../config/Constant\";\nimport {Config} from \"../../config/ServerConfig\";\nimport _ from \"lodash\";\n\nlet route = require(\"../../utils/route\");\n\nexport default function JobOfferList(props) {\n    moment.locale(\"fr\");\n    const {\n        style,\n        onClick,\n        children,\n        jobs,\n        ...rest\n    } = props;\n    const totalPosts = jobs.length;\n    const totalPage = Math.ceil(totalPosts / Constant.postPageLimit);\n\n    const [currentJobs, setCurrentJobs] = useState(jobs.slice(0, Constant.postPageLimit));\n    const {t} = useTranslation();\n\n    useEffect(() => {\n        setCurrentJobs(jobs.slice(0, Constant.postPageLimit));\n    }, [props.jobs]);\n\n    const handlePageChange = data => {\n        const offset = (data.selected) * Constant.postPageLimit;\n        setCurrentJobs(jobs.slice(offset, offset + Constant.postPageLimit));\n    };\n\n    return (\n        <>\n            {\n                jobs.length === 0 ?\n\n                    <div className=\"alert alert-info\" role=\"alert\">\n                        <span className=\"alert-icon\"><span className=\"sr-only\">Info</span></span>\n                        <p>{t('job_offer.no_jobs')}</p>\n                    </div> :\n\n                    <>\n                        {\n                            currentJobs.map((post, index) => (\n                                <div className=\"row\" key={index}>\n                                    <div className=\"col\" key={`post-${index}`}>\n                                        <div\n                                            className=\"row no-gutters shadow-lg rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative\">\n                                            <div className=\"d-flex flex-row\"></div>\n                                            <div className=\"row news-card bg-white\">\n                                                <div className=\"col-md-4\">\n                                                    <div className=\"feed-image\">\n                                                        <img className=\"img-fluid img-responsive\"\n                                                             src={!_.isNil(post.rhContentPrincipalLink) ? (Config.imageFolder + post.rhContentPrincipalLink) : \"https://picsum.photos/800/650\"}/>\n                                                    </div>\n                                                </div>\n                                                <div className=\"col-md-8 p-3 pr-3\">\n                                                    <div className=\"news-feed-text\">\n                                                        <h5>{post.rhContentTitle}</h5>\n                                                        <span className=\"date\">\n                                                            <div className=\"mb-1 text-muted\">\n                                                                {moment(post.rhContentDateCeated).format(\"lll\")}\n                                                            </div>\n                                                        </span>\n                                                        <span>\n                                                                <Interweave\n                                                                    content={Utils.removeTag(Utils.cutString(post.rhContentDescription, 200))}/>\n                                                        </span>\n\n                                                        <div className=\"tags mt-3 mb-3\">\n                                                            <span>{post.rhContentJobPost}</span>\n                                                            <span>{post.rhContentJobContractType}</span>\n                                                            <span>{post.rhContentJobDirection}</span>\n                                                        </div>\n                                                        <div\n                                                            className=\"d-flex flex-row justify-content-between align-items-center mt-2\">\n                                                            <NavLink\n                                                                to={{\n                                                                    pathname: `${route.jobOffer.root}/${post.rhContentDomaineId}/${post.rhContentId}`,\n                                                                    post\n                                                                }}\n                                                                className=\"stretched-link\">\n                                                                {t('common.read_more')}\n                                                            </NavLink>\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            ))\n                        }\n                        <nav role=\"navigation\" aria-label=\"Pagination example with active span item\">\n                            <ReactPaginate\n                                previousLabel={<span className=\"sr-only\"> {t('common.previous')}</span>}\n                                nextLabel={<span className=\"sr-only\"> {t('common.next')}</span>}\n                                breakLabel={'...'}\n                                breakClassName={'page-item'}\n                                breakLinkClassName={'page-link'}\n                                pageCount={totalPage}\n                                pageClassName={'page-item'}\n                                pageLinkClassName={'page-link'}\n                                marginPagesDisplayed={2}\n                                onPageChange={handlePageChange}\n                                previousClassName={'page-item'}\n                                previousLinkClassName={'page-link'}\n                                nextLinkClassName={'page-link'}\n                                nextClassName={'page-item'}\n                                pageRangeDisplayed={Constant.postPageLimit}\n                                containerClassName={'pagination justify-content-center'}\n                                activeClassName={'active'}\n                            />\n                        </nav>\n                    </>\n            }\n        </>\n    );\n}\n\n\nJobOfferList.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClick: PropTypes.func,\n    jobs: PropTypes.array\n};\n\nJobOfferList.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    jobs: []\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\GlossaryList\\index.js",["1165","1166","1167","1168"],"import React, {useEffect, useState} from 'react';\nimport * as moment from \"moment\";\nimport {useTranslation} from \"react-i18next\";\nimport ReactPaginate from \"react-paginate\";\nimport {Constant} from \"../../config/Constant\";\nimport PropTypes from \"prop-types\";\nimport GlossaryItem from \"../GlossaryItem\";\n\nexport default function GlossaryList(props) {\n    moment.locale(\"fr\");\n    const {t} = useTranslation();\n    const [search, setSearch] = useState('');\n    const {\n        style,\n        onClick,\n        glossarys,\n        children,\n        ...rest\n    } = props;\n\n    const totalPosts = glossarys.length;\n    const totalPage = Math.ceil(totalPosts / Constant.glossaryPageLimit);\n\n    const [currentGlossarys, setCurrentGlossary] = useState(glossarys.slice(0, Constant.glossaryPageLimit));\n\n    useEffect(() => {\n        setCurrentGlossary(glossarys.slice(0, Constant.glossaryPageLimit));\n    }, [props.glossarys]);\n\n    const handlePageChange = data => {\n        const offset = (data.selected) * Constant.glossaryPageLimit;\n        setCurrentGlossary(glossarys.slice(offset, offset + Constant.glossaryPageLimit));\n    };\n    return (\n        <>\n            {\n                glossarys.length === 0 ?\n\n                    <div className=\"alert alert-info\" role=\"alert\">\n                        <span className=\"alert-icon\"><span className=\"sr-only\">Info</span></span>\n                        <p>{t('glossary.no_glossary')}</p>\n                    </div> :\n                    <>\n                        {\n                            currentGlossarys.map((item, index) => (\n                                <GlossaryItem category={item.category}\n                                              items={item.items}\n                                              indexKey={index}\n                                              key={`glossaire${index}`}/>\n\n                            ))\n                        }\n                    </>\n            }\n            <nav role=\"navigation\" aria-label=\"Pagination example with active span item\">\n                <ReactPaginate\n                    previousLabel={<span className=\"sr-only\"> {t('common.previous')}</span>}\n                    nextLabel={<span className=\"sr-only\"> {t('common.next')}</span>}\n                    breakLabel={'...'}\n                    breakClassName={'page-item'}\n                    breakLinkClassName={'page-link'}\n                    pageCount={totalPage}\n                    pageClassName={'page-item'}\n                    pageLinkClassName={'page-link'}\n                    marginPagesDisplayed={2}\n                    onPageChange={handlePageChange}\n                    previousClassName={'page-item'}\n                    previousLinkClassName={'page-link'}\n                    nextLinkClassName={'page-link'}\n                    nextClassName={'page-item'}\n                    pageRangeDisplayed={Constant.glossaryPageLimit}\n                    containerClassName={'pagination justify-content-center'}\n                    activeClassName={'active'}\n                />\n            </nav>\n        </>\n    )\n};\n\nGlossaryList.propTypes = {\n    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    onClick: PropTypes.func,\n    glossarys: PropTypes.array\n};\n\nGlossaryList.defaultProps = {\n    style: {},\n    onClick: () => {\n    },\n    glossarys: []\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\screens\\JobOffer\\AddNewJobOffer\\index.js",["1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182"],"import React, {useEffect, useMemo, useRef, useState} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {connect} from \"react-redux\";\nimport {bindActionCreators} from 'redux';\nimport {useHistory} from \"react-router-dom\";\nimport {Input} from \"../../../components/Input\";\nimport {getAllDomaineAction} from \"../../../redux/api/DomaineApi\";\nimport {useDropzone} from 'react-dropzone';\nimport * as Utils from '../../../utils/index';\nimport {Config} from \"../../../config/ServerConfig\";\nimport {Constant} from \"../../../config/Constant\";\nimport {toast} from 'react-toastify';\nimport {Page, Pages, Wizard,} from \"react-hook-form-wizard\";\nimport * as moment from 'moment';\nimport {Helmet} from \"react-helmet\";\nimport {postJobOfferAction, postJobOfferReset} from \"../../../redux/api/JobOfferApi\";\nimport {uploadImageAction} from \"../../../redux/api/ImageApi\";\nimport _ from \"lodash\";\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\nimport {faCalendarTimes, faFileContract, faGraduationCap, faSitemap, faUsers} from \"@fortawesome/free-solid-svg-icons\";\nimport Interweave from \"interweave\";\nimport RichTextEditor from \"../../../components/RichTextEditor\";\n\nlet route = require('../../../utils/route');\n\nfunction NewJobOffer(props) {\n    const {t} = useTranslation();\n    /*\n        const {register, handleSubmit, errors} = useForm();\n    */\n    let history = useHistory();\n    const editor = useRef(null);\n    const [itemStepper, setItemStepper] = useState(1);\n    const [title, setTitle] = useState('');\n    const [date, setDate] = useState(null);\n    const [poste, setPoste] = useState('');\n    const [contrat, setContrat] = useState(t(Constant.contratType[0]));\n    const [nbrePlace, setNbrePlace] = useState(1);\n    const [dateEcheance, setDateEcheance] = useState(null);\n    const [direction, setDirection] = useState('');\n    const [thematique, setThematique] = useState(1);\n    const [image, setImage] = useState(new FormData());\n    const [contenu, setContenu] = useState('');\n    const [featured, setFeatured] = useState(0);\n    const [isDataSubmit, setIsDataSubmit] = useState(false);\n    const [uploadedImages, setUploadedImages] = useState([]);\n    const [files, setFiles] = useState([]);\n    const {\n        getRootProps,\n        getInputProps,\n        isDragActive,\n        isDragAccept,\n        isDragReject\n    } = useDropzone({\n        accept: \".jpeg,.png,.gif,.jpg,.svg\",\n        maxFiles: 1,\n        multiple: false,\n        onDrop: acceptedFiles => {\n            console.log(acceptedFiles);\n            acceptedFiles.map(file => {\n                let imageToSend = new FormData();\n                imageToSend.append(\"file\", file);\n                props.uploadImageAction(imageToSend);\n            });\n            setFiles(acceptedFiles.map(file => Object.assign(file, {\n                preview: URL.createObjectURL(file)\n            })));\n        }\n    });\n\n    const style = useMemo(() => ({\n        ...Utils.baseStyle,\n        ...(isDragActive ? Utils.activeStyle : {}),\n        ...(isDragAccept ? Utils.acceptStyle : {}),\n        ...(isDragReject ? Utils.rejectStyle : {})\n    }), [\n        isDragActive,\n        isDragReject,\n        isDragAccept\n    ]);\n\n    const Thumbs = files.map(file => (\n        <div style={Utils.thumbStyle} key={file.name}>\n            <div style={Utils.thumbInnerStyle}>\n                {\n                    props.loadingUpdloadPhoto &&\n                    <div className=\"d-flex text-center justify-content-center thumb-loader\">\n                        <div className=\"spinner-grow text-primary\" role=\"status\">\n                            <span className=\"sr-only\">{t('common.loading')}</span>\n                        </div>\n                    </div>\n                }\n                <img\n                    src={file.preview}\n                    style={Utils.imgStyle}\n                    loading=\"lazy\"\n                />\n            </div>\n        </div>\n    ));\n\n    const renderPreview = () => (\n        <>\n            <h2 id=\"newsLeaderTitle\">{title}</h2>\n            <img className=\"img-fluid\"\n                 loading=\"lazy\"\n                 src={!_.isNil(props.resultUploadImage) ? (Config.imageFolder + props.resultUploadImage.imageName) : \"https://picsum.photos/800/400\"}/>\n\n            <div className=\"mt-3\">\n                <hr/>\n\n                <div className=\"d-flex flex-row justify-content-between\">\n\n                    <div className=\"d-flex col-4 flex-column elt-border-left\">\n\n                        <div className=\"d-flex flex-column w-100\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faGraduationCap} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_post')}</span>\n                            </div>\n                            <span className=\"text-muted\">{poste}</span>\n                        </div>\n\n                        <div className=\"d-flex flex-column w-100 mt-3\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faFileContract} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_contract_type')}</span>\n                            </div>\n                            <span className=\"text-muted\">{contrat}</span>\n                        </div>\n\n                    </div>\n\n                    <div className=\"d-flex col-4 flex-column elt-border-left\">\n\n                        <div className=\"d-flex flex-column w-100\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faUsers} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_count')}</span>\n                            </div>\n                            <span className=\"text-muted\">{nbrePlace}</span>\n                        </div>\n\n                        <div className=\"d-flex flex-column w-100 mt-3\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faSitemap} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_direction')}</span>\n                            </div>\n                            <span className=\"text-muted\">{direction}</span>\n                        </div>\n\n                    </div>\n\n                    <div className=\"d-flex col-4 flex-column elt-border-left\">\n\n                        <div className=\"d-flex flex-column w-100\">\n                            <div className=\"mb-1 mr-2\">\n                                <FontAwesomeIcon icon={faCalendarTimes} className=\"mr-1\"/>\n                                <span className=\"h5\">{t('add_new_job.job_date_echeance')}</span>\n                            </div>\n                            <span className=\"text-muted\">\n                                {dateEcheance !== null ? moment(dateEcheance).format(\"YYYY-MM-DD\") : moment(new Date()).format(\"YYYY-MM-DD\")}\n                            </span>\n                        </div>\n\n                    </div>\n\n                </div>\n\n                <div className=\"mt-4\">\n                    <Interweave content={contenu}/>\n                </div>\n            </div>\n\n        </>\n    );\n\n    useEffect(() => () => {\n        // Make sure to revoke the data uris to avoid memory leaks\n        files.forEach(file => URL.revokeObjectURL(file.preview));\n    }, [files]);\n\n    const onSubmitOffer = () => {\n        setIsDataSubmit(true);\n        props.postJobOfferAction({\n            rhContentTitle: title,\n            rhContentDescription: contenu,\n            rhContentPriorityLevel: featured,\n            rhContentCategoryId: Constant.jobOfferID,\n            rhContentDomaineId: parseInt(thematique),\n            rhContentPrincipalLink: props.resultUploadImage !== null ? props.resultUploadImage.imageName : \"\",\n            rhContentDatePublish: date !== null ? moment(date).format(\"YYYY-MM-DD\") : moment(new Date()).format(\"YYYY-MM-DD\"),\n            userId: Utils.getUserConnected().userId,\n            rhContentJobPost: poste,\n            rhContentJobDeadLineReceiveCandidate: dateEcheance !== null ? moment(dateEcheance).format(\"YYYY-MM-DD\") : moment(new Date()).format(\"YYYY-MM-DD\"),\n            rhContentJobContractType: contrat,\n            rhContentJobPostNumber: nbrePlace,\n            rhContentJobDirection: direction\n        });\n    };\n\n    useEffect(() => {\n        props.getAllDomaineAction();\n    }, []);\n\n    useEffect(() => {\n        console.log(props.result);\n        if (props.result !== null) {\n            toast.dark(t('add_new_job.success'), {\n                position: \"top-right\",\n                autoClose: Constant.toastDelay,\n                hideProgressBar: true,\n                closeOnClick: true,\n                pauseOnHover: true,\n                draggable: false,\n                progress: undefined,\n            });\n            history.push(route.jobOffer.root);\n            props.postJobOfferReset();\n        }\n    }, [props]);\n\n\n    return (\n        <>\n            <Helmet>\n                <title>{`${t(\"app.name\")} - ${t(\"add_new_job.title\")}`}</title>\n            </Helmet>\n            <nav role=\"navigation\" className=\"o-stepbar\" aria-label=\"Checkout process\">\n                <p className=\"float-left mt-2 mr-2 font-weight-bold d-sm-none\">{t('common.step')}</p>\n                <ol>\n                    <li className={`stepbar-item ${itemStepper === 1 && \"current\"}`}>\n                        <a className=\"stepbar-link\" href=\"#\" title=\"1. Sign in\">{t('add_new_job.job_infos')}</a>\n                    </li>\n                    <li className={`stepbar-item ${itemStepper === 2 && \"current\"}`}>\n                        <a className=\"stepbar-link\" href=\"#\" title=\"2. Review\"\n                           aria-current=\"step\">{t('add_new_job.job_settings')}</a>\n                    </li>\n                    <li className={`stepbar-item ${itemStepper === 3 && \"current\"}`}>\n                        <a className=\"stepbar-link\" href=\"#\" title=\"2. Review\"\n                           aria-current=\"step\">{t('add_new_job.recap')}</a>\n                    </li>\n                </ol>\n            </nav>\n            <div className=\"my-5\">\n                <div className=\"container-fluid\">\n                    <h1>{t(\"add_new_job.title\")}</h1>\n                </div>\n\n                <Wizard\n                    useFormArgs={{mode: \"blur\"}}\n                    onSubmit={onSubmitOffer}\n                    enableDevTool={false}\n                    onSubmit={({dataContext, formContext, wizardContext}) => {\n                        console.log(\"\");\n                    }}\n                >\n\n                    <Pages>\n                        <Page>\n                            {({\n                                  dataContext: {state},\n                                  formContext: {register, errors, handleSubmit},\n                                  wizardContext: {activePage, nextPage, previousPage},\n                              }) => {\n                                return (\n                                    <section className=\"container-fluid\">\n                                        <div className=\"row\">\n                                            <div className=\"col\">\n                                                <form className=\"row\" id=\"PostAdminEditForm\">\n                                                    <div className=\"col-12 col-lg-4\">\n                                                        <Input wrapperClass=\"form-group\"\n                                                               inputClass=\"form-control\"\n                                                               type=\"text\"\n                                                               name=\"title\"\n                                                               required\n                                                               ref={register({required: true, maxLength: 255})}\n                                                               id=\"title\"\n                                                               value={title}\n                                                               onChange={(e) => setTitle(e.target.value)}\n                                                               error={errors.hasOwnProperty(\"title\")}\n                                                               errorText={t('error.required_field')}\n                                                               labelText={t('add_new_job.job_title')}\n                                                               maxLength=\"255\"\n                                                        />\n\n                                                        <Input wrapperClass=\"form-group\"\n                                                               inputClass=\"form-control\"\n                                                               type=\"date\"\n                                                               name=\"date\"\n                                                               id=\"date\"\n                                                               value={date}\n                                                               onChange={(e) => {\n                                                                   setDate(e.target.value);\n                                                                   console.log(e.target.value);\n                                                               }}\n                                                               errorText={t('error.date_incorrect')}\n                                                               labelText={t('add_post.publication_date')}\n                                                               title={t('add_post.expected_format')}\n                                                        >\n                                                        <span className=\"form-text small text-muted\"\n                                                              id=\"date-format\">{t('add_post.expected_format')}</span>\n                                                        </Input>\n\n                                                        <div className=\"form-group\">\n                                                            <label htmlFor=\"postThematique\"\n                                                                   className=\"is-required\">{t('common.thematique')}</label>\n                                                            {\n                                                                props.loadingDomaine ?\n                                                                    <select className=\"custom-select\"\n                                                                            id=\"postThematique\" disabled>\n                                                                    </select> :\n                                                                    props.resultDomaine !== null &&\n                                                                    <select className=\"custom-select\"\n                                                                            id=\"postThematique\"\n                                                                            onChange={event => setThematique(event.target.value)}>\n                                                                        {\n                                                                            props.resultDomaine.map((domaine, index) => (\n                                                                                <option\n                                                                                    value={domaine.rhContentDomaineId}\n                                                                                    key={`domaine${index}`}>{domaine.rhContentDomaineName}</option>\n                                                                            ))\n                                                                        }\n                                                                    </select>\n                                                            }\n\n                                                        </div>\n\n                                                        <div className=\"form-group mb-3\">\n                                                            <label htmlFor=\"postThematique\"\n                                                                   className={`is-required ${(files.length === 0) && \"is-invalid\"}`}>{t('add_post.image')}</label>\n                                                            <div {...getRootProps({style})}>\n                                                                <input {...getInputProps()} />\n                                                                {files.length === 0 &&\n                                                                <p>{t('add_post.drad_drop_or_select')}</p>}\n                                                                {Thumbs}\n                                                            </div>\n\n                                                            {files.length === 0 ?\n                                                                isDataSubmit ?\n                                                                    <div className=\"invalid-feedback\">\n                                                                        {t('error.image_required')}\n                                                                    </div> : null : null}\n\n                                                        </div>\n\n                                                        <div className=\"submit mt-8\">\n\n                                                            <button className=\"btn btn-primary\"\n                                                                    onClick={handleSubmit(() => {\n                                                                        nextPage();\n                                                                        setItemStepper(itemStepper + 1);\n                                                                    })}>{t('common.next')}</button>\n                                                        </div>\n\n                                                        {\n                                                            props.error !== null &&\n                                                            <div className=\"alert alert-danger mt-1\" role=\"alert\">\n                                                <span className=\"alert-icon\"><span\n                                                    className=\"sr-only\">Danger</span></span>\n                                                                <p>{props.error}</p>\n                                                            </div>\n                                                        }\n                                                    </div>\n                                                    <div className=\"col-12 col-lg-8\">\n                                                        <div className=\"form-group required\">\n                                                            <label htmlFor=\"PostContent\"\n                                                                   className=\"is-required\">{t('add_new_job.job_content')}</label>\n                                                            <RichTextEditor ref={editor}\n                                                                            value={contenu}\n                                                                            onBlur={event => setContenu(event.target.innerHTML)} // preferred to use only this option to update the content for performance reasons\n                                                            />\n                                                        </div>\n                                                    </div>\n                                                </form>\n                                            </div>\n                                        </div>\n                                    </section>\n                                );\n                            }}\n                        </Page>\n                        <Page>\n                            {({\n                                  dataContext: {state},\n                                  formContext: {register, errors, handleSubmit},\n                                  wizardContext: {activePage, nextPage, previousPage},\n                              }) => {\n                                return (\n                                    <section className=\"container-fluid\">\n                                        <div className=\"row\">\n                                            <div className=\"col\">\n                                                <form className=\"row\" id=\"PostAdminEditForm\">\n                                                    <div className=\"col-6 col-lg-6\">\n\n                                                        <Input wrapperClass=\"form-group\"\n                                                               inputClass=\"form-control\"\n                                                               type=\"text\"\n                                                               name=\"poste\"\n                                                               required\n                                                               ref={register({required: true, maxLength: 255})}\n                                                               id=\"poste\"\n                                                               value={poste}\n                                                               onChange={(e) => setPoste(e.target.value)}\n                                                               error={errors.hasOwnProperty(\"poste\")}\n                                                               errorText={t('error.required_field')}\n                                                               labelText={t('add_new_job.job_post')}\n                                                               maxLength=\"255\"\n                                                        />\n\n                                                        <div className=\"form-group\">\n                                                            <label htmlFor=\"postContrat\"\n                                                                   className=\"is-required\">{t('add_new_job.job_contract_type')}</label>\n\n                                                            <select className=\"custom-select\"\n                                                                    id=\"postContrat\"\n                                                                    onChange={event => setContrat(event.target.value)}>\n                                                                {\n                                                                    Constant.contratType.map((contrat, index) => (\n                                                                        <option\n                                                                            value={t(contrat)}\n                                                                            key={`contrat${index}`}>{t(contrat)}</option>\n                                                                    ))\n                                                                }\n                                                            </select>\n                                                        </div>\n\n                                                        <Input wrapperClass=\"form-group\"\n                                                               inputClass=\"form-control\"\n                                                               type=\"text\"\n                                                               name=\"direction\"\n                                                               required\n                                                               ref={register({required: true, maxLength: 255})}\n                                                               id=\"direction\"\n                                                               value={direction}\n                                                               onChange={(e) => setDirection(e.target.value)}\n                                                               error={errors.hasOwnProperty(\"direction\")}\n                                                               errorText={t('error.required_field')}\n                                                               labelText={t('add_new_job.job_direction')}\n                                                               maxLength=\"255\"\n                                                        />\n\n                                                        <div className=\"submit mt-8\">\n\n                                                            <button className=\"btn btn-secondary\"\n                                                                    onClick={() => {\n                                                                        previousPage();\n                                                                        setItemStepper(itemStepper - 1);\n                                                                    }}>{t('common.previous')}</button>\n\n                                                            <button className=\"btn btn-primary\"\n                                                                    onClick={handleSubmit(() => {\n                                                                        nextPage();\n                                                                        setItemStepper(itemStepper + 1);\n                                                                    })}>{t('common.next')}</button>\n                                                        </div>\n\n                                                    </div>\n\n                                                    <div className=\"col-6 col-lg-6\">\n\n                                                        <Input wrapperClass=\"form-group\"\n                                                               inputClass=\"form-control\"\n                                                               type=\"number\"\n                                                               name=\"nbrePlace\"\n                                                               required\n                                                               ref={register({required: true, maxLength: 255})}\n                                                               id=\"nbrePlace\"\n                                                               value={nbrePlace}\n                                                               onChange={(e) => setNbrePlace(e.target.value)}\n                                                               error={errors.hasOwnProperty(\"nbrePlace\")}\n                                                               errorText={t('error.required_field')}\n                                                               labelText={t('add_new_job.job_count')}\n                                                               maxLength=\"255\"\n                                                        />\n\n                                                        <Input wrapperClass=\"form-group\"\n                                                               inputClass=\"form-control\"\n                                                               type=\"date\"\n                                                               name=\"dateEcheance\"\n                                                               id=\"dateEcheance\"\n                                                               value={dateEcheance}\n                                                               onChange={(e) => {\n                                                                   setDateEcheance(e.target.value);\n                                                               }}\n                                                               errorText={t('error.date_incorrect')}\n                                                               labelText={t('add_new_job.job_date_echeance')}\n                                                               title={t('add_post.expected_format')}\n                                                        >\n                                                        <span className=\"form-text small text-muted\"\n                                                              id=\"date-format\">{t('add_post.expected_format')}</span>\n                                                        </Input>\n\n                                                    </div>\n                                                </form>\n                                            </div>\n                                        </div>\n                                    </section>\n                                );\n                            }}\n                        </Page>\n                        <Page>\n                            {({\n                                  dataContext: {state: {data}},\n                                  formContext: {register, errors, handleSubmit},\n                                  wizardContext: {activePage, nextPage, previousPage},\n                              }) => {\n                                return (\n                                    <section className=\"container-fluid\">\n                                        <div className=\"row\">\n                                            <div className=\"col\">\n\n                                                {renderPreview()}\n\n                                                <button className=\"btn btn-secondary\"\n                                                        onClick={() => {\n                                                            previousPage();\n                                                            setItemStepper(itemStepper - 1);\n                                                        }}>{t('common.previous')}</button>\n\n                                                {\n                                                    props.loading ?\n                                                        <button className=\"btn btn-primary\" type=\"button\" disabled>\n                                                    <span className=\"spinner-border spinner-border-sm\" role=\"status\"\n                                                          aria-hidden=\"true\"/>\n                                                            <span className=\"sr-only\">{t('common.loading')}</span>\n                                                        </button> :\n                                                        <button className=\"btn btn-primary\"\n                                                                onClick={handleSubmit(() => {\n                                                                    onSubmitOffer();\n                                                                })}>{t('common.post')}</button>\n                                                }\n                                            </div>\n                                        </div>\n                                    </section>\n                                );\n                            }}\n                        </Page>\n                    </Pages>\n                </Wizard>\n            </div>\n        </>\n    )\n};\n\nconst mapStateToProps = state => ({\n    loading: state.postJobOfferReducer.loading,\n    result: state.postJobOfferReducer.result,\n    error: state.postJobOfferReducer.error,\n\n    loadingDomaine: state.getAllDomainesReducer.loading,\n    resultDomaine: state.getAllDomainesReducer.result,\n    errorDomaine: state.getAllDomainesReducer.error,\n\n    loadingUploadImage: state.uploadImageReducer.loading,\n    resultUploadImage: state.uploadImageReducer.result,\n    errorUploadImage: state.uploadImageReducer.error,\n\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({\n    getAllDomaineAction,\n    uploadImageAction,\n\n    postJobOfferAction,\n    postJobOfferReset\n\n}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewJobOffer);\n",["1183","1184"],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\LanguageSwitcher\\index.jsx",["1185","1186","1187","1188","1189"],"import React, {useState, useEffect} from 'react';\nimport {useTranslation} from \"react-i18next\";\nimport {Language} from \"../../lang/Language\";\n\nexport default function LanguageSwitcher() {\n    const [t, i18n] = useTranslation();\n    const [lang, setLang] = useState(Language.FR);\n\n    useEffect(() => {\n        changeLanguage(lang);\n    }, [lang]);\n\n    const changeLanguage = (language) => {\n\n        switch (language) {\n            case Language.EN:\n                //setLang(Language.EN);\n                i18n.changeLanguage(Language.EN);\n                break;\n            case Language.FR:\n            default:\n                //setLang(Language.FR);\n                i18n.changeLanguage(Language.FR);\n                break;\n        }\n\n    }\n\n    return (\n        <li className=\"nav-item dropdown\">\n            {/*            <button type=\"button\"\n                    className=\"nav-link btn btn-link btn-inverse dropdown-toggle d-flex align-items-center\"\n                    data-toggle=\"dropdown\">\n                <span className=\"icon-international-globe h4 mb-0 mr-1\" aria-hidden=\"true\"></span>\n                <span>{t(\"common.language\")}</span>\n            </button>*/}\n            <a className=\"nav-link dropdown-toggle\" href=\"#\" data-toggle=\"dropdown\" role=\"button\"\n               aria-haspopup=\"true\" aria-expanded=\"false\">{lang.toUpperCase()}</a>\n            <ul className=\"dropdown-menu dropdown-menu-right\">\n                <li>\n                    <a className=\"dropdown-item\" href=\"#\" onClick={() => {\n                        setLang(Language.FR);\n                        //changeLanguage(Language.FR);\n                    }} lang=\"fr\"\n                       hrefLang=\"fr\">Français</a>\n                </li>\n                <li>\n                    <a className=\"dropdown-item\" href=\"#\" onClick={() => {\n                        setLang(Language.EN);\n                        //changeLanguage(Language.EN);\n                    }}\n                       aria-current=\"page\">English</a>\n                </li>\n            </ul>\n        </li>\n    )\n}\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\Button\\index.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\CommentType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\components\\GlossaryItem\\index.js",["1190","1191","1192","1193","1194","1195","1196","1197"],"import React, {useEffect, useState} from 'react';\nimport PropTypes from \"prop-types\";\nimport ReactPaginate from \"react-paginate\";\nimport {Constant} from \"../../config/Constant\";\nimport {useTranslation} from \"react-i18next\";\n\nexport default function GlossaryItem(props) {\n    const {\n        category,\n        items,\n        indexKey,\n        ...rest\n    } = props;\n\n    const totalPosts = items.length;\n    const totalPage = Math.ceil(totalPosts / Constant.glossaryPageLimit);\n\n    const [currentPosts, setCurrentGlossary] = useState(items.slice(0, Constant.glossaryPageLimit));\n    const {t} = useTranslation();\n\n    useEffect(() => {\n        setCurrentGlossary(items.slice(0, Constant.glossaryPageLimit));\n    }, [props.items]);\n\n    const handlePageChange = data => {\n        const offset = (data.selected) * Constant.glossaryPageLimit;\n        setCurrentGlossary(items.slice(offset, offset + Constant.glossaryPageLimit));\n    };\n    \n    const accordionId = Math.round(Math.random() * 10);\n    return (\n        <>\n            <ul className=\"list-unstyled\">\n\n                <li className=\"media mb-4\">\n                    <svg className=\"mr-3 h5\" width=\"64\" height=\"64\"\n                         xmlns=\"http://www.w3.org/2000/svg\" preserveAspectRatio=\"xMidYMid slice\"\n                         focusable=\"false\" role=\"img\">\n                        <rect width=\"100%\" height=\"100%\" fill=\"#999\"/>\n                        <text x=\"50%\" y=\"50%\" fill=\"#fff\" dy=\".3em\" dominant-baseline=\"middle\"\n                              text-anchor=\"middle\">{category}\n                        </text>\n                    </svg>\n\n                    <div className=\"media-body\">\n                        <div className=\"accordion\" id={`accordion-${indexKey}`}>\n                            {\n                                items.map((item, index) => (\n                                    <div className=\"card\" key={`glossairedescription${indexKey}${index}`}>\n                                        <div className=\"card-header\" id={`heading${indexKey}${index}`}>\n                                            <h4 className=\"mb-0\">\n                                                <button className=\"btn btn-link btn-block text-left\" type=\"button\"\n                                                        data-toggle=\"collapse\"\n                                                        data-target={`#collapse${indexKey}${index}`}\n                                                        aria-expanded=\"false\"\n                                                        aria-controls={`collapse${indexKey}${index}`}>\n                                                    {item.title}\n                                                </button>\n                                            </h4>\n                                        </div>\n                                        <div id={`collapse${indexKey}${index}`} className=\"collapse\"\n                                             aria-labelledby={`collapse${indexKey}${index}`}\n                                             data-parent={`#accordion-${indexKey}`}>\n                                            <div className=\"card-body\">\n                                                {item.description}\n                                            </div>\n                                        </div>\n                                    </div>\n                                ))\n                            }\n                        </div>\n                    </div>\n\n                </li>\n\n            </ul>\n\n        </>\n    );\n};\n\nGlossaryItem.propTypes = {\n    category: PropTypes.string,\n    items: PropTypes.array\n};\n\nGlossaryItem.defaultProps = {\n    category: \"\",\n    items: []\n};","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\types\\GlossaryType.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\BlogReducer\\GetAllBlogReducer.js",["1198"],"import * as BlogType from '../../types/BlogType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case BlogType.GET_ALL_BLOG_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case BlogType.GET_ALL_BLOG_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case BlogType.GET_ALL_BLOG_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case BlogType.GET_ALL_BLOG_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetPostByIdReducer.js",["1199"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.GET_POST_BY_ID_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.GET_POST_BY_ID_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case PostsType.GET_POST_BY_ID_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.GET_POST_BY_ID_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\BlogReducer\\GetBlogReducer.js",["1200"],"import * as BlogType from '../../types/BlogType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case BlogType.GET_BLOG_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case BlogType.GET_BLOG_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case BlogType.GET_BLOG_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case BlogType.GET_BLOG_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\AddNewPostReducer.js",["1201"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.ADD_NEW_POST_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.ADD_NEW_POST_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case PostsType.ADD_NEW_POST_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.ADD_NEW_POST_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostsByDomainReducer.js",["1202"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.GET_ALL_POST_BY_DOMAIN_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.GET_ALL_POST_BY_DOMAIN_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data.reverse(),\n                error: null\n            }\n        case PostsType.GET_ALL_POST_BY_DOMAIN_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.GET_ALL_POST_BY_DOMAIN_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\AuthReducer\\SignInReducer.js",["1203"],"import * as AuthType from '../../types/AuthType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case AuthType.LOGIN_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case AuthType.LOGIN_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case AuthType.LOGIN_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case AuthType.LOGIN_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\ModifyDomaineReducer.js",["1204"],"import * as DomaineType from '../../types/DomaineType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case DomaineType.MODIFY_THEMATIQUE_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case DomaineType.MODIFY_THEMATIQUE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case DomaineType.MODIFY_THEMATIQUE_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case DomaineType.MODIFY_THEMATIQUE_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\GlossaryReducer\\GetAllGlossaryReducer.js",["1205"],"import * as GlossaryType from '../../types/GlossaryType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GlossaryType.GET_ALL_GLOSSARY_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case GlossaryType.GET_ALL_GLOSSARY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case GlossaryType.GET_ALL_GLOSSARY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case GlossaryType.GET_ALL_GLOSSARY_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\DomaineReducer\\GetDomaineByPostReducer.js",["1206"],"import * as DomainesType from '../../types/DomaineType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case DomainesType.GET_DOMAINE_BY_POST_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case DomainesType.GET_DOMAINE_BY_POST_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case DomainesType.GET_DOMAINE_BY_POST_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case DomainesType.GET_DOMAINE_BY_POST_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\DeletePostReducer.js",["1207"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.DELETE_POST_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.DELETE_POST_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case PostsType.DELETE_POST_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.DELETE_POST_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostFeaturedReducer.js",["1208"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.GET_ALL_POST_FEATURED_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.GET_ALL_POST_FEATURED_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data.reverse(),\n                error: null\n            }\n        case PostsType.GET_ALL_POST_FEATURED_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.GET_ALL_POST_FEATURED_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CategoryReducer\\ModifyCategoryReducer.js",["1209"],"import * as CategoryType from '../../types/CategoryType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case CategoryType.MODIFY_CATEGORY_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case CategoryType.MODIFY_CATEGORY_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case CategoryType.MODIFY_CATEGORY_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case CategoryType.MODIFY_CATEGORY_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\ModifyPostReducer.js",["1210"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.MODIFY_POST_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.MODIFY_POST_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case PostsType.MODIFY_POST_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.MODIFY_POST_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\NotificationReducer\\GetUserNotificationReducer.js",["1211"],"import * as ValidatePublication from '../../types/ValidatePublicationType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case ValidatePublication.GET_USER_NOTIFICATION_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case ValidatePublication.GET_USER_NOTIFICATION_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case ValidatePublication.GET_USER_NOTIFICATION_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case ValidatePublication.GET_USER_NOTIFICATION_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\ValidatePublicationReducer\\GetAdminPublicationToValidateReducer.js",["1212"],"import * as ValidatePublication from '../../types/ValidatePublicationType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case ValidatePublication.GET_PUBLICATION_ADMIN_TO_VALIDATE_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case ValidatePublication.GET_PUBLICATION_ADMIN_TO_VALIDATE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case ValidatePublication.GET_PUBLICATION_ADMIN_TO_VALIDATE_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case ValidatePublication.GET_PUBLICATION_ADMIN_TO_VALIDATE_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\JobOfferReducer\\PostJobOfferReducer.js",["1213"],"import * as JobOfferType from '../../types/JobOfferType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case JobOfferType.POST_JOB_OFFER_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case JobOfferType.POST_JOB_OFFER_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case JobOfferType.POST_JOB_OFFER_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case JobOfferType.POST_JOB_OFFER_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\TestimonialReducer\\PostTestimonialReducer.js",["1214"],"import * as TestimonialType from '../../types/TestimonialType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case TestimonialType.POST_TESTIMONIAL_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case TestimonialType.POST_TESTIMONIAL_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case TestimonialType.POST_TESTIMONIAL_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case TestimonialType.POST_TESTIMONIAL_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\FaqReducer\\PostFaqReducer.js",["1215"],"import * as FaqType from '../../types/FaqType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case FaqType.POST_FAQ_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case FaqType.POST_FAQ_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case FaqType.POST_FAQ_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case FaqType.POST_FAQ_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\ImageReducer\\UploadImageReducer.js",["1216"],"import * as ImageType from '../../types/ImageType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case ImageType.UPLOAD_IMAGE_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case ImageType.UPLOAD_IMAGE_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            }\n        case ImageType.UPLOAD_IMAGE_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case ImageType.UPLOAD_IMAGE_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\CommentReducer\\PostCommentReducer.js",["1217"],"import * as CommentType from '../../types/CommentType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case CommentType.POST_COMMENT_PENDING:\n            return {\n                ...state,\n                loading: true\n            };\n        case CommentType.POST_COMMENT_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data,\n                error: null\n            };\n        case CommentType.POST_COMMENT_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            };\n        case CommentType.POST_COMMENT_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\reducers\\PostsReducer\\GetAllPostsReducer.js",["1218"],"import * as PostsType from '../../types/PostsType';\n\nconst initialState = {\n    loading: false,\n    result: null,\n    error: null\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case PostsType.GET_ALL_POST_PENDING:\n            return {\n                ...state,\n                loading: true\n            }\n        case PostsType.GET_ALL_POST_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                result: action.result.data.reverse(),\n                error: null\n            }\n        case PostsType.GET_ALL_POST_ERROR:\n            return {\n                ...state,\n                loading: false,\n                result: null,\n                error: action.result\n            }\n        case PostsType.GET_ALL_POST_RESET:\n            return initialState;\n\n        default: {\n            return state;\n        }\n    }\n};\n","C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\redux\\api\\NotificationAPi.js",[],"C:\\Users\\ARTHUR\\Desktop\\ODC\\OpenRH\\src\\App.js",["1219","1220","1221","1222"],{"ruleId":"1223","replacedBy":"1224"},{"ruleId":"1225","replacedBy":"1226"},{"ruleId":"1223","replacedBy":"1227"},{"ruleId":"1225","replacedBy":"1228"},{"ruleId":"1223","replacedBy":"1227"},{"ruleId":"1225","replacedBy":"1228"},{"ruleId":"1229","severity":1,"message":"1230","line":13,"column":8,"nodeType":"1231","messageId":"1232","endLine":13,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1233","line":6,"column":9,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1234","line":3,"column":9,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1235","line":19,"column":9,"nodeType":"1231","messageId":"1232","endLine":19,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1236","line":20,"column":9,"nodeType":"1231","messageId":"1232","endLine":20,"endColumn":14},{"ruleId":"1229","severity":1,"message":"1237","line":31,"column":9,"nodeType":"1231","messageId":"1232","endLine":31,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1238","line":34,"column":10,"nodeType":"1231","messageId":"1232","endLine":34,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":34,"column":14,"nodeType":"1231","messageId":"1232","endLine":34,"endColumn":18},{"ruleId":"1240","severity":1,"message":"1241","line":47,"column":8,"nodeType":"1242","endLine":47,"endColumn":15,"suggestions":"1243"},{"ruleId":"1240","severity":1,"message":"1244","line":55,"column":8,"nodeType":"1242","endLine":55,"endColumn":33,"suggestions":"1245"},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1229","severity":1,"message":"1235","line":24,"column":9,"nodeType":"1231","messageId":"1232","endLine":24,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1249","line":31,"column":5,"nodeType":"1231","messageId":"1232","endLine":31,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1238","line":35,"column":10,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":35,"column":14,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1250","line":36,"column":12,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1251","line":36,"column":22,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":34},{"ruleId":"1229","severity":1,"message":"1252","line":36,"column":36,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":42},{"ruleId":"1229","severity":1,"message":"1237","line":37,"column":9,"nodeType":"1231","messageId":"1232","endLine":37,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1253","line":39,"column":12,"nodeType":"1231","messageId":"1232","endLine":39,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1254","line":39,"column":25,"nodeType":"1231","messageId":"1232","endLine":39,"endColumn":39},{"ruleId":"1229","severity":1,"message":"1255","line":40,"column":12,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1256","line":40,"column":24,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":37},{"ruleId":"1229","severity":1,"message":"1257","line":41,"column":19,"nodeType":"1231","messageId":"1232","endLine":41,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1258","line":42,"column":12,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":19},{"ruleId":"1229","severity":1,"message":"1259","line":42,"column":21,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":31},{"ruleId":"1229","severity":1,"message":"1260","line":46,"column":12,"nodeType":"1231","messageId":"1232","endLine":46,"endColumn":30},{"ruleId":"1229","severity":1,"message":"1261","line":46,"column":32,"nodeType":"1231","messageId":"1232","endLine":46,"endColumn":53},{"ruleId":"1229","severity":1,"message":"1262","line":47,"column":12,"nodeType":"1231","messageId":"1232","endLine":47,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1263","line":47,"column":25,"nodeType":"1231","messageId":"1232","endLine":47,"endColumn":39},{"ruleId":"1240","severity":1,"message":"1264","line":53,"column":8,"nodeType":"1242","endLine":53,"endColumn":10,"suggestions":"1265"},{"ruleId":"1266","severity":1,"message":"1267","line":74,"column":41,"nodeType":"1268","messageId":"1269","endLine":74,"endColumn":43},{"ruleId":"1266","severity":1,"message":"1267","line":76,"column":39,"nodeType":"1268","messageId":"1269","endLine":76,"endColumn":41},{"ruleId":"1229","severity":1,"message":"1270","line":7,"column":8,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1271","line":8,"column":8,"nodeType":"1231","messageId":"1232","endLine":8,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1239","line":35,"column":14,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":35,"column":20,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1273","line":38,"column":11,"nodeType":"1231","messageId":"1232","endLine":38,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1275","line":42,"column":13,"nodeType":"1276","endLine":43,"endColumn":150},{"ruleId":"1240","severity":1,"message":"1277","line":131,"column":8,"nodeType":"1242","endLine":131,"endColumn":10,"suggestions":"1278"},{"ruleId":"1229","severity":1,"message":"1279","line":3,"column":8,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1280","line":4,"column":8,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1281","line":22,"column":8,"nodeType":"1231","messageId":"1232","endLine":22,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1282","line":30,"column":12,"nodeType":"1231","messageId":"1232","endLine":30,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1283","line":32,"column":11,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":27},{"ruleId":"1284","severity":1,"message":"1285","line":77,"column":21,"nodeType":"1276","endLine":77,"endColumn":58},{"ruleId":"1286","severity":1,"message":"1287","line":80,"column":101,"nodeType":"1288","endLine":80,"endColumn":115},{"ruleId":"1286","severity":1,"message":"1287","line":84,"column":71,"nodeType":"1288","endLine":84,"endColumn":85},{"ruleId":"1284","severity":1,"message":"1285","line":94,"column":29,"nodeType":"1276","endLine":94,"endColumn":82},{"ruleId":"1284","severity":1,"message":"1285","line":112,"column":49,"nodeType":"1276","endLine":114,"endColumn":84},{"ruleId":"1289","severity":1,"message":"1290","line":165,"column":17,"nodeType":"1288","endLine":165,"endColumn":40},{"ruleId":"1229","severity":1,"message":"1234","line":4,"column":9,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1291","line":18,"column":9,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1292","line":18,"column":24,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":36},{"ruleId":"1229","severity":1,"message":"1249","line":25,"column":5,"nodeType":"1231","messageId":"1232","endLine":25,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1238","line":29,"column":10,"nodeType":"1231","messageId":"1232","endLine":29,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":29,"column":14,"nodeType":"1231","messageId":"1232","endLine":29,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":29,"column":20,"nodeType":"1231","messageId":"1232","endLine":29,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1237","line":31,"column":9,"nodeType":"1231","messageId":"1232","endLine":31,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1253","line":33,"column":12,"nodeType":"1231","messageId":"1232","endLine":33,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1254","line":33,"column":25,"nodeType":"1231","messageId":"1232","endLine":33,"endColumn":39},{"ruleId":"1240","severity":1,"message":"1293","line":43,"column":8,"nodeType":"1242","endLine":43,"endColumn":10,"suggestions":"1294"},{"ruleId":"1229","severity":1,"message":"1234","line":4,"column":9,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1295","line":23,"column":8,"nodeType":"1231","messageId":"1232","endLine":23,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1296","line":24,"column":9,"nodeType":"1231","messageId":"1232","endLine":24,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1297","line":25,"column":8,"nodeType":"1231","messageId":"1232","endLine":25,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1249","line":28,"column":5,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1238","line":32,"column":10,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":32,"column":14,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":32,"column":20,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1253","line":36,"column":12,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1254","line":36,"column":25,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":39},{"ruleId":"1229","severity":1,"message":"1257","line":38,"column":19,"nodeType":"1231","messageId":"1232","endLine":38,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1298","line":40,"column":12,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1299","line":40,"column":22,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":33},{"ruleId":"1229","severity":1,"message":"1262","line":42,"column":12,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1263","line":42,"column":25,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":39},{"ruleId":"1240","severity":1,"message":"1293","line":60,"column":8,"nodeType":"1242","endLine":60,"endColumn":10,"suggestions":"1300"},{"ruleId":"1240","severity":1,"message":"1301","line":88,"column":8,"nodeType":"1242","endLine":88,"endColumn":15,"suggestions":"1302"},{"ruleId":"1229","severity":1,"message":"1235","line":18,"column":9,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1303","line":25,"column":12,"nodeType":"1231","messageId":"1232","endLine":25,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1304","line":27,"column":11,"nodeType":"1231","messageId":"1232","endLine":27,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1305","line":28,"column":13,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":28},{"ruleId":"1229","severity":1,"message":"1306","line":29,"column":13,"nodeType":"1231","messageId":"1232","endLine":29,"endColumn":35},{"ruleId":"1229","severity":1,"message":"1270","line":7,"column":8,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1271","line":8,"column":8,"nodeType":"1231","messageId":"1232","endLine":8,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1239","line":36,"column":14,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1273","line":39,"column":11,"nodeType":"1231","messageId":"1232","endLine":39,"endColumn":22},{"ruleId":"1274","severity":1,"message":"1275","line":49,"column":25,"nodeType":"1276","endLine":51,"endColumn":86},{"ruleId":"1274","severity":1,"message":"1275","line":60,"column":21,"nodeType":"1276","endLine":61,"endColumn":23},{"ruleId":"1240","severity":1,"message":"1307","line":113,"column":8,"nodeType":"1242","endLine":113,"endColumn":10,"suggestions":"1308"},{"ruleId":"1229","severity":1,"message":"1309","line":30,"column":12,"nodeType":"1231","messageId":"1232","endLine":30,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1310","line":30,"column":19,"nodeType":"1231","messageId":"1232","endLine":30,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1311","line":34,"column":12,"nodeType":"1231","messageId":"1232","endLine":34,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1312","line":34,"column":28,"nodeType":"1231","messageId":"1232","endLine":34,"endColumn":45},{"ruleId":"1266","severity":1,"message":"1267","line":48,"column":36,"nodeType":"1268","messageId":"1269","endLine":48,"endColumn":38},{"ruleId":"1274","severity":1,"message":"1275","line":81,"column":17,"nodeType":"1276","endLine":85,"endColumn":19},{"ruleId":"1240","severity":1,"message":"1293","line":112,"column":8,"nodeType":"1242","endLine":112,"endColumn":10,"suggestions":"1313"},{"ruleId":"1240","severity":1,"message":"1301","line":146,"column":8,"nodeType":"1242","endLine":146,"endColumn":15,"suggestions":"1314"},{"ruleId":"1284","severity":1,"message":"1285","line":11,"column":21,"nodeType":"1276","endLine":11,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":12,"column":21,"nodeType":"1276","endLine":12,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":13,"column":21,"nodeType":"1276","endLine":13,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":14,"column":21,"nodeType":"1276","endLine":14,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":15,"column":21,"nodeType":"1276","endLine":15,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":16,"column":21,"nodeType":"1276","endLine":16,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":17,"column":21,"nodeType":"1276","endLine":17,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":18,"column":21,"nodeType":"1276","endLine":18,"endColumn":33},{"ruleId":"1284","severity":1,"message":"1285","line":48,"column":45,"nodeType":"1276","endLine":48,"endColumn":87},{"ruleId":"1229","severity":1,"message":"1315","line":2,"column":8,"nodeType":"1231","messageId":"1232","endLine":2,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1316","line":4,"column":8,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":14},{"ruleId":"1229","severity":1,"message":"1317","line":16,"column":12,"nodeType":"1231","messageId":"1232","endLine":16,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1318","line":19,"column":12,"nodeType":"1231","messageId":"1232","endLine":19,"endColumn":16},{"ruleId":"1319","severity":1,"message":"1320","line":31,"column":13,"nodeType":"1276","endLine":32,"endColumn":95},{"ruleId":"1284","severity":1,"message":"1285","line":31,"column":13,"nodeType":"1276","endLine":32,"endColumn":95},{"ruleId":"1284","severity":1,"message":"1285","line":34,"column":21,"nodeType":"1276","endLine":34,"endColumn":80},{"ruleId":"1284","severity":1,"message":"1285","line":35,"column":21,"nodeType":"1276","endLine":35,"endColumn":59},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1229","severity":1,"message":"1317","line":26,"column":12,"nodeType":"1231","messageId":"1232","endLine":26,"endColumn":16},{"ruleId":"1240","severity":1,"message":"1321","line":36,"column":8,"nodeType":"1242","endLine":36,"endColumn":21,"suggestions":"1322"},{"ruleId":"1274","severity":1,"message":"1275","line":93,"column":69,"nodeType":"1276","endLine":95,"endColumn":130},{"ruleId":"1274","severity":1,"message":"1275","line":104,"column":63,"nodeType":"1276","endLine":106,"endColumn":105},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1229","severity":1,"message":"1323","line":7,"column":9,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1317","line":27,"column":12,"nodeType":"1231","messageId":"1232","endLine":27,"endColumn":16},{"ruleId":"1240","severity":1,"message":"1324","line":37,"column":8,"nodeType":"1242","endLine":37,"endColumn":21,"suggestions":"1325"},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1229","severity":1,"message":"1326","line":10,"column":12,"nodeType":"1231","messageId":"1232","endLine":10,"endColumn":13},{"ruleId":"1284","severity":1,"message":"1327","line":61,"column":41,"nodeType":"1276","endLine":61,"endColumn":80},{"ruleId":"1229","severity":1,"message":"1318","line":17,"column":12,"nodeType":"1231","messageId":"1232","endLine":17,"endColumn":16},{"ruleId":"1328","severity":1,"message":"1329","line":163,"column":5,"nodeType":"1330","messageId":"1331","endLine":166,"endColumn":6},{"ruleId":"1229","severity":1,"message":"1332","line":1,"column":8,"nodeType":"1231","messageId":"1232","endLine":1,"endColumn":13},{"ruleId":"1229","severity":1,"message":"1333","line":2,"column":9,"nodeType":"1231","messageId":"1232","endLine":2,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1334","line":6,"column":8,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1335","line":13,"column":8,"nodeType":"1231","messageId":"1232","endLine":13,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1336","line":20,"column":8,"nodeType":"1231","messageId":"1232","endLine":20,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1337","line":21,"column":8,"nodeType":"1231","messageId":"1232","endLine":21,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1338","line":22,"column":8,"nodeType":"1231","messageId":"1232","endLine":22,"endColumn":19},{"ruleId":"1229","severity":1,"message":"1339","line":23,"column":8,"nodeType":"1231","messageId":"1232","endLine":23,"endColumn":19},{"ruleId":"1229","severity":1,"message":"1340","line":24,"column":8,"nodeType":"1231","messageId":"1232","endLine":24,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1295","line":5,"column":8,"nodeType":"1231","messageId":"1232","endLine":5,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1235","line":6,"column":9,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1295","line":5,"column":8,"nodeType":"1231","messageId":"1232","endLine":5,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1295","line":5,"column":8,"nodeType":"1231","messageId":"1232","endLine":5,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1235","line":6,"column":9,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1341","line":6,"column":8,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1279","line":7,"column":8,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1323","line":6,"column":10,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1342","line":9,"column":8,"nodeType":"1231","messageId":"1232","endLine":9,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1343","line":28,"column":10,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":30},{"ruleId":"1240","severity":1,"message":"1344","line":159,"column":8,"nodeType":"1242","endLine":159,"endColumn":15,"suggestions":"1345"},{"ruleId":"1274","severity":1,"message":"1275","line":547,"column":73,"nodeType":"1276","endLine":549,"endColumn":134},{"ruleId":"1274","severity":1,"message":"1275","line":557,"column":71,"nodeType":"1276","endLine":559,"endColumn":111},{"ruleId":"1274","severity":1,"message":"1275","line":673,"column":81,"nodeType":"1276","endLine":677,"endColumn":142},{"ruleId":"1274","severity":1,"message":"1275","line":686,"column":75,"nodeType":"1276","endLine":689,"endColumn":115},{"ruleId":"1229","severity":1,"message":"1346","line":1,"column":9,"nodeType":"1231","messageId":"1232","endLine":1,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1347","line":1,"column":26,"nodeType":"1231","messageId":"1232","endLine":1,"endColumn":43},{"ruleId":"1229","severity":1,"message":"1348","line":1,"column":45,"nodeType":"1231","messageId":"1232","endLine":1,"endColumn":62},{"ruleId":"1229","severity":1,"message":"1311","line":42,"column":12,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1312","line":42,"column":28,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":45},{"ruleId":"1266","severity":1,"message":"1267","line":57,"column":36,"nodeType":"1268","messageId":"1269","endLine":57,"endColumn":38},{"ruleId":"1274","severity":1,"message":"1275","line":90,"column":17,"nodeType":"1276","endLine":93,"endColumn":19},{"ruleId":"1240","severity":1,"message":"1293","line":149,"column":8,"nodeType":"1242","endLine":149,"endColumn":10,"suggestions":"1349"},{"ruleId":"1240","severity":1,"message":"1301","line":184,"column":8,"nodeType":"1242","endLine":184,"endColumn":15,"suggestions":"1350"},{"ruleId":"1229","severity":1,"message":"1235","line":12,"column":9,"nodeType":"1231","messageId":"1232","endLine":12,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1275","line":87,"column":25,"nodeType":"1276","endLine":89,"endColumn":86},{"ruleId":"1274","severity":1,"message":"1275","line":97,"column":23,"nodeType":"1276","endLine":99,"endColumn":65},{"ruleId":"1240","severity":1,"message":"1293","line":125,"column":8,"nodeType":"1242","endLine":125,"endColumn":10,"suggestions":"1351"},{"ruleId":"1240","severity":1,"message":"1352","line":149,"column":8,"nodeType":"1242","endLine":149,"endColumn":15,"suggestions":"1353"},{"ruleId":"1240","severity":1,"message":"1354","line":154,"column":8,"nodeType":"1242","endLine":154,"endColumn":15,"suggestions":"1355"},{"ruleId":"1284","severity":1,"message":"1285","line":265,"column":37,"nodeType":"1276","endLine":269,"endColumn":43},{"ruleId":"1284","severity":1,"message":"1285","line":272,"column":37,"nodeType":"1276","endLine":273,"endColumn":80},{"ruleId":"1284","severity":1,"message":"1285","line":276,"column":37,"nodeType":"1276","endLine":277,"endColumn":80},{"ruleId":"1284","severity":1,"message":"1285","line":280,"column":37,"nodeType":"1276","endLine":281,"endColumn":80},{"ruleId":"1229","severity":1,"message":"1356","line":4,"column":30,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":39},{"ruleId":"1229","severity":1,"message":"1357","line":5,"column":9,"nodeType":"1231","messageId":"1232","endLine":5,"endColumn":13},{"ruleId":"1229","severity":1,"message":"1358","line":13,"column":30,"nodeType":"1231","messageId":"1232","endLine":13,"endColumn":52},{"ruleId":"1229","severity":1,"message":"1235","line":15,"column":9,"nodeType":"1231","messageId":"1232","endLine":15,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1359","line":21,"column":10,"nodeType":"1231","messageId":"1232","endLine":21,"endColumn":17},{"ruleId":"1284","severity":1,"message":"1285","line":24,"column":5,"nodeType":"1276","endLine":24,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1360","line":34,"column":13,"nodeType":"1231","messageId":"1232","endLine":34,"endColumn":21},{"ruleId":"1229","severity":1,"message":"1282","line":40,"column":12,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":20},{"ruleId":"1240","severity":1,"message":"1293","line":51,"column":8,"nodeType":"1242","endLine":51,"endColumn":10,"suggestions":"1361"},{"ruleId":"1284","severity":1,"message":"1285","line":57,"column":17,"nodeType":"1276","endLine":57,"endColumn":54},{"ruleId":"1284","severity":1,"message":"1285","line":157,"column":106,"nodeType":"1276","endLine":159,"endColumn":94},{"ruleId":"1284","severity":1,"message":"1285","line":206,"column":41,"nodeType":"1276","endLine":207,"endColumn":76},{"ruleId":"1284","severity":1,"message":"1285","line":229,"column":37,"nodeType":"1276","endLine":229,"endColumn":90},{"ruleId":"1229","severity":1,"message":"1362","line":3,"column":8,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1280","line":4,"column":8,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1363","line":3,"column":13,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":18},{"ruleId":"1284","severity":1,"message":"1285","line":28,"column":88,"nodeType":"1276","endLine":28,"endColumn":121},{"ruleId":"1284","severity":1,"message":"1285","line":29,"column":87,"nodeType":"1276","endLine":29,"endColumn":120},{"ruleId":"1229","severity":1,"message":"1234","line":3,"column":9,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1364","line":4,"column":8,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1365","line":17,"column":8,"nodeType":"1231","messageId":"1232","endLine":17,"endColumn":21},{"ruleId":"1229","severity":1,"message":"1366","line":18,"column":9,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":14},{"ruleId":"1229","severity":1,"message":"1291","line":22,"column":9,"nodeType":"1231","messageId":"1232","endLine":22,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1292","line":22,"column":24,"nodeType":"1231","messageId":"1232","endLine":22,"endColumn":36},{"ruleId":"1229","severity":1,"message":"1367","line":27,"column":8,"nodeType":"1231","messageId":"1232","endLine":27,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1249","line":32,"column":5,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1238","line":40,"column":10,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":40,"column":14,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":40,"column":20,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1255","line":42,"column":12,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1256","line":42,"column":24,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":37},{"ruleId":"1240","severity":1,"message":"1293","line":48,"column":8,"nodeType":"1242","endLine":48,"endColumn":10,"suggestions":"1368"},{"ruleId":"1240","severity":1,"message":"1301","line":96,"column":8,"nodeType":"1242","endLine":96,"endColumn":15,"suggestions":"1369"},{"ruleId":"1229","severity":1,"message":"1370","line":6,"column":8,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1371","line":8,"column":9,"nodeType":"1231","messageId":"1232","endLine":8,"endColumn":28},{"ruleId":"1229","severity":1,"message":"1372","line":8,"column":30,"nodeType":"1231","messageId":"1232","endLine":8,"endColumn":50},{"ruleId":"1229","severity":1,"message":"1238","line":28,"column":10,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":28,"column":14,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1373","line":29,"column":9,"nodeType":"1231","messageId":"1232","endLine":29,"endColumn":18},{"ruleId":"1240","severity":1,"message":"1374","line":41,"column":8,"nodeType":"1242","endLine":41,"endColumn":15,"suggestions":"1375"},{"ruleId":"1240","severity":1,"message":"1264","line":45,"column":8,"nodeType":"1242","endLine":45,"endColumn":33,"suggestions":"1376"},{"ruleId":"1229","severity":1,"message":"1234","line":5,"column":9,"nodeType":"1231","messageId":"1232","endLine":5,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1377","line":20,"column":12,"nodeType":"1231","messageId":"1232","endLine":20,"endColumn":29},{"ruleId":"1229","severity":1,"message":"1378","line":20,"column":31,"nodeType":"1231","messageId":"1232","endLine":20,"endColumn":51},{"ruleId":"1229","severity":1,"message":"1379","line":21,"column":12,"nodeType":"1231","messageId":"1232","endLine":21,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1380","line":21,"column":22,"nodeType":"1231","messageId":"1232","endLine":21,"endColumn":33},{"ruleId":"1240","severity":1,"message":"1381","line":30,"column":8,"nodeType":"1242","endLine":30,"endColumn":15,"suggestions":"1382"},{"ruleId":"1229","severity":1,"message":"1249","line":28,"column":5,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1238","line":36,"column":10,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":36,"column":14,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":36,"column":20,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1383","line":37,"column":12,"nodeType":"1231","messageId":"1232","endLine":37,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1384","line":37,"column":20,"nodeType":"1231","messageId":"1232","endLine":37,"endColumn":29},{"ruleId":"1229","severity":1,"message":"1255","line":39,"column":12,"nodeType":"1231","messageId":"1232","endLine":39,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1256","line":39,"column":24,"nodeType":"1231","messageId":"1232","endLine":39,"endColumn":37},{"ruleId":"1240","severity":1,"message":"1293","line":45,"column":8,"nodeType":"1242","endLine":45,"endColumn":10,"suggestions":"1385"},{"ruleId":"1240","severity":1,"message":"1301","line":90,"column":8,"nodeType":"1242","endLine":90,"endColumn":15,"suggestions":"1386"},{"ruleId":"1229","severity":1,"message":"1364","line":3,"column":8,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1291","line":27,"column":9,"nodeType":"1231","messageId":"1232","endLine":27,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1239","line":36,"column":14,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":36,"column":20,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1273","line":39,"column":11,"nodeType":"1231","messageId":"1232","endLine":39,"endColumn":22},{"ruleId":"1240","severity":1,"message":"1277","line":50,"column":8,"nodeType":"1242","endLine":50,"endColumn":10,"suggestions":"1387"},{"ruleId":"1229","severity":1,"message":"1281","line":22,"column":8,"nodeType":"1231","messageId":"1232","endLine":22,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1282","line":30,"column":12,"nodeType":"1231","messageId":"1232","endLine":30,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1283","line":32,"column":11,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":27},{"ruleId":"1284","severity":1,"message":"1285","line":77,"column":21,"nodeType":"1276","endLine":77,"endColumn":58},{"ruleId":"1286","severity":1,"message":"1287","line":80,"column":101,"nodeType":"1288","endLine":80,"endColumn":115},{"ruleId":"1286","severity":1,"message":"1287","line":84,"column":71,"nodeType":"1288","endLine":84,"endColumn":85},{"ruleId":"1284","severity":1,"message":"1285","line":94,"column":29,"nodeType":"1276","endLine":94,"endColumn":82},{"ruleId":"1284","severity":1,"message":"1285","line":112,"column":49,"nodeType":"1276","endLine":114,"endColumn":84},{"ruleId":"1289","severity":1,"message":"1290","line":165,"column":17,"nodeType":"1288","endLine":165,"endColumn":40},{"ruleId":"1229","severity":1,"message":"1356","line":4,"column":18,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1297","line":13,"column":8,"nodeType":"1231","messageId":"1232","endLine":13,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1388","line":20,"column":8,"nodeType":"1231","messageId":"1232","endLine":20,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1275","line":89,"column":25,"nodeType":"1276","endLine":91,"endColumn":86},{"ruleId":"1274","severity":1,"message":"1275","line":99,"column":23,"nodeType":"1276","endLine":101,"endColumn":65},{"ruleId":"1240","severity":1,"message":"1293","line":127,"column":8,"nodeType":"1242","endLine":127,"endColumn":10,"suggestions":"1389"},{"ruleId":"1240","severity":1,"message":"1390","line":150,"column":8,"nodeType":"1242","endLine":150,"endColumn":15,"suggestions":"1391"},{"ruleId":"1240","severity":1,"message":"1354","line":155,"column":8,"nodeType":"1242","endLine":155,"endColumn":14,"suggestions":"1392"},{"ruleId":"1284","severity":1,"message":"1285","line":266,"column":37,"nodeType":"1276","endLine":270,"endColumn":43},{"ruleId":"1284","severity":1,"message":"1285","line":273,"column":37,"nodeType":"1276","endLine":274,"endColumn":80},{"ruleId":"1284","severity":1,"message":"1285","line":277,"column":37,"nodeType":"1276","endLine":278,"endColumn":80},{"ruleId":"1284","severity":1,"message":"1285","line":281,"column":37,"nodeType":"1276","endLine":282,"endColumn":80},{"ruleId":"1229","severity":1,"message":"1234","line":3,"column":9,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1370","line":6,"column":8,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1393","line":19,"column":8,"nodeType":"1231","messageId":"1232","endLine":19,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1237","line":32,"column":9,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1238","line":35,"column":10,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":35,"column":14,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":18},{"ruleId":"1240","severity":1,"message":"1394","line":44,"column":8,"nodeType":"1242","endLine":44,"endColumn":15,"suggestions":"1395"},{"ruleId":"1229","severity":1,"message":"1282","line":47,"column":16,"nodeType":"1231","messageId":"1232","endLine":47,"endColumn":24},{"ruleId":"1240","severity":1,"message":"1264","line":51,"column":8,"nodeType":"1242","endLine":51,"endColumn":33,"suggestions":"1396"},{"ruleId":"1229","severity":1,"message":"1249","line":35,"column":5,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1397","line":47,"column":12,"nodeType":"1231","messageId":"1232","endLine":47,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1398","line":47,"column":22,"nodeType":"1231","messageId":"1232","endLine":47,"endColumn":33},{"ruleId":"1240","severity":1,"message":"1293","line":99,"column":8,"nodeType":"1242","endLine":99,"endColumn":10,"suggestions":"1399"},{"ruleId":"1240","severity":1,"message":"1400","line":106,"column":8,"nodeType":"1242","endLine":106,"endColumn":22,"suggestions":"1401"},{"ruleId":"1240","severity":1,"message":"1301","line":162,"column":8,"nodeType":"1242","endLine":162,"endColumn":15,"suggestions":"1402"},{"ruleId":"1240","severity":1,"message":"1354","line":167,"column":8,"nodeType":"1242","endLine":167,"endColumn":20,"suggestions":"1403"},{"ruleId":"1284","severity":1,"message":"1285","line":363,"column":37,"nodeType":"1276","endLine":367,"endColumn":43},{"ruleId":"1284","severity":1,"message":"1285","line":370,"column":37,"nodeType":"1276","endLine":371,"endColumn":85},{"ruleId":"1229","severity":1,"message":"1249","line":35,"column":5,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":10},{"ruleId":"1240","severity":1,"message":"1293","line":106,"column":8,"nodeType":"1242","endLine":106,"endColumn":10,"suggestions":"1404"},{"ruleId":"1240","severity":1,"message":"1400","line":113,"column":8,"nodeType":"1242","endLine":113,"endColumn":22,"suggestions":"1405"},{"ruleId":"1240","severity":1,"message":"1301","line":169,"column":8,"nodeType":"1242","endLine":169,"endColumn":15,"suggestions":"1406"},{"ruleId":"1240","severity":1,"message":"1354","line":174,"column":8,"nodeType":"1242","endLine":174,"endColumn":20,"suggestions":"1407"},{"ruleId":"1284","severity":1,"message":"1285","line":384,"column":37,"nodeType":"1276","endLine":388,"endColumn":43},{"ruleId":"1284","severity":1,"message":"1285","line":391,"column":37,"nodeType":"1276","endLine":392,"endColumn":85},{"ruleId":"1229","severity":1,"message":"1408","line":28,"column":23,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":28},{"ruleId":"1229","severity":1,"message":"1309","line":31,"column":12,"nodeType":"1231","messageId":"1232","endLine":31,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1310","line":31,"column":19,"nodeType":"1231","messageId":"1232","endLine":31,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1311","line":35,"column":12,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1312","line":35,"column":28,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":45},{"ruleId":"1266","severity":1,"message":"1267","line":49,"column":36,"nodeType":"1268","messageId":"1269","endLine":49,"endColumn":38},{"ruleId":"1274","severity":1,"message":"1275","line":82,"column":17,"nodeType":"1276","endLine":86,"endColumn":19},{"ruleId":"1240","severity":1,"message":"1293","line":114,"column":8,"nodeType":"1242","endLine":114,"endColumn":10,"suggestions":"1409"},{"ruleId":"1240","severity":1,"message":"1301","line":143,"column":8,"nodeType":"1242","endLine":143,"endColumn":15,"suggestions":"1410"},{"ruleId":"1229","severity":1,"message":"1234","line":4,"column":9,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1411","line":14,"column":5,"nodeType":"1231","messageId":"1232","endLine":14,"endColumn":31},{"ruleId":"1229","severity":1,"message":"1412","line":15,"column":5,"nodeType":"1231","messageId":"1232","endLine":15,"endColumn":30},{"ruleId":"1229","severity":1,"message":"1249","line":28,"column":5,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1238","line":32,"column":10,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":32,"column":14,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":32,"column":20,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1253","line":36,"column":12,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":23},{"ruleId":"1229","severity":1,"message":"1254","line":36,"column":25,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":39},{"ruleId":"1229","severity":1,"message":"1256","line":38,"column":24,"nodeType":"1231","messageId":"1232","endLine":38,"endColumn":37},{"ruleId":"1240","severity":1,"message":"1301","line":94,"column":8,"nodeType":"1242","endLine":94,"endColumn":15,"suggestions":"1413"},{"ruleId":"1240","severity":1,"message":"1293","line":100,"column":8,"nodeType":"1242","endLine":100,"endColumn":10,"suggestions":"1414"},{"ruleId":"1229","severity":1,"message":"1315","line":2,"column":8,"nodeType":"1231","messageId":"1232","endLine":2,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1316","line":4,"column":8,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":14},{"ruleId":"1229","severity":1,"message":"1356","line":3,"column":21,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":30},{"ruleId":"1229","severity":1,"message":"1415","line":3,"column":32,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":42},{"ruleId":"1229","severity":1,"message":"1249","line":6,"column":5,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1237","line":10,"column":9,"nodeType":"1231","messageId":"1232","endLine":10,"endColumn":16},{"ruleId":"1416","severity":2,"message":"1417","line":55,"column":30,"nodeType":"1231","endLine":55,"endColumn":37},{"ruleId":"1229","severity":1,"message":"1234","line":4,"column":9,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1418","line":6,"column":9,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":28},{"ruleId":"1229","severity":1,"message":"1419","line":7,"column":9,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":34},{"ruleId":"1229","severity":1,"message":"1420","line":7,"column":36,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":60},{"ruleId":"1229","severity":1,"message":"1291","line":8,"column":9,"nodeType":"1231","messageId":"1232","endLine":8,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1292","line":8,"column":24,"nodeType":"1231","messageId":"1232","endLine":8,"endColumn":36},{"ruleId":"1229","severity":1,"message":"1295","line":17,"column":8,"nodeType":"1231","messageId":"1232","endLine":17,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1296","line":18,"column":9,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1421","line":22,"column":8,"nodeType":"1231","messageId":"1232","endLine":22,"endColumn":19},{"ruleId":"1229","severity":1,"message":"1249","line":35,"column":5,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":10},{"ruleId":"1240","severity":1,"message":"1293","line":97,"column":8,"nodeType":"1242","endLine":97,"endColumn":10,"suggestions":"1422"},{"ruleId":"1240","severity":1,"message":"1423","line":104,"column":8,"nodeType":"1242","endLine":104,"endColumn":22,"suggestions":"1424"},{"ruleId":"1240","severity":1,"message":"1301","line":160,"column":8,"nodeType":"1242","endLine":160,"endColumn":15,"suggestions":"1425"},{"ruleId":"1240","severity":1,"message":"1354","line":165,"column":8,"nodeType":"1242","endLine":165,"endColumn":20,"suggestions":"1426"},{"ruleId":"1284","severity":1,"message":"1285","line":334,"column":37,"nodeType":"1276","endLine":338,"endColumn":43},{"ruleId":"1284","severity":1,"message":"1285","line":341,"column":37,"nodeType":"1276","endLine":342,"endColumn":83},{"ruleId":"1229","severity":1,"message":"1281","line":28,"column":8,"nodeType":"1231","messageId":"1232","endLine":28,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1239","line":36,"column":14,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":36,"column":20,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1311","line":48,"column":12,"nodeType":"1231","messageId":"1232","endLine":48,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1312","line":48,"column":28,"nodeType":"1231","messageId":"1232","endLine":48,"endColumn":45},{"ruleId":"1266","severity":1,"message":"1267","line":63,"column":36,"nodeType":"1268","messageId":"1269","endLine":63,"endColumn":38},{"ruleId":"1274","severity":1,"message":"1275","line":96,"column":17,"nodeType":"1276","endLine":99,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1275","line":116,"column":17,"nodeType":"1276","endLine":120,"endColumn":19},{"ruleId":"1240","severity":1,"message":"1277","line":206,"column":8,"nodeType":"1242","endLine":206,"endColumn":10,"suggestions":"1427"},{"ruleId":"1240","severity":1,"message":"1301","line":245,"column":8,"nodeType":"1242","endLine":245,"endColumn":15,"suggestions":"1428"},{"ruleId":"1229","severity":1,"message":"1233","line":6,"column":9,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1235","line":12,"column":9,"nodeType":"1231","messageId":"1232","endLine":12,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1295","line":17,"column":8,"nodeType":"1231","messageId":"1232","endLine":17,"endColumn":9},{"ruleId":"1229","severity":1,"message":"1296","line":18,"column":9,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":15},{"ruleId":"1229","severity":1,"message":"1429","line":19,"column":8,"nodeType":"1231","messageId":"1232","endLine":19,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1421","line":22,"column":8,"nodeType":"1231","messageId":"1232","endLine":22,"endColumn":19},{"ruleId":"1229","severity":1,"message":"1430","line":32,"column":12,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1431","line":33,"column":12,"nodeType":"1231","messageId":"1232","endLine":33,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1432","line":34,"column":12,"nodeType":"1231","messageId":"1232","endLine":34,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1433","line":35,"column":12,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1434","line":36,"column":12,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":27},{"ruleId":"1240","severity":1,"message":"1293","line":75,"column":8,"nodeType":"1242","endLine":75,"endColumn":10,"suggestions":"1435"},{"ruleId":"1240","severity":1,"message":"1352","line":98,"column":8,"nodeType":"1242","endLine":98,"endColumn":15,"suggestions":"1436"},{"ruleId":"1240","severity":1,"message":"1354","line":103,"column":8,"nodeType":"1242","endLine":103,"endColumn":15,"suggestions":"1437"},{"ruleId":"1229","severity":1,"message":"1438","line":113,"column":11,"nodeType":"1231","messageId":"1232","endLine":113,"endColumn":32},{"ruleId":"1229","severity":1,"message":"1439","line":127,"column":11,"nodeType":"1231","messageId":"1232","endLine":127,"endColumn":32},{"ruleId":"1229","severity":1,"message":"1440","line":141,"column":11,"nodeType":"1231","messageId":"1232","endLine":141,"endColumn":32},{"ruleId":"1229","severity":1,"message":"1441","line":31,"column":18,"nodeType":"1231","messageId":"1232","endLine":31,"endColumn":25},{"ruleId":"1229","severity":1,"message":"1442","line":32,"column":21,"nodeType":"1231","messageId":"1232","endLine":32,"endColumn":31},{"ruleId":"1229","severity":1,"message":"1443","line":36,"column":22,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":33},{"ruleId":"1229","severity":1,"message":"1444","line":39,"column":12,"nodeType":"1231","messageId":"1232","endLine":39,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1311","line":40,"column":12,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1312","line":40,"column":28,"nodeType":"1231","messageId":"1232","endLine":40,"endColumn":45},{"ruleId":"1229","severity":1,"message":"1445","line":42,"column":29,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":47},{"ruleId":"1229","severity":1,"message":"1446","line":44,"column":9,"nodeType":"1231","messageId":"1232","endLine":44,"endColumn":21},{"ruleId":"1229","severity":1,"message":"1447","line":45,"column":9,"nodeType":"1231","messageId":"1232","endLine":45,"endColumn":22},{"ruleId":"1266","severity":1,"message":"1267","line":55,"column":36,"nodeType":"1268","messageId":"1269","endLine":55,"endColumn":38},{"ruleId":"1229","severity":1,"message":"1448","line":66,"column":11,"nodeType":"1231","messageId":"1232","endLine":66,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1449","line":77,"column":11,"nodeType":"1231","messageId":"1232","endLine":77,"endColumn":17},{"ruleId":"1274","severity":1,"message":"1275","line":88,"column":17,"nodeType":"1276","endLine":91,"endColumn":19},{"ruleId":"1229","severity":1,"message":"1450","line":100,"column":11,"nodeType":"1231","messageId":"1232","endLine":100,"endColumn":39},{"ruleId":"1240","severity":1,"message":"1293","line":146,"column":8,"nodeType":"1242","endLine":146,"endColumn":10,"suggestions":"1451"},{"ruleId":"1240","severity":1,"message":"1301","line":180,"column":8,"nodeType":"1242","endLine":180,"endColumn":15,"suggestions":"1452"},{"ruleId":"1229","severity":1,"message":"1250","line":7,"column":12,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1250","line":7,"column":12,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1235","line":7,"column":9,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":17},{"ruleId":"1240","severity":1,"message":"1453","line":23,"column":8,"nodeType":"1242","endLine":23,"endColumn":33,"suggestions":"1454"},{"ruleId":"1229","severity":1,"message":"1455","line":3,"column":8,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":14},{"ruleId":"1229","severity":1,"message":"1323","line":4,"column":9,"nodeType":"1231","messageId":"1232","endLine":4,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1418","line":6,"column":9,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":28},{"ruleId":"1229","severity":1,"message":"1456","line":6,"column":30,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":48},{"ruleId":"1229","severity":1,"message":"1238","line":18,"column":10,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1239","line":18,"column":14,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1272","line":18,"column":20,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1317","line":24,"column":12,"nodeType":"1231","messageId":"1232","endLine":24,"endColumn":16},{"ruleId":"1240","severity":1,"message":"1457","line":30,"column":8,"nodeType":"1242","endLine":30,"endColumn":10,"suggestions":"1458"},{"ruleId":"1240","severity":1,"message":"1459","line":34,"column":8,"nodeType":"1242","endLine":34,"endColumn":33,"suggestions":"1460"},{"ruleId":"1229","severity":1,"message":"1461","line":1,"column":16,"nodeType":"1231","messageId":"1232","endLine":1,"endColumn":25},{"ruleId":"1286","severity":1,"message":"1287","line":49,"column":13,"nodeType":"1288","endLine":49,"endColumn":29},{"ruleId":"1462","severity":1,"message":"1463","line":33,"column":17,"nodeType":"1276","endLine":37,"endColumn":34},{"ruleId":"1229","severity":1,"message":"1317","line":49,"column":12,"nodeType":"1231","messageId":"1232","endLine":49,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1464","line":52,"column":12,"nodeType":"1231","messageId":"1232","endLine":52,"endColumn":21},{"ruleId":"1229","severity":1,"message":"1465","line":52,"column":23,"nodeType":"1231","messageId":"1232","endLine":52,"endColumn":35},{"ruleId":"1229","severity":1,"message":"1466","line":54,"column":11,"nodeType":"1231","messageId":"1232","endLine":54,"endColumn":22},{"ruleId":"1229","severity":1,"message":"1318","line":75,"column":12,"nodeType":"1231","messageId":"1232","endLine":75,"endColumn":16},{"ruleId":"1274","severity":1,"message":"1275","line":85,"column":29,"nodeType":"1276","endLine":88,"endColumn":31},{"ruleId":"1284","severity":1,"message":"1285","line":8,"column":13,"nodeType":"1276","endLine":8,"endColumn":64},{"ruleId":"1284","severity":1,"message":"1285","line":9,"column":13,"nodeType":"1276","endLine":9,"endColumn":65},{"ruleId":"1284","severity":1,"message":"1285","line":10,"column":13,"nodeType":"1276","endLine":10,"endColumn":66},{"ruleId":"1284","severity":1,"message":"1285","line":11,"column":13,"nodeType":"1276","endLine":11,"endColumn":65},{"ruleId":"1284","severity":1,"message":"1285","line":12,"column":13,"nodeType":"1276","endLine":12,"endColumn":65},{"ruleId":"1284","severity":1,"message":"1285","line":13,"column":13,"nodeType":"1276","endLine":13,"endColumn":64},{"ruleId":"1284","severity":1,"message":"1285","line":14,"column":13,"nodeType":"1276","endLine":14,"endColumn":61},{"ruleId":"1229","severity":1,"message":"1467","line":7,"column":9,"nodeType":"1231","messageId":"1232","endLine":7,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1468","line":14,"column":9,"nodeType":"1231","messageId":"1232","endLine":14,"endColumn":15},{"ruleId":"1240","severity":1,"message":"1301","line":34,"column":8,"nodeType":"1242","endLine":34,"endColumn":15,"suggestions":"1469"},{"ruleId":"1229","severity":1,"message":"1317","line":11,"column":12,"nodeType":"1231","messageId":"1232","endLine":11,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1249","line":18,"column":5,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":10},{"ruleId":"1229","severity":1,"message":"1470","line":23,"column":9,"nodeType":"1231","messageId":"1232","endLine":23,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1471","line":26,"column":9,"nodeType":"1231","messageId":"1232","endLine":26,"endColumn":28},{"ruleId":"1229","severity":1,"message":"1237","line":35,"column":9,"nodeType":"1231","messageId":"1232","endLine":35,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1326","line":36,"column":12,"nodeType":"1231","messageId":"1232","endLine":36,"endColumn":13},{"ruleId":"1229","severity":1,"message":"1472","line":45,"column":11,"nodeType":"1231","messageId":"1232","endLine":45,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1315","line":2,"column":8,"nodeType":"1231","messageId":"1232","endLine":2,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1317","line":26,"column":12,"nodeType":"1231","messageId":"1232","endLine":26,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1318","line":29,"column":12,"nodeType":"1231","messageId":"1232","endLine":29,"endColumn":16},{"ruleId":"1240","severity":1,"message":"1293","line":37,"column":8,"nodeType":"1242","endLine":37,"endColumn":10,"suggestions":"1473"},{"ruleId":"1328","severity":1,"message":"1329","line":41,"column":13,"nodeType":"1330","messageId":"1331","endLine":44,"endColumn":14},{"ruleId":"1328","severity":1,"message":"1329","line":46,"column":13,"nodeType":"1330","messageId":"1331","endLine":49,"endColumn":14},{"ruleId":"1284","severity":1,"message":"1285","line":67,"column":13,"nodeType":"1276","endLine":69,"endColumn":93},{"ruleId":"1286","severity":1,"message":"1287","line":148,"column":37,"nodeType":"1288","endLine":150,"endColumn":39},{"ruleId":"1284","severity":1,"message":"1285","line":166,"column":21,"nodeType":"1276","endLine":167,"endColumn":33},{"ruleId":"1229","severity":1,"message":"1317","line":16,"column":12,"nodeType":"1231","messageId":"1232","endLine":16,"endColumn":16},{"ruleId":"1240","severity":1,"message":"1474","line":26,"column":8,"nodeType":"1242","endLine":26,"endColumn":20,"suggestions":"1475"},{"ruleId":"1229","severity":1,"message":"1317","line":24,"column":12,"nodeType":"1231","messageId":"1232","endLine":24,"endColumn":16},{"ruleId":"1240","severity":1,"message":"1476","line":34,"column":8,"nodeType":"1242","endLine":34,"endColumn":20,"suggestions":"1477"},{"ruleId":"1274","severity":1,"message":"1275","line":62,"column":57,"nodeType":"1276","endLine":63,"endColumn":194},{"ruleId":"1229","severity":1,"message":"1478","line":12,"column":12,"nodeType":"1231","messageId":"1232","endLine":12,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1479","line":12,"column":20,"nodeType":"1231","messageId":"1232","endLine":12,"endColumn":29},{"ruleId":"1229","severity":1,"message":"1317","line":18,"column":12,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":16},{"ruleId":"1240","severity":1,"message":"1480","line":28,"column":8,"nodeType":"1242","endLine":28,"endColumn":25,"suggestions":"1481"},{"ruleId":"1229","severity":1,"message":"1309","line":42,"column":12,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":17},{"ruleId":"1229","severity":1,"message":"1310","line":42,"column":19,"nodeType":"1231","messageId":"1232","endLine":42,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1443","line":44,"column":22,"nodeType":"1231","messageId":"1232","endLine":44,"endColumn":33},{"ruleId":"1229","severity":1,"message":"1311","line":46,"column":12,"nodeType":"1231","messageId":"1232","endLine":46,"endColumn":26},{"ruleId":"1229","severity":1,"message":"1312","line":46,"column":28,"nodeType":"1231","messageId":"1232","endLine":46,"endColumn":45},{"ruleId":"1266","severity":1,"message":"1267","line":60,"column":36,"nodeType":"1268","messageId":"1269","endLine":60,"endColumn":38},{"ruleId":"1274","severity":1,"message":"1275","line":93,"column":17,"nodeType":"1276","endLine":97,"endColumn":19},{"ruleId":"1274","severity":1,"message":"1275","line":105,"column":13,"nodeType":"1276","endLine":107,"endColumn":152},{"ruleId":"1240","severity":1,"message":"1293","line":204,"column":8,"nodeType":"1242","endLine":204,"endColumn":10,"suggestions":"1482"},{"ruleId":"1240","severity":1,"message":"1301","line":221,"column":8,"nodeType":"1242","endLine":221,"endColumn":15,"suggestions":"1483"},{"ruleId":"1284","severity":1,"message":"1285","line":233,"column":25,"nodeType":"1276","endLine":233,"endColumn":81},{"ruleId":"1284","severity":1,"message":"1285","line":236,"column":25,"nodeType":"1276","endLine":237,"endColumn":48},{"ruleId":"1284","severity":1,"message":"1285","line":240,"column":25,"nodeType":"1276","endLine":241,"endColumn":48},{"ruleId":"1286","severity":1,"message":"1287","line":254,"column":21,"nodeType":"1288","endLine":256,"endColumn":23},{"ruleId":"1223","replacedBy":"1484"},{"ruleId":"1225","replacedBy":"1485"},{"ruleId":"1229","severity":1,"message":"1326","line":6,"column":12,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":13},{"ruleId":"1240","severity":1,"message":"1486","line":11,"column":8,"nodeType":"1242","endLine":11,"endColumn":14,"suggestions":"1487"},{"ruleId":"1284","severity":1,"message":"1285","line":37,"column":13,"nodeType":"1276","endLine":38,"endColumn":59},{"ruleId":"1284","severity":1,"message":"1285","line":41,"column":21,"nodeType":"1276","endLine":45,"endColumn":38},{"ruleId":"1284","severity":1,"message":"1285","line":48,"column":21,"nodeType":"1276","endLine":52,"endColumn":44},{"ruleId":"1229","severity":1,"message":"1488","line":3,"column":8,"nodeType":"1231","messageId":"1232","endLine":3,"endColumn":21},{"ruleId":"1229","severity":1,"message":"1317","line":12,"column":12,"nodeType":"1231","messageId":"1232","endLine":12,"endColumn":16},{"ruleId":"1229","severity":1,"message":"1489","line":16,"column":11,"nodeType":"1231","messageId":"1232","endLine":16,"endColumn":20},{"ruleId":"1229","severity":1,"message":"1490","line":18,"column":12,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":24},{"ruleId":"1229","severity":1,"message":"1326","line":19,"column":12,"nodeType":"1231","messageId":"1232","endLine":19,"endColumn":13},{"ruleId":"1240","severity":1,"message":"1491","line":23,"column":8,"nodeType":"1242","endLine":23,"endColumn":21,"suggestions":"1492"},{"ruleId":"1229","severity":1,"message":"1493","line":25,"column":11,"nodeType":"1231","messageId":"1232","endLine":25,"endColumn":27},{"ruleId":"1229","severity":1,"message":"1494","line":30,"column":11,"nodeType":"1231","messageId":"1232","endLine":30,"endColumn":22},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1246","severity":1,"message":"1247","line":9,"column":1,"nodeType":"1248","endLine":37,"endColumn":3},{"ruleId":"1229","severity":1,"message":"1495","line":6,"column":8,"nodeType":"1231","messageId":"1232","endLine":6,"endColumn":12},{"ruleId":"1229","severity":1,"message":"1496","line":11,"column":8,"nodeType":"1231","messageId":"1232","endLine":11,"endColumn":13},{"ruleId":"1229","severity":1,"message":"1497","line":17,"column":8,"nodeType":"1231","messageId":"1232","endLine":17,"endColumn":18},{"ruleId":"1229","severity":1,"message":"1498","line":18,"column":8,"nodeType":"1231","messageId":"1232","endLine":18,"endColumn":17},"no-native-reassign",["1499"],"no-negated-in-lhs",["1500"],["1499"],["1500"],"no-unused-vars","'Sidebar' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","'NavLink' is defined but never used.","'Constant' is defined but never used.","'toast' is defined but never used.","'history' is assigned a value but never used.","'id' is assigned a value but never used.","'page' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'category' and 'domaine'. Either include them or remove the dependency array.","ArrayExpression",["1501"],"React Hook useEffect has missing dependencies: 'category', 'domaine', 'pathParam', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1502"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'route' is assigned a value but never used.","'register' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'errors' is assigned a value but never used.","'currentPath' is assigned a value but never used.","'setCurrentPath' is assigned a value but never used.","'thematique' is assigned a value but never used.","'setThematique' is assigned a value but never used.","'setTitle' is assigned a value but never used.","'keyword' is assigned a value but never used.","'setKeyword' is assigned a value but never used.","'keywordDescription' is assigned a value but never used.","'setKeywordDescription' is assigned a value but never used.","'description' is assigned a value but never used.","'setDescription' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'domaine' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1503"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Comments' is defined but never used.","'CommentField' is defined but never used.","'domaine' is assigned a value but never used.","'forceUpdate' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'id' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1504"],"'NewPost' is defined but never used.","'PostDetail' is defined but never used.","'$' is defined but never used.","'pathname' is assigned a value but never used.","'matchWorkForHome' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","'postFaqAction' is defined but never used.","'postFaqReset' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1505"],"'_' is defined but never used.","'Config' is defined but never used.","'Interweave' is defined but never used.","'glossary' is assigned a value but never used.","'setGlossary' is assigned a value but never used.",["1506"],"React Hook useEffect has missing dependencies: 'history' and 't'. Either include them or remove the dependency array.",["1507"],"'result' is assigned a value but never used.","'matchWorkaround' is assigned a value but never used.","'currentPathName' is assigned a value but never used.","'currentPathNameInArray' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'domaine', 'id', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1508"],"'image' is assigned a value but never used.","'setImage' is assigned a value but never used.","'uploadedImages' is assigned a value but never used.","'setUploadedImages' is assigned a value but never used.",["1509"],["1510"],"'PropTypes' is defined but never used.","'moment' is defined but never used.","'rest' is assigned a value but never used.","'i18n' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","React Hook useEffect has a missing dependency: 'posts'. Either include it or remove the dependency array.",["1511"],"'FakeData' is defined but never used.","React Hook useEffect has a missing dependency: 'blogs'. Either include it or remove the dependency array.",["1512"],"'t' is assigned a value but never used.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'React' is defined but never used.","'defaultThemes' is defined but never used.","'PostLayout' is defined but never used.","'PrivateRoute' is defined but never used.","'JobOfferLayout' is defined but never used.","'JobOfferDetail' is defined but never used.","'HeaderAdmin' is defined but never used.","'AdminLayout' is defined but never used.","'AdminRoute' is defined but never used.","'AdminPost' is defined but never used.","'TitleUnderlined' is defined but never used.","'faArrowAltCircleDown' is defined but never used.","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.",["1513"],"'fetchLoginError' is defined but never used.","'fetchLoginPending' is defined but never used.","'fetchLoginSuccess' is defined but never used.",["1514"],["1515"],["1516"],"React Hook useEffect has a missing dependency: 'setPostsPublishedAction'. Either include it or remove the dependency array.",["1517"],"React Hook useEffect has a missing dependency: 'props.result'. Either include it or remove the dependency array.",["1518"],"'useParams' is defined but never used.","'Link' is defined but never used.","'getDomaineByPostAction' is defined but never used.","'openTab' is defined but never used.","'mystyle2' is assigned a value but never used.",["1519"],"'NewBlog' is defined but never used.","'Utils' is defined but never used.","'NavigationLight' is defined but never used.","'ArchiveWidget' is defined but never used.","'Input' is defined but never used.","'FaqList' is defined but never used.",["1520"],["1521"],"'PostList' is defined but never used.","'getAllJobOfferReset' is defined but never used.","'getAllJobOfferAction' is defined but never used.","'pathParam' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'domaine' and 'history'. Either include them or remove the dependency array.",["1522"],["1523"],"'hasErrorExecution' is assigned a value but never used.","'setHasErrorExecution' is assigned a value but never used.","'isSubmit' is assigned a value but never used.","'setIsSubmit' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["1524"],"'answer' is assigned a value but never used.","'setAnswer' is assigned a value but never used.",["1525"],["1526"],["1527"],"'DataTable' is defined but never used.",["1528"],"React Hook useEffect has a missing dependency: 'setBlogsPublishedAction'. Either include it or remove the dependency array.",["1529"],["1530"],"'BlogLayout' is defined but never used.","React Hook useEffect has a missing dependency: 'domaine'. Either include it or remove the dependency array.",["1531"],["1532"],"'category' is assigned a value but never used.","'setCategory' is assigned a value but never used.",["1533"],"React Hook useEffect has a missing dependency: 'setThematiquePublishedAction'. Either include it or remove the dependency array.",["1534"],["1535"],["1536"],["1537"],["1538"],["1539"],["1540"],"'setId' is assigned a value but never used.",["1541"],["1542"],"'getAllPostsByDomaineAction' is defined but never used.","'getAllPostsByDomaineReset' is defined but never used.",["1543"],["1544"],"'withRouter' is defined but never used.","react/no-typos","Typo in declared prop type: integer","'getAllDomaineAction' is defined but never used.","'validatePublicationAction' is defined but never used.","'validatePublicationReset' is defined but never used.","'ReactPlayer' is defined but never used.",["1545"],"React Hook useEffect has a missing dependency: 'setCategoryPublishedAction'. Either include it or remove the dependency array.",["1546"],["1547"],["1548"],["1549"],["1550"],"'CustomMaterialMenu' is defined but never used.","'postsPublished' is assigned a value but never used.","'postsWaiting' is assigned a value but never used.","'postsExpired' is assigned a value but never used.","'postsDeleted' is assigned a value but never used.","'tabsActiveIndex' is assigned a value but never used.",["1551"],["1552"],["1553"],"'setPostsWaitingAction' is assigned a value but never used.","'setPostsExpiredAction' is assigned a value but never used.","'setPostsDeletedAction' is assigned a value but never used.","'setDate' is assigned a value but never used.","'setDateFin' is assigned a value but never used.","'setFeatured' is assigned a value but never used.","'isDataSubmit' is assigned a value but never used.","'setIsImageSelected' is assigned a value but never used.","'getRootProps' is assigned a value but never used.","'getInputProps' is assigned a value but never used.","'style' is assigned a value but never used.","'Thumbs' is assigned a value but never used.","'handleFileUploadChangeStatus' is assigned a value but never used.",["1554"],["1555"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["1556"],"'Button' is defined but never used.","'getAllDomaineReset' is defined but never used.","React Hook useEffect has missing dependencies: 'categoryId' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1557"],"React Hook useEffect has missing dependencies: 'category' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["1558"],"'useEffect' is defined but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","'cardModal' is assigned a value but never used.","'setCardModal' is assigned a value but never used.","'slideParams' is assigned a value but never used.","'useForm' is defined but never used.","'postID' is assigned a value but never used.",["1559"],"'onDeleteRow' is assigned a value but never used.","'deletePostByIdReset' is assigned a value but never used.","'deleteRow' is assigned a value but never used.",["1560"],"React Hook useEffect has a missing dependency: 'faqs'. Either include it or remove the dependency array.",["1561"],"React Hook useEffect has a missing dependency: 'jobs'. Either include it or remove the dependency array.",["1562"],"'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'glossarys'. Either include it or remove the dependency array.",["1563"],["1564"],["1565"],["1499"],["1500"],"React Hook useEffect has a missing dependency: 'changeLanguage'. Either include it or remove the dependency array.",["1566"],"'ReactPaginate' is defined but never used.","'totalPage' is assigned a value but never used.","'currentPosts' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'items'. Either include it or remove the dependency array.",["1567"],"'handlePageChange' is assigned a value but never used.","'accordionId' is assigned a value but never used.","'Home' is defined but never used.","'Admin' is defined but never used.","'UserLayout' is defined but never used.","'UserRoute' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1568","fix":"1569"},{"desc":"1570","fix":"1571"},{"desc":"1572","fix":"1573"},{"desc":"1574","fix":"1575"},{"desc":"1576","fix":"1577"},{"desc":"1576","fix":"1578"},{"desc":"1579","fix":"1580"},{"desc":"1581","fix":"1582"},{"desc":"1576","fix":"1583"},{"desc":"1579","fix":"1584"},{"desc":"1585","fix":"1586"},{"desc":"1587","fix":"1588"},{"desc":"1589","fix":"1590"},{"desc":"1576","fix":"1591"},{"desc":"1579","fix":"1592"},{"desc":"1576","fix":"1593"},{"desc":"1594","fix":"1595"},{"desc":"1596","fix":"1597"},{"desc":"1576","fix":"1598"},{"desc":"1576","fix":"1599"},{"desc":"1579","fix":"1600"},{"desc":"1601","fix":"1602"},{"desc":"1603","fix":"1604"},{"desc":"1605","fix":"1606"},{"desc":"1576","fix":"1607"},{"desc":"1579","fix":"1608"},{"desc":"1574","fix":"1609"},{"desc":"1576","fix":"1610"},{"desc":"1611","fix":"1612"},{"desc":"1613","fix":"1614"},{"desc":"1572","fix":"1615"},{"desc":"1603","fix":"1616"},{"desc":"1576","fix":"1617"},{"desc":"1618","fix":"1619"},{"desc":"1579","fix":"1620"},{"desc":"1621","fix":"1622"},{"desc":"1576","fix":"1623"},{"desc":"1618","fix":"1624"},{"desc":"1579","fix":"1625"},{"desc":"1621","fix":"1626"},{"desc":"1576","fix":"1627"},{"desc":"1579","fix":"1628"},{"desc":"1579","fix":"1629"},{"desc":"1576","fix":"1630"},{"desc":"1576","fix":"1631"},{"desc":"1632","fix":"1633"},{"desc":"1579","fix":"1634"},{"desc":"1621","fix":"1635"},{"desc":"1574","fix":"1636"},{"desc":"1579","fix":"1637"},{"desc":"1576","fix":"1638"},{"desc":"1594","fix":"1639"},{"desc":"1596","fix":"1640"},{"desc":"1576","fix":"1641"},{"desc":"1579","fix":"1642"},{"desc":"1643","fix":"1644"},{"desc":"1645","fix":"1646"},{"desc":"1647","fix":"1648"},{"desc":"1579","fix":"1649"},{"desc":"1576","fix":"1650"},{"desc":"1651","fix":"1652"},{"desc":"1653","fix":"1654"},{"desc":"1655","fix":"1656"},{"desc":"1576","fix":"1657"},{"desc":"1579","fix":"1658"},{"desc":"1659","fix":"1660"},{"desc":"1661","fix":"1662"},"Update the dependencies array to be: [category, domaine, props]",{"range":"1663","text":"1664"},"Update the dependencies array to be: [category, domaine, pathParam, props, props.location.pathname]",{"range":"1665","text":"1666"},"Update the dependencies array to be: [domaine, props]",{"range":"1667","text":"1668"},"Update the dependencies array to be: [id, props]",{"range":"1669","text":"1670"},"Update the dependencies array to be: [props]",{"range":"1671","text":"1672"},{"range":"1673","text":"1672"},"Update the dependencies array to be: [history, props, t]",{"range":"1674","text":"1675"},"Update the dependencies array to be: [domaine, id, props]",{"range":"1676","text":"1677"},{"range":"1678","text":"1672"},{"range":"1679","text":"1675"},"Update the dependencies array to be: [posts, props.posts]",{"range":"1680","text":"1681"},"Update the dependencies array to be: [blogs, props.blogs]",{"range":"1682","text":"1683"},"Update the dependencies array to be: [loadData, props]",{"range":"1684","text":"1685"},{"range":"1686","text":"1672"},{"range":"1687","text":"1675"},{"range":"1688","text":"1672"},"Update the dependencies array to be: [props, setPostsPublishedAction]",{"range":"1689","text":"1690"},"Update the dependencies array to be: [posts, props.result]",{"range":"1691","text":"1692"},{"range":"1693","text":"1672"},{"range":"1694","text":"1672"},{"range":"1695","text":"1675"},"Update the dependencies array to be: [domaine, history, props]",{"range":"1696","text":"1697"},"Update the dependencies array to be: [domaine, props, props.location.pathname]",{"range":"1698","text":"1699"},"Update the dependencies array to be: [history, props]",{"range":"1700","text":"1701"},{"range":"1702","text":"1672"},{"range":"1703","text":"1675"},{"range":"1704","text":"1670"},{"range":"1705","text":"1672"},"Update the dependencies array to be: [props, setBlogsPublishedAction]",{"range":"1706","text":"1707"},"Update the dependencies array to be: [blog, props.result]",{"range":"1708","text":"1709"},{"range":"1710","text":"1668"},{"range":"1711","text":"1699"},{"range":"1712","text":"1672"},"Update the dependencies array to be: [props.result, setThematiquePublishedAction]",{"range":"1713","text":"1714"},{"range":"1715","text":"1675"},"Update the dependencies array to be: [categories, props.result]",{"range":"1716","text":"1717"},{"range":"1718","text":"1672"},{"range":"1719","text":"1714"},{"range":"1720","text":"1675"},{"range":"1721","text":"1717"},{"range":"1722","text":"1672"},{"range":"1723","text":"1675"},{"range":"1724","text":"1675"},{"range":"1725","text":"1672"},{"range":"1726","text":"1672"},"Update the dependencies array to be: [props.result, setCategoryPublishedAction]",{"range":"1727","text":"1728"},{"range":"1729","text":"1675"},{"range":"1730","text":"1717"},{"range":"1731","text":"1670"},{"range":"1732","text":"1675"},{"range":"1733","text":"1672"},{"range":"1734","text":"1690"},{"range":"1735","text":"1692"},{"range":"1736","text":"1672"},{"range":"1737","text":"1675"},"Update the dependencies array to be: [data, props.location.pathname]",{"range":"1738","text":"1739"},"Update the dependencies array to be: [categoryId, props]",{"range":"1740","text":"1741"},"Update the dependencies array to be: [category, props, props.location.pathname]",{"range":"1742","text":"1743"},{"range":"1744","text":"1675"},{"range":"1745","text":"1672"},"Update the dependencies array to be: [faqs, props.faqs]",{"range":"1746","text":"1747"},"Update the dependencies array to be: [jobs, props.jobs]",{"range":"1748","text":"1749"},"Update the dependencies array to be: [glossarys, props.glossarys]",{"range":"1750","text":"1751"},{"range":"1752","text":"1672"},{"range":"1753","text":"1675"},"Update the dependencies array to be: [changeLanguage, lang]",{"range":"1754","text":"1755"},"Update the dependencies array to be: [items, props.items]",{"range":"1756","text":"1757"},[1822,1829],"[category, domaine, props]",[2105,2130],"[category, domaine, pathParam, props, props.location.pathname]",[1970,1972],"[domaine, props]",[5938,5940],"[id, props]",[1766,1768],"[props]",[2427,2429],[3353,3360],"[history, props, t]",[4938,4940],"[domaine, id, props]",[4338,4340],[5654,5661],[1090,1103],"[posts, props.posts]",[1311,1324],"[blogs, props.blogs]",[6566,6573],"[loadData, props]",[5647,5649],[7064,7071],[5338,5340],[6355,6362],"[props, setPostsPublishedAction]",[6484,6491],"[posts, props.result]",[1748,1750],[2018,2020],[3698,3705],[1692,1699],"[domaine, history, props]",[1804,1829],"[domaine, props, props.location.pathname]",[1128,1135],"[history, props]",[1745,1747],[3258,3265],[2177,2179],[5507,5509],[6495,6502],"[props, setBlogsPublishedAction]",[6624,6630],"[blog, props.result]",[1684,1691],[1912,1937],[4297,4299],[4565,4579],"[props.result, setThematiquePublishedAction]",[6584,6591],[6713,6725],"[categories, props.result]",[4705,4707],[4977,4991],[6988,6995],[7117,7129],[4413,4415],[5380,5387],[3699,3706],[3859,3861],[4425,4427],[4642,4656],"[props.result, setCategoryPublishedAction]",[6635,6642],[6764,6776],[7750,7752],[9280,9287],[2982,2984],[3946,3953],[4075,4082],[5591,5593],[6952,6959],[716,741],"[data, props.location.pathname]",[985,987],"[categoryId, props]",[1068,1093],"[category, props, props.location.pathname]",[1162,1169],[1272,1274],[754,766],"[faqs, props.faqs]",[1045,1057],"[jobs, props.jobs]",[898,915],"[glossarys, props.glossarys]",[8519,8521],[9058,9065],[339,345],"[changeLanguage, lang]",[715,728],"[items, props.items]"]